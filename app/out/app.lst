
app/out/app.elf:     file format elf32-littlearm
app/out/app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000b91

Program Header:
0x70000001 off    0x000138ac vaddr 0x1a0038ac paddr 0x1a0038ac align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00000124 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000038b4 memsz 0x000038b4 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0038b4 align 2**16
         filesz 0x000000e8 memsz 0x000000e8 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000038a8  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  10000000  1a0038b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200e8  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200e8  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200e8  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200e8  2**2
                  CONTENTS
  6 .bss          0000003c  100000e8  100000e8  000000e8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200e8  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200e8  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200e8  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200e8  2**2
                  CONTENTS
 11 .init_array   00000004  1a0038a8  1a0038a8  000138a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0038ac  1a0038ac  000138ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000200e8  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000200e8  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000200e8  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000200e8  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000200e8  2**2
                  CONTENTS
 18 .noinit       00000000  10000124  10000124  000200e8  2**2
                  CONTENTS
 19 .debug_info   0001e943  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 000043a2  00000000  00000000  0003ea2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000073ab  00000000  00000000  00042dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 00000a40  00000000  00000000  0004a178  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 000009d0  00000000  00000000  0004abb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  0000d5e2  00000000  00000000  0004b588  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0000d29d  00000000  00000000  00058b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    00028299  00000000  00000000  00065e07  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  0008e0a0  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  0008e11f  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001ed8  00000000  00000000  0008e158  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000e8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0038a8 l    d  .init_array	00000000 .init_array
1a0038ac l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000124 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 camera_ov7670.c
1a000300 l     F .text	00000034 ov7670ResetCamera
1a000334 l     F .text	00000010 ov7670I2cInit
1a000344 l     F .text	00000024 ov7670WriteRegister
1a000368 l     F .text	00000048 ov7670ReadRegister
1a0003b0 l     F .text	0000001a ov7670EdgeDetect
00000000 l    df *ABS*	00000000 app.c
00000000 l    df *ABS*	00000000 system.c
100000e8 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 board.c
1a000ce4 l     F .text	00000044 Board_LED_Init
1a000d28 l     F .text	00000040 Board_TEC_Init
1a000d68 l     F .text	00000040 Board_GPIO_Init
1a000da8 l     F .text	00000030 Board_ADC_Init
1a000dd8 l     F .text	00000038 Board_SPI_Init
1a000e10 l     F .text	00000024 Board_I2C_Init
1a003560 l     O .text	00000008 GpioButtons
1a003568 l     O .text	0000000c GpioLeds
1a003574 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00358c l     O .text	00000004 InitClkStates
1a003590 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000f80 l     F .text	0000002c Chip_UART_GetIndex
1a003604 l     O .text	00000008 UART_BClock
1a00360c l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a0010e8 l     F .text	00000014 Chip_ADC_GetClockIndex
1a0010fc l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0011b0 l     F .text	000000a4 pll_calc_divs
1a001254 l     F .text	0000010c pll_get_frac
1a001360 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0015d4 l     F .text	00000022 Chip_Clock_GetDivRate
100000ec l     O .bss	00000008 audio_usb_pll_freq
1a003620 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00368c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001c24 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001c38 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
100000f4 l     O .bss	00000004 callBackFuncParams
100000f8 l     O .bss	00000008 tickCounter
10000100 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a001e00 l     F .text	00000030 i2cHardwareInit
1a001e30 l     F .text	0000003c i2cHardwareRead
1a001e6c l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001ef8 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000104 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a0022b4 l     F .text	00000010 clearInterrupt
1a0022c4 l     F .text	0000005c serveInterrupt
1000003c l     O .data	00000048 ultrasonicSensors
1a00380c l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a002a70 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a002e1c l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 impure.c
10000088 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 
1a0038ac l       .init_array	00000000 __init_array_end
1a0038a8 l       .bss_RAM5	00000000 __preinit_array_end
1a0038a8 l       .init_array	00000000 __init_array_start
1a0038a8 l       .bss_RAM5	00000000 __preinit_array_start
1a0013f8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000c30 g     F .text	00000012 _isatty_r
1a0019a4 g     F .text	0000000e Chip_I2CM_Xfer
1a0026c8 g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a001ea8 g     F .text	0000000e i2cInit
1a000c42 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0003ca g     F .text	00000080 ov7670ChangeFrameRate
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a002698 g     F .text	00000030 printf
1a000ec6 g     F .text	00000008 __stdio_init
1a000904 g     F .text	0000015c ov7670TakePhoto
1a003406 g     F .text	00000024 __sseek
1a002af0 g     F .text	00000060 __sinit
1a002790 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a0019f8 g     F .text	00000120 handleMasterXferState
1a002ac4 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a0011a2 g     F .text	0000000c Chip_ADC_SetResolution
1a0034e2 g     F .text	00000002 __malloc_unlock
1a001dcc g     F .text	00000034 SysTick_Handler
1a000b8c  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a000e6c g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a0038b4 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00044a g     F .text	00000100 ov7670ChangeResolution
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a001eb6 g     F .text	00000028 i2cRead
1a000c26 g     F .text	0000000a _fstat_r
53ff6cfe g       *ABS*	00000000 __valid_user_code_checksum
1a0038b4 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a001676 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a002ab8 g     F .text	0000000c _cleanup_r
1a001ba4 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a002340 g     F .text	00000000 .hidden __aeabi_uldivmod
10000124 g       .noinit	00000000 _noinit
1a002780 g     F .text	00000010 puts
10000110 g     O .bss	00000004 SystemCoreClock
1a000fac g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a0016f4 g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a000f08 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001b74 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a002370 g     F .text	000002cc .hidden __udivmoddi4
1a000cc4 g     F .text	00000020 _sbrk_r
1a00355c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000c4c g     F .text	0000004e _read_r
1a00232a g     F .text	0000000a GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a0038ac g       .ARM.exidx	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a003870 g     O .text	00000004 _global_impure_ptr
1a002640 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000e88 g     F .text	0000002c Board_Init
1a000c1a  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10000124 g       .bss	00000000 _ebss
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a000b90 g     F .text	00000088 Reset_Handler
1a001d50 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a0019b2 g     F .text	00000024 Chip_I2CM_XferBlocking
1a001b3c g     F .text	00000038 Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a0013ac g     F .text	0000004c Chip_Clock_EnableCrystal
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a003810 g     O .text	00000020 __sf_fake_stderr
1a001b18 g     F .text	00000024 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a001568 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0036d4 g     O .text	00000136 gpioPinsInit
1a001c50 g     F .text	00000012 Chip_SSP_SetClockRate
1a002e4a g     F .text	00000024 __sfputs_r
1a002334 g     F .text	0000000a GPIO2_IRQHandler
1a003440 g     F .text	00000000 memchr
1a002ccc g     F .text	0000009c _free_r
1a001650 g     F .text	00000026 Chip_Clock_GetBaseClock
100000e8 g       .bss	00000000 _bss
1a001170 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a001c62 g     F .text	0000003e Chip_SSP_SetBitRate
1a0019d6 g     F .text	00000002 Chip_GPIO_Init
1a003588 g     O .text	00000004 OscRateIn
10000124 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000c1c g     F .text	0000000a _close_r
1a001f2c g     F .text	00000194 gpioInit
1a002834 g     F .text	000000dc __swsetup_r
1a00263c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002b50 g     F .text	00000078 __sfp
1a0033ac g     F .text	00000022 __sread
1a00216c g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0034e0 g     F .text	00000002 __malloc_lock
1a000e58 g     F .text	00000014 Board_UARTPutChar
1a001bd4 g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a002a1c g     F .text	00000054 _fflush_r
1a003830 g     O .text	00000020 __sf_fake_stdin
1a001414 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002688 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000a60 g     F .text	0000012c main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a00342a g     F .text	00000008 __sclose
1a002d68 g     F .text	000000b4 _malloc_r
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a001684 g     F .text	0000003c Chip_Clock_EnableOpts
1a000ebe g     F .text	00000008 __stdio_getchar
1a001430 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a0014e8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001cd8 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a00227c g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0020c0 g     F .text	00000056 gpioWrite
1a000c18  w    F .text	00000002 _fini
1a002698 g     F .text	00000030 iprintf
1a001130 g     F .text	00000040 Chip_ADC_Init
10000120 g     O .bss	00000004 g_pUsbApi
1a000ed0 g     F .text	00000038 Board_SetupMuxing
1a001000 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a001d2c g     F .text	0000000c tickRead
1a000c9a g     F .text	00000028 _write_r
10000118 g     O .bss	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a00309c g     F .text	000000ea _printf_common
10000084 g     O .data	00000004 _impure_ptr
1a002910 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a0018a8 g     F .text	000000fc Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
10000124 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a001ca0 g     F .text	00000038 Chip_SSP_Init
1a001bec g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a002c04 g     F .text	00000048 __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a001ede g     F .text	00000018 i2cWrite
1a000e34 g     F .text	00000024 Board_Debug_Init
1a000eb4 g     F .text	0000000a __stdio_putchar
100000e8 g       .data	00000000 _edata
1a0019d8 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a0007f0 g     F .text	00000114 ov7670Init
1a001754 g     F .text	00000154 Chip_SetupCoreClock
1a0033ce g     F .text	00000038 __swrite
1a002320 g     F .text	0000000a GPIO0_IRQHandler
1a002e70 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a002bc8 g     F .text	0000003c _fwalk_reent
1a001740 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003850 g     O .text	00000020 __sf_fake_stdout
1a00054a g     F .text	000002a6 ov7670ChangeColorMode
1a00263c  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a002c4c g     F .text	00000080 __smakebuf_r
1a003188 g     F .text	00000224 _printf_i
1a0016c0 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1000010c g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a002116 g     F .text	00000054 gpioRead
1a002188 g     F .text	000000f4 boardInit
10000108 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a002e70 g     F .text	0000022c _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a001d38 g     F .text	00000018 tickPowerSet
1a0015f8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a001d10 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a000f74 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 91 0b 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a fe 6c ff 53     }............l.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	cd 1d 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	6d 21 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     m!..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	21 23 00 1a 2b 23 00 1a 35 23 00 1a bb 01 00 1a     !#..+#..5#......
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0038b4 	.word	0x1a0038b4
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000e8 	.word	0x000000e8
1a000120:	1a0038b4 	.word	0x1a0038b4
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0038b4 	.word	0x1a0038b4
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0038b4 	.word	0x1a0038b4
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0038b4 	.word	0x1a0038b4
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000e8 	.word	0x100000e8
1a000154:	0000003c 	.word	0x0000003c
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <ov7670ResetCamera>:
		return status;
}

// OV7670 reset routine
static void ov7670ResetCamera(void)
{
1a000300:	b508      	push	{r3, lr}
    gpioWrite( OV7670_PIN_RESET, ON );
1a000302:	2101      	movs	r1, #1
1a000304:	200c      	movs	r0, #12
1a000306:	f001 fedb 	bl	1a0020c0 <gpioWrite>
		delay(10);
1a00030a:	200a      	movs	r0, #10
1a00030c:	2100      	movs	r1, #0
1a00030e:	f001 ffb5 	bl	1a00227c <delay>
		gpioWrite( OV7670_PIN_RESET, OFF );
1a000312:	2100      	movs	r1, #0
1a000314:	200c      	movs	r0, #12
1a000316:	f001 fed3 	bl	1a0020c0 <gpioWrite>
		delay(100);
1a00031a:	2064      	movs	r0, #100	; 0x64
1a00031c:	2100      	movs	r1, #0
1a00031e:	f001 ffad 	bl	1a00227c <delay>
		gpioWrite( OV7670_PIN_RESET, ON );
1a000322:	2101      	movs	r1, #1
1a000324:	200c      	movs	r0, #12
1a000326:	f001 fecb 	bl	1a0020c0 <gpioWrite>
		delay(10);
1a00032a:	200a      	movs	r0, #10
1a00032c:	2100      	movs	r1, #0
1a00032e:	f001 ffa5 	bl	1a00227c <delay>

}
1a000332:	bd08      	pop	{r3, pc}

1a000334 <ov7670I2cInit>:
{
1a000334:	b508      	push	{r3, lr}
			i2cInit( I2C0, OV7670_I2C_RATE);
1a000336:	4902      	ldr	r1, [pc, #8]	; (1a000340 <ov7670I2cInit+0xc>)
1a000338:	2000      	movs	r0, #0
1a00033a:	f001 fdb5 	bl	1a001ea8 <i2cInit>
}
1a00033e:	bd08      	pop	{r3, pc}
1a000340:	000186a0 	.word	0x000186a0

1a000344 <ov7670WriteRegister>:
{
1a000344:	b500      	push	{lr}
1a000346:	b085      	sub	sp, #20
    transmitDataBuffer[0] = reg;
1a000348:	f88d 000c 	strb.w	r0, [sp, #12]
    transmitDataBuffer[1] = data;
1a00034c:	f88d 100d 	strb.w	r1, [sp, #13]
    int8_t status = i2cWrite(I2C0, OV7670_ADDR, transmitDataBuffer, 2, TRUE);
1a000350:	2301      	movs	r3, #1
1a000352:	9300      	str	r3, [sp, #0]
1a000354:	2302      	movs	r3, #2
1a000356:	aa03      	add	r2, sp, #12
1a000358:	2121      	movs	r1, #33	; 0x21
1a00035a:	2000      	movs	r0, #0
1a00035c:	f001 fdbf 	bl	1a001ede <i2cWrite>
}
1a000360:	b240      	sxtb	r0, r0
1a000362:	b005      	add	sp, #20
1a000364:	f85d fb04 	ldr.w	pc, [sp], #4

1a000368 <ov7670ReadRegister>:
{
1a000368:	b510      	push	{r4, lr}
1a00036a:	b088      	sub	sp, #32
1a00036c:	460c      	mov	r4, r1
1a00036e:	aa08      	add	r2, sp, #32
1a000370:	f802 0d09 	strb.w	r0, [r2, #-9]!
	  int8_t status = i2cWrite(I2C0, OV7670_ADDR, &reg, (SCCB_2_PHASE_WRITE - 1), TRUE);
1a000374:	2301      	movs	r3, #1
1a000376:	9300      	str	r3, [sp, #0]
1a000378:	2121      	movs	r1, #33	; 0x21
1a00037a:	2000      	movs	r0, #0
1a00037c:	f001 fdaf 	bl	1a001ede <i2cWrite>
		if (status == 1) {// If the write phase pass
1a000380:	2801      	cmp	r0, #1
1a000382:	d112      	bne.n	1a0003aa <ov7670ReadRegister+0x42>
        status = i2cRead(I2C0, OV7670_ADDR, 0, 0, FALSE, &readed, (SCCB_2_PHASE_WRITE - 1), TRUE);
1a000384:	2301      	movs	r3, #1
1a000386:	9303      	str	r3, [sp, #12]
1a000388:	9302      	str	r3, [sp, #8]
1a00038a:	f10d 031f 	add.w	r3, sp, #31
1a00038e:	9301      	str	r3, [sp, #4]
1a000390:	2000      	movs	r0, #0
1a000392:	9000      	str	r0, [sp, #0]
1a000394:	4603      	mov	r3, r0
1a000396:	4602      	mov	r2, r0
1a000398:	2121      	movs	r1, #33	; 0x21
1a00039a:	f001 fd8c 	bl	1a001eb6 <i2cRead>
1a00039e:	b240      	sxtb	r0, r0
		*output = readed;
1a0003a0:	f89d 301f 	ldrb.w	r3, [sp, #31]
1a0003a4:	7023      	strb	r3, [r4, #0]
}
1a0003a6:	b008      	add	sp, #32
1a0003a8:	bd10      	pop	{r4, pc}
			status = SCCB_WRONG_ADDR;
1a0003aa:	f06f 0001 	mvn.w	r0, #1
1a0003ae:	e7f7      	b.n	1a0003a0 <ov7670ReadRegister+0x38>

1a0003b0 <ov7670EdgeDetect>:
// OV7670 edge detect routine
/*
	+ signal: GPIO pin
	+ statusSignalPrev: Pointer to memory where the prevoius status is going to be readed and saved
*/
static int8_t ov7670EdgeDetect( uint8_t signal, uint8_t *statusSignalPrev) {
1a0003b0:	b510      	push	{r4, lr}
1a0003b2:	460c      	mov	r4, r1

    uint8_t status = -1;
    uint8_t statusSignal = gpioRead(signal);
1a0003b4:	f001 feaf 	bl	1a002116 <gpioRead>

    if(statusSignal != *statusSignalPrev) {
1a0003b8:	7823      	ldrb	r3, [r4, #0]
1a0003ba:	4283      	cmp	r3, r0
1a0003bc:	d003      	beq.n	1a0003c6 <ov7670EdgeDetect+0x16>

      status = statusSignal;   // Si es 0 es flanco de descenso, si es 1 es flanco de ascenso
1a0003be:	4603      	mov	r3, r0

    }

    *statusSignalPrev = statusSignal;
1a0003c0:	7020      	strb	r0, [r4, #0]

  return status;

}
1a0003c2:	b258      	sxtb	r0, r3
1a0003c4:	bd10      	pop	{r4, pc}
    uint8_t status = -1;
1a0003c6:	23ff      	movs	r3, #255	; 0xff
1a0003c8:	e7fa      	b.n	1a0003c0 <ov7670EdgeDetect+0x10>

1a0003ca <ov7670ChangeFrameRate>:
		return 1;
}

//Change Frame Rate
void ov7670ChangeFrameRate(uint8_t framerate)
{
1a0003ca:	b500      	push	{lr}
1a0003cc:	b083      	sub	sp, #12
    uint8_t output = 0;
1a0003ce:	2300      	movs	r3, #0
1a0003d0:	f88d 3007 	strb.w	r3, [sp, #7]

    if (framerate == OV7670_SLOW){
1a0003d4:	2801      	cmp	r0, #1
1a0003d6:	d01a      	beq.n	1a00040e <ov7670ChangeFrameRate+0x44>
        ov7670ReadRegister(OV7670_DBLV, &output);
        ov7670WriteRegister(OV7670_DBLV, output & 0x3F); //Bypass the PLL

    } else {
			// Set frame-rate PCLK = 12 MHz.
				ov7670ReadRegister(OV7670_CLKRC, &output);
1a0003d8:	f10d 0107 	add.w	r1, sp, #7
1a0003dc:	2011      	movs	r0, #17
1a0003de:	f7ff ffc3 	bl	1a000368 <ov7670ReadRegister>
				ov7670WriteRegister(OV7670_CLKRC, output & CLKRC_DIS_PREESCALER); //Disable the preescaler
1a0003e2:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0003e6:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
1a0003ea:	2011      	movs	r0, #17
1a0003ec:	f7ff ffaa 	bl	1a000344 <ov7670WriteRegister>
        ov7670ReadRegister(OV7670_DBLV, &output);
1a0003f0:	f10d 0107 	add.w	r1, sp, #7
1a0003f4:	206b      	movs	r0, #107	; 0x6b
1a0003f6:	f7ff ffb7 	bl	1a000368 <ov7670ReadRegister>
        ov7670WriteRegister(OV7670_DBLV, output & 0x3F); //Bypass the PLL
1a0003fa:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0003fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
1a000402:	206b      	movs	r0, #107	; 0x6b
1a000404:	f7ff ff9e 	bl	1a000344 <ov7670WriteRegister>
    }

}
1a000408:	b003      	add	sp, #12
1a00040a:	f85d fb04 	ldr.w	pc, [sp], #4
        ov7670ReadRegister(OV7670_CLKRC, &output);
1a00040e:	f10d 0107 	add.w	r1, sp, #7
1a000412:	2011      	movs	r0, #17
1a000414:	f7ff ffa8 	bl	1a000368 <ov7670ReadRegister>
        ov7670WriteRegister(OV7670_CLKRC, (output & CLKRC_ENA_PREESCALER) | CLKRC_SET_PREESCALER_64 ); //Divide the clock by 64 (12MHz/3)
1a000418:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00041c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
1a000420:	b249      	sxtb	r1, r1
1a000422:	f041 013f 	orr.w	r1, r1, #63	; 0x3f
1a000426:	f001 01bf 	and.w	r1, r1, #191	; 0xbf
1a00042a:	2011      	movs	r0, #17
1a00042c:	f7ff ff8a 	bl	1a000344 <ov7670WriteRegister>
        ov7670ReadRegister(OV7670_DBLV, &output);
1a000430:	f10d 0107 	add.w	r1, sp, #7
1a000434:	206b      	movs	r0, #107	; 0x6b
1a000436:	f7ff ff97 	bl	1a000368 <ov7670ReadRegister>
        ov7670WriteRegister(OV7670_DBLV, output & 0x3F); //Bypass the PLL
1a00043a:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00043e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
1a000442:	206b      	movs	r0, #107	; 0x6b
1a000444:	f7ff ff7e 	bl	1a000344 <ov7670WriteRegister>
1a000448:	e7de      	b.n	1a000408 <ov7670ChangeFrameRate+0x3e>

1a00044a <ov7670ChangeResolution>:

//Set resolution
// TODO: Implement manual scaling
void ov7670ChangeResolution(uint8_t resolution)
{
1a00044a:	b500      	push	{lr}
1a00044c:	b083      	sub	sp, #12
	   uint8_t output = 0;
1a00044e:	2300      	movs	r3, #0
1a000450:	f88d 3007 	strb.w	r3, [sp, #7]

	   switch(resolution) {
1a000454:	2802      	cmp	r0, #2
1a000456:	d03c      	beq.n	1a0004d2 <ov7670ChangeResolution+0x88>
1a000458:	2803      	cmp	r0, #3
1a00045a:	d01a      	beq.n	1a000492 <ov7670ChangeResolution+0x48>
1a00045c:	2801      	cmp	r0, #1
1a00045e:	d056      	beq.n	1a00050e <ov7670ChangeResolution+0xc4>
						 ov7670ReadRegister(OV7670_COM7, &output);
						 ov7670WriteRegister(OV7670_COM7, (output & 0xC7) | 0x20);  //Select CIF format
	   	   	   break;

	   	   default:		//VGA
						 ov7670ReadRegister(OV7670_COM3, &output);
1a000460:	f10d 0107 	add.w	r1, sp, #7
1a000464:	200c      	movs	r0, #12
1a000466:	f7ff ff7f 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM3, output & 0xF7);  //Disable format scaling
1a00046a:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00046e:	f001 01f7 	and.w	r1, r1, #247	; 0xf7
1a000472:	200c      	movs	r0, #12
1a000474:	f7ff ff66 	bl	1a000344 <ov7670WriteRegister>

						 ov7670ReadRegister(OV7670_COM7, &output);
1a000478:	f10d 0107 	add.w	r1, sp, #7
1a00047c:	2012      	movs	r0, #18
1a00047e:	f7ff ff73 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, output & 0xC7);  //Do not select a format
1a000482:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000486:	f001 01c7 	and.w	r1, r1, #199	; 0xc7
1a00048a:	2012      	movs	r0, #18
1a00048c:	f7ff ff5a 	bl	1a000344 <ov7670WriteRegister>
	   	   	   break;

	   }

}
1a000490:	e01c      	b.n	1a0004cc <ov7670ChangeResolution+0x82>
	   	   	   ov7670ReadRegister(OV7670_COM3, &output);
1a000492:	f10d 0107 	add.w	r1, sp, #7
1a000496:	200c      	movs	r0, #12
1a000498:	f7ff ff66 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM3, output | 0x08);  //Enable format scaling
1a00049c:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0004a0:	f041 0108 	orr.w	r1, r1, #8
1a0004a4:	200c      	movs	r0, #12
1a0004a6:	f7ff ff4d 	bl	1a000344 <ov7670WriteRegister>
						 ov7670ReadRegister(OV7670_COM7, &output);
1a0004aa:	f10d 0107 	add.w	r1, sp, #7
1a0004ae:	2012      	movs	r0, #18
1a0004b0:	f7ff ff5a 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, (output & 0xC7) | 0x08);  //Select QCIF format
1a0004b4:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0004b8:	f021 0138 	bic.w	r1, r1, #56	; 0x38
1a0004bc:	b249      	sxtb	r1, r1
1a0004be:	f041 0108 	orr.w	r1, r1, #8
1a0004c2:	f001 01cf 	and.w	r1, r1, #207	; 0xcf
1a0004c6:	2012      	movs	r0, #18
1a0004c8:	f7ff ff3c 	bl	1a000344 <ov7670WriteRegister>
}
1a0004cc:	b003      	add	sp, #12
1a0004ce:	f85d fb04 	ldr.w	pc, [sp], #4
						 ov7670ReadRegister(OV7670_COM3, &output);
1a0004d2:	f10d 0107 	add.w	r1, sp, #7
1a0004d6:	200c      	movs	r0, #12
1a0004d8:	f7ff ff46 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM3, output | 0x08);  //Enable format scaling
1a0004dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0004e0:	f041 0108 	orr.w	r1, r1, #8
1a0004e4:	200c      	movs	r0, #12
1a0004e6:	f7ff ff2d 	bl	1a000344 <ov7670WriteRegister>
						 ov7670ReadRegister(OV7670_COM7, &output);
1a0004ea:	f10d 0107 	add.w	r1, sp, #7
1a0004ee:	2012      	movs	r0, #18
1a0004f0:	f7ff ff3a 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, (output & 0xC7) | 0x10);  //Select QVGA format
1a0004f4:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0004f8:	f021 0138 	bic.w	r1, r1, #56	; 0x38
1a0004fc:	b249      	sxtb	r1, r1
1a0004fe:	f041 0110 	orr.w	r1, r1, #16
1a000502:	f001 01d7 	and.w	r1, r1, #215	; 0xd7
1a000506:	2012      	movs	r0, #18
1a000508:	f7ff ff1c 	bl	1a000344 <ov7670WriteRegister>
	   	   	   break;
1a00050c:	e7de      	b.n	1a0004cc <ov7670ChangeResolution+0x82>
						 ov7670ReadRegister(OV7670_COM3, &output);
1a00050e:	f10d 0107 	add.w	r1, sp, #7
1a000512:	200c      	movs	r0, #12
1a000514:	f7ff ff28 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM3, output | 0x08);  //Enable format scaling
1a000518:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00051c:	f041 0108 	orr.w	r1, r1, #8
1a000520:	200c      	movs	r0, #12
1a000522:	f7ff ff0f 	bl	1a000344 <ov7670WriteRegister>
						 ov7670ReadRegister(OV7670_COM7, &output);
1a000526:	f10d 0107 	add.w	r1, sp, #7
1a00052a:	2012      	movs	r0, #18
1a00052c:	f7ff ff1c 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, (output & 0xC7) | 0x20);  //Select CIF format
1a000530:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000534:	f021 0138 	bic.w	r1, r1, #56	; 0x38
1a000538:	b249      	sxtb	r1, r1
1a00053a:	f041 0120 	orr.w	r1, r1, #32
1a00053e:	f001 01e7 	and.w	r1, r1, #231	; 0xe7
1a000542:	2012      	movs	r0, #18
1a000544:	f7ff fefe 	bl	1a000344 <ov7670WriteRegister>
	   	   	   break;
1a000548:	e7c0      	b.n	1a0004cc <ov7670ChangeResolution+0x82>

1a00054a <ov7670ChangeColorMode>:

//Set color mode
void ov7670ChangeColorMode(uint8_t color)
{
1a00054a:	b500      	push	{lr}
1a00054c:	b083      	sub	sp, #12
	   uint8_t output = 0;
1a00054e:	2300      	movs	r3, #0
1a000550:	f88d 3007 	strb.w	r3, [sp, #7]

	   switch(color) {
1a000554:	280a      	cmp	r0, #10
1a000556:	f200 8130 	bhi.w	1a0007ba <ov7670ChangeColorMode+0x270>
1a00055a:	e8df f010 	tbh	[pc, r0, lsl #1]
1a00055e:	000b      	.short	0x000b
1a000560:	00430028 	.word	0x00430028
1a000564:	0077005e 	.word	0x0077005e
1a000568:	00a90090 	.word	0x00a90090
1a00056c:	00db00c2 	.word	0x00db00c2
1a000570:	011100f6 	.word	0x011100f6

	   	   case OV7670_COLOR_RAWRGB_BLUE: //Raw Bayer Blue (8-bit)

	   	   	   ov7670ReadRegister(OV7670_COM7, &output);
1a000574:	f10d 0107 	add.w	r1, sp, #7
1a000578:	2012      	movs	r0, #18
1a00057a:	f7ff fef5 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, (output & 0xFB)  | 0x01);  //Set Raw RGB
1a00057e:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000582:	f021 0105 	bic.w	r1, r1, #5
1a000586:	f041 0101 	orr.w	r1, r1, #1
1a00058a:	2012      	movs	r0, #18
1a00058c:	f7ff feda 	bl	1a000344 <ov7670WriteRegister>

						 ov7670ReadRegister(OV7670_COM15, &output);
1a000590:	f10d 0107 	add.w	r1, sp, #7
1a000594:	2040      	movs	r0, #64	; 0x40
1a000596:	f7ff fee7 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM15, output & 0xEF);  				//Set Raw RGB
1a00059a:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00059e:	f001 01ef 	and.w	r1, r1, #239	; 0xef
1a0005a2:	2040      	movs	r0, #64	; 0x40
1a0005a4:	f7ff fece 	bl	1a000344 <ov7670WriteRegister>

	   	   	   break;

	   }

}
1a0005a8:	b003      	add	sp, #12
1a0005aa:	f85d fb04 	ldr.w	pc, [sp], #4
						 ov7670ReadRegister(OV7670_COM7, &output);
1a0005ae:	f10d 0107 	add.w	r1, sp, #7
1a0005b2:	2012      	movs	r0, #18
1a0005b4:	f7ff fed8 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, (output & 0xFB)  | 0x01);  //Set Raw RGB
1a0005b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0005bc:	f021 0105 	bic.w	r1, r1, #5
1a0005c0:	f041 0101 	orr.w	r1, r1, #1
1a0005c4:	2012      	movs	r0, #18
1a0005c6:	f7ff febd 	bl	1a000344 <ov7670WriteRegister>
						 ov7670ReadRegister(OV7670_COM15, &output);
1a0005ca:	f10d 0107 	add.w	r1, sp, #7
1a0005ce:	2040      	movs	r0, #64	; 0x40
1a0005d0:	f7ff feca 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM15, output & 0xEF);  				//Set Raw RGB
1a0005d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0005d8:	f001 01ef 	and.w	r1, r1, #239	; 0xef
1a0005dc:	2040      	movs	r0, #64	; 0x40
1a0005de:	f7ff feb1 	bl	1a000344 <ov7670WriteRegister>
	   	   	   break;
1a0005e2:	e7e1      	b.n	1a0005a8 <ov7670ChangeColorMode+0x5e>
						 ov7670ReadRegister(OV7670_COM7, &output);
1a0005e4:	f10d 0107 	add.w	r1, sp, #7
1a0005e8:	2012      	movs	r0, #18
1a0005ea:	f7ff febd 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, (output & 0xFB)  | 0x01);  //Set Raw RGB
1a0005ee:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0005f2:	f021 0105 	bic.w	r1, r1, #5
1a0005f6:	f041 0101 	orr.w	r1, r1, #1
1a0005fa:	2012      	movs	r0, #18
1a0005fc:	f7ff fea2 	bl	1a000344 <ov7670WriteRegister>
						 ov7670ReadRegister(OV7670_COM15, &output);
1a000600:	f10d 0107 	add.w	r1, sp, #7
1a000604:	2040      	movs	r0, #64	; 0x40
1a000606:	f7ff feaf 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM15, output & 0xEF);  				//Set Raw RGB
1a00060a:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00060e:	f001 01ef 	and.w	r1, r1, #239	; 0xef
1a000612:	2040      	movs	r0, #64	; 0x40
1a000614:	f7ff fe96 	bl	1a000344 <ov7670WriteRegister>
	   	   	   break;
1a000618:	e7c6      	b.n	1a0005a8 <ov7670ChangeColorMode+0x5e>
						 ov7670ReadRegister(OV7670_COM7, &output);
1a00061a:	f10d 0107 	add.w	r1, sp, #7
1a00061e:	2012      	movs	r0, #18
1a000620:	f7ff fea2 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, output | 0x05);  //Set Proccesed Bayer RGB
1a000624:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000628:	f041 0105 	orr.w	r1, r1, #5
1a00062c:	2012      	movs	r0, #18
1a00062e:	f7ff fe89 	bl	1a000344 <ov7670WriteRegister>
						 ov7670ReadRegister(OV7670_COM15, &output);
1a000632:	f10d 0107 	add.w	r1, sp, #7
1a000636:	2040      	movs	r0, #64	; 0x40
1a000638:	f7ff fe96 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM15, output & 0xEF); //Set Proccesed Bayer RGB
1a00063c:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000640:	f001 01ef 	and.w	r1, r1, #239	; 0xef
1a000644:	2040      	movs	r0, #64	; 0x40
1a000646:	f7ff fe7d 	bl	1a000344 <ov7670WriteRegister>
	   	   	   break;
1a00064a:	e7ad      	b.n	1a0005a8 <ov7670ChangeColorMode+0x5e>
						 ov7670ReadRegister(OV7670_COM7, &output);
1a00064c:	f10d 0107 	add.w	r1, sp, #7
1a000650:	2012      	movs	r0, #18
1a000652:	f7ff fe89 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, output | 0x05);  //Set Proccesed Bayer RGB
1a000656:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00065a:	f041 0105 	orr.w	r1, r1, #5
1a00065e:	2012      	movs	r0, #18
1a000660:	f7ff fe70 	bl	1a000344 <ov7670WriteRegister>
						 ov7670ReadRegister(OV7670_COM15, &output);
1a000664:	f10d 0107 	add.w	r1, sp, #7
1a000668:	2040      	movs	r0, #64	; 0x40
1a00066a:	f7ff fe7d 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM15, output & 0xEF); //Set Proccesed Bayer RGB
1a00066e:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000672:	f001 01ef 	and.w	r1, r1, #239	; 0xef
1a000676:	2040      	movs	r0, #64	; 0x40
1a000678:	f7ff fe64 	bl	1a000344 <ov7670WriteRegister>
	   	   	   break;
1a00067c:	e794      	b.n	1a0005a8 <ov7670ChangeColorMode+0x5e>
						 ov7670ReadRegister(OV7670_COM7, &output);
1a00067e:	f10d 0107 	add.w	r1, sp, #7
1a000682:	2012      	movs	r0, #18
1a000684:	f7ff fe70 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, output | 0x05);  //Set Proccesed Bayer RGB
1a000688:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00068c:	f041 0105 	orr.w	r1, r1, #5
1a000690:	2012      	movs	r0, #18
1a000692:	f7ff fe57 	bl	1a000344 <ov7670WriteRegister>
						 ov7670ReadRegister(OV7670_COM15, &output);
1a000696:	f10d 0107 	add.w	r1, sp, #7
1a00069a:	2040      	movs	r0, #64	; 0x40
1a00069c:	f7ff fe64 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM15, output & 0xEF); //Set Proccesed Bayer RGB
1a0006a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0006a4:	f001 01ef 	and.w	r1, r1, #239	; 0xef
1a0006a8:	2040      	movs	r0, #64	; 0x40
1a0006aa:	f7ff fe4b 	bl	1a000344 <ov7670WriteRegister>
	   	   	   break;
1a0006ae:	e77b      	b.n	1a0005a8 <ov7670ChangeColorMode+0x5e>
						 ov7670ReadRegister(OV7670_COM7, &output);
1a0006b0:	f10d 0107 	add.w	r1, sp, #7
1a0006b4:	2012      	movs	r0, #18
1a0006b6:	f7ff fe57 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, output & 0xFA);  		//Set YUV color model
1a0006ba:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0006be:	f001 01fa 	and.w	r1, r1, #250	; 0xfa
1a0006c2:	2012      	movs	r0, #18
1a0006c4:	f7ff fe3e 	bl	1a000344 <ov7670WriteRegister>
						 ov7670ReadRegister(OV7670_COM15, &output);
1a0006c8:	f10d 0107 	add.w	r1, sp, #7
1a0006cc:	2040      	movs	r0, #64	; 0x40
1a0006ce:	f7ff fe4b 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM15, output & 0xEF);  //Set YUV color model
1a0006d2:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0006d6:	f001 01ef 	and.w	r1, r1, #239	; 0xef
1a0006da:	2040      	movs	r0, #64	; 0x40
1a0006dc:	f7ff fe32 	bl	1a000344 <ov7670WriteRegister>
	   	   	   break;
1a0006e0:	e762      	b.n	1a0005a8 <ov7670ChangeColorMode+0x5e>
						 ov7670ReadRegister(OV7670_COM7, &output);
1a0006e2:	f10d 0107 	add.w	r1, sp, #7
1a0006e6:	2012      	movs	r0, #18
1a0006e8:	f7ff fe3e 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, output & 0xFA);  		//Set YUV color model
1a0006ec:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0006f0:	f001 01fa 	and.w	r1, r1, #250	; 0xfa
1a0006f4:	2012      	movs	r0, #18
1a0006f6:	f7ff fe25 	bl	1a000344 <ov7670WriteRegister>
						 ov7670ReadRegister(OV7670_COM15, &output);
1a0006fa:	f10d 0107 	add.w	r1, sp, #7
1a0006fe:	2040      	movs	r0, #64	; 0x40
1a000700:	f7ff fe32 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM15, output & 0xEF);  //Set YUV color model
1a000704:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000708:	f001 01ef 	and.w	r1, r1, #239	; 0xef
1a00070c:	2040      	movs	r0, #64	; 0x40
1a00070e:	f7ff fe19 	bl	1a000344 <ov7670WriteRegister>
	   	   	   break;
1a000712:	e749      	b.n	1a0005a8 <ov7670ChangeColorMode+0x5e>
						 ov7670ReadRegister(OV7670_COM7, &output);
1a000714:	f10d 0107 	add.w	r1, sp, #7
1a000718:	2012      	movs	r0, #18
1a00071a:	f7ff fe25 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, (output & 0xFE)  | 0x04);  //Set GRB
1a00071e:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000722:	f021 0105 	bic.w	r1, r1, #5
1a000726:	f041 0104 	orr.w	r1, r1, #4
1a00072a:	2012      	movs	r0, #18
1a00072c:	f7ff fe0a 	bl	1a000344 <ov7670WriteRegister>
						 ov7670ReadRegister(OV7670_COM15, &output);
1a000730:	f10d 0107 	add.w	r1, sp, #7
1a000734:	2040      	movs	r0, #64	; 0x40
1a000736:	f7ff fe17 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM15, output & 0xEF);  				//Set GRB
1a00073a:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00073e:	f001 01ef 	and.w	r1, r1, #239	; 0xef
1a000742:	2040      	movs	r0, #64	; 0x40
1a000744:	f7ff fdfe 	bl	1a000344 <ov7670WriteRegister>
	   	   	   break;
1a000748:	e72e      	b.n	1a0005a8 <ov7670ChangeColorMode+0x5e>
						 ov7670ReadRegister(OV7670_COM7, &output);
1a00074a:	f10d 0107 	add.w	r1, sp, #7
1a00074e:	2012      	movs	r0, #18
1a000750:	f7ff fe0a 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, (output & 0xFE)  | 0x04);  //Set GRB
1a000754:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000758:	f021 0105 	bic.w	r1, r1, #5
1a00075c:	f041 0104 	orr.w	r1, r1, #4
1a000760:	2012      	movs	r0, #18
1a000762:	f7ff fdef 	bl	1a000344 <ov7670WriteRegister>
						 ov7670ReadRegister(OV7670_COM15, &output);
1a000766:	f10d 0107 	add.w	r1, sp, #7
1a00076a:	2040      	movs	r0, #64	; 0x40
1a00076c:	f7ff fdfc 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM15, output & 0xEF);  				//Set GRB
1a000770:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a000774:	f001 01ef 	and.w	r1, r1, #239	; 0xef
1a000778:	2040      	movs	r0, #64	; 0x40
1a00077a:	f7ff fde3 	bl	1a000344 <ov7670WriteRegister>
	   	   	   break;
1a00077e:	e713      	b.n	1a0005a8 <ov7670ChangeColorMode+0x5e>
						 ov7670ReadRegister(OV7670_COM7, &output);
1a000780:	f10d 0107 	add.w	r1, sp, #7
1a000784:	2012      	movs	r0, #18
1a000786:	f7ff fdef 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, (output & 0xFE)  | 0x04);  //Set RGB
1a00078a:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a00078e:	f021 0105 	bic.w	r1, r1, #5
1a000792:	f041 0104 	orr.w	r1, r1, #4
1a000796:	2012      	movs	r0, #18
1a000798:	f7ff fdd4 	bl	1a000344 <ov7670WriteRegister>
						 ov7670ReadRegister(OV7670_COM15, &output);
1a00079c:	f10d 0107 	add.w	r1, sp, #7
1a0007a0:	2040      	movs	r0, #64	; 0x40
1a0007a2:	f7ff fde1 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM15, (output & 0xDF)  | 0x10);  	//Set RGB565
1a0007a6:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0007aa:	f021 0130 	bic.w	r1, r1, #48	; 0x30
1a0007ae:	f041 0110 	orr.w	r1, r1, #16
1a0007b2:	2040      	movs	r0, #64	; 0x40
1a0007b4:	f7ff fdc6 	bl	1a000344 <ov7670WriteRegister>
	   	   	   break;
1a0007b8:	e6f6      	b.n	1a0005a8 <ov7670ChangeColorMode+0x5e>
						 ov7670ReadRegister(OV7670_COM7, &output);
1a0007ba:	f10d 0107 	add.w	r1, sp, #7
1a0007be:	2012      	movs	r0, #18
1a0007c0:	f7ff fdd2 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM7, (output & 0xFE)  | 0x04);  //Set RGB
1a0007c4:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0007c8:	f021 0105 	bic.w	r1, r1, #5
1a0007cc:	f041 0104 	orr.w	r1, r1, #4
1a0007d0:	2012      	movs	r0, #18
1a0007d2:	f7ff fdb7 	bl	1a000344 <ov7670WriteRegister>
						 ov7670ReadRegister(OV7670_COM15, &output);
1a0007d6:	f10d 0107 	add.w	r1, sp, #7
1a0007da:	2040      	movs	r0, #64	; 0x40
1a0007dc:	f7ff fdc4 	bl	1a000368 <ov7670ReadRegister>
						 ov7670WriteRegister(OV7670_COM15, output | 0x30);  	//Set RGB565
1a0007e0:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0007e4:	f041 0130 	orr.w	r1, r1, #48	; 0x30
1a0007e8:	2040      	movs	r0, #64	; 0x40
1a0007ea:	f7ff fdab 	bl	1a000344 <ov7670WriteRegister>
}
1a0007ee:	e6db      	b.n	1a0005a8 <ov7670ChangeColorMode+0x5e>

1a0007f0 <ov7670Init>:
{
1a0007f0:	b530      	push	{r4, r5, lr}
1a0007f2:	b083      	sub	sp, #12
    int8_t status = 0;
1a0007f4:	2400      	movs	r4, #0
1a0007f6:	f88d 4007 	strb.w	r4, [sp, #7]
    uint8_t output = 0;
1a0007fa:	ad02      	add	r5, sp, #8
1a0007fc:	f805 4d02 	strb.w	r4, [r5, #-2]!
    Chip_Clock_SetBaseClock(CLK_BASE_OUT, CLKIN_IRC, TRUE, FALSE);
1a000800:	4623      	mov	r3, r4
1a000802:	2201      	movs	r2, #1
1a000804:	4611      	mov	r1, r2
1a000806:	2014      	movs	r0, #20
1a000808:	f000 fef6 	bl	1a0015f8 <Chip_Clock_SetBaseClock>
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00080c:	4b3c      	ldr	r3, [pc, #240]	; (1a000900 <ov7670Init+0x110>)
1a00080e:	22f4      	movs	r2, #244	; 0xf4
1a000810:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		gpioInit( OV7670_PIN_RESET, GPIO_OUTPUT );
1a000814:	2101      	movs	r1, #1
1a000816:	200c      	movs	r0, #12
1a000818:	f001 fb88 	bl	1a001f2c <gpioInit>
		gpioInit( OV7670_PIN_VS, GPIO_INPUT );
1a00081c:	4621      	mov	r1, r4
1a00081e:	200e      	movs	r0, #14
1a000820:	f001 fb84 	bl	1a001f2c <gpioInit>
		gpioInit( OV7670_PIN_HS, GPIO_INPUT );
1a000824:	4621      	mov	r1, r4
1a000826:	200f      	movs	r0, #15
1a000828:	f001 fb80 	bl	1a001f2c <gpioInit>
		gpioInit( OV7670_PIN_PCLK, GPIO_INPUT );
1a00082c:	4621      	mov	r1, r4
1a00082e:	200d      	movs	r0, #13
1a000830:	f001 fb7c 	bl	1a001f2c <gpioInit>
		gpioInit( OV7670_PIN_D7, GPIO_INPUT );
1a000834:	4621      	mov	r1, r4
1a000836:	200b      	movs	r0, #11
1a000838:	f001 fb78 	bl	1a001f2c <gpioInit>
		gpioInit( OV7670_PIN_D6, GPIO_INPUT );
1a00083c:	4621      	mov	r1, r4
1a00083e:	2012      	movs	r0, #18
1a000840:	f001 fb74 	bl	1a001f2c <gpioInit>
		gpioInit( OV7670_PIN_D5, GPIO_INPUT );
1a000844:	4621      	mov	r1, r4
1a000846:	2011      	movs	r0, #17
1a000848:	f001 fb70 	bl	1a001f2c <gpioInit>
		gpioInit( OV7670_PIN_D4, GPIO_INPUT );
1a00084c:	4621      	mov	r1, r4
1a00084e:	2010      	movs	r0, #16
1a000850:	f001 fb6c 	bl	1a001f2c <gpioInit>
		gpioInit( OV7670_PIN_D3, GPIO_INPUT );
1a000854:	4621      	mov	r1, r4
1a000856:	2004      	movs	r0, #4
1a000858:	f001 fb68 	bl	1a001f2c <gpioInit>
		gpioInit( OV7670_PIN_D2, GPIO_INPUT );
1a00085c:	4621      	mov	r1, r4
1a00085e:	2003      	movs	r0, #3
1a000860:	f001 fb64 	bl	1a001f2c <gpioInit>
		gpioInit( OV7670_PIN_D1, GPIO_INPUT );
1a000864:	4621      	mov	r1, r4
1a000866:	4620      	mov	r0, r4
1a000868:	f001 fb60 	bl	1a001f2c <gpioInit>
		gpioInit( OV7670_PIN_D0, GPIO_INPUT );
1a00086c:	4621      	mov	r1, r4
1a00086e:	2005      	movs	r0, #5
1a000870:	f001 fb5c 	bl	1a001f2c <gpioInit>
		gpioInit( LCD4, GPIO_OUTPUT );
1a000874:	2101      	movs	r1, #1
1a000876:	2014      	movs	r0, #20
1a000878:	f001 fb58 	bl	1a001f2c <gpioInit>
		gpioWrite( LCD4, OFF );
1a00087c:	4621      	mov	r1, r4
1a00087e:	2014      	movs	r0, #20
1a000880:	f001 fc1e 	bl	1a0020c0 <gpioWrite>
		ov7670I2cInit();
1a000884:	f7ff fd56 	bl	1a000334 <ov7670I2cInit>
		ov7670ResetCamera();
1a000888:	f7ff fd3a 	bl	1a000300 <ov7670ResetCamera>
	  status = 	ov7670ReadRegister(OV7670_PID, &output);
1a00088c:	4629      	mov	r1, r5
1a00088e:	200a      	movs	r0, #10
1a000890:	f7ff fd6a 	bl	1a000368 <ov7670ReadRegister>
1a000894:	f88d 0007 	strb.w	r0, [sp, #7]
		if (output != 0x76) // The Camera PID
1a000898:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a00089c:	2b76      	cmp	r3, #118	; 0x76
1a00089e:	d128      	bne.n	1a0008f2 <ov7670Init+0x102>
		ov7670ResetCamera();
1a0008a0:	f7ff fd2e 	bl	1a000300 <ov7670ResetCamera>
    ov7670ReadRegister(OV7670_COM10, &status);
1a0008a4:	f10d 0107 	add.w	r1, sp, #7
1a0008a8:	2015      	movs	r0, #21
1a0008aa:	f7ff fd5d 	bl	1a000368 <ov7670ReadRegister>
    ov7670WriteRegister(OV7670_COM10, status | 0x20);
1a0008ae:	f89d 1007 	ldrb.w	r1, [sp, #7]
1a0008b2:	f041 0120 	orr.w	r1, r1, #32
1a0008b6:	2015      	movs	r0, #21
1a0008b8:	f7ff fd44 	bl	1a000344 <ov7670WriteRegister>
		ov7670ChangeFrameRate(OV7670_SLOW);
1a0008bc:	2001      	movs	r0, #1
1a0008be:	f7ff fd84 	bl	1a0003ca <ov7670ChangeFrameRate>
		ov7670ChangeResolution(OV7670_QCIF);
1a0008c2:	2003      	movs	r0, #3
1a0008c4:	f7ff fdc1 	bl	1a00044a <ov7670ChangeResolution>
		ov7670ChangeColorMode(OV7670_RGB555);
1a0008c8:	200b      	movs	r0, #11
1a0008ca:	f7ff fe3e 	bl	1a00054a <ov7670ChangeColorMode>
	  status = 	ov7670ReadRegister(OV7670_PID, &output);
1a0008ce:	f10d 0106 	add.w	r1, sp, #6
1a0008d2:	200a      	movs	r0, #10
1a0008d4:	f7ff fd48 	bl	1a000368 <ov7670ReadRegister>
1a0008d8:	f88d 0007 	strb.w	r0, [sp, #7]
		if (output != 0x76) // The Camera PID
1a0008dc:	f89d 3006 	ldrb.w	r3, [sp, #6]
1a0008e0:	2b76      	cmp	r3, #118	; 0x76
1a0008e2:	d109      	bne.n	1a0008f8 <ov7670Init+0x108>
    delay(100);
1a0008e4:	2064      	movs	r0, #100	; 0x64
1a0008e6:	2100      	movs	r1, #0
1a0008e8:	f001 fcc8 	bl	1a00227c <delay>
		return 1;
1a0008ec:	2001      	movs	r0, #1
}
1a0008ee:	b003      	add	sp, #12
1a0008f0:	bd30      	pop	{r4, r5, pc}
			return -1;
1a0008f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0008f6:	e7fa      	b.n	1a0008ee <ov7670Init+0xfe>
			return -1;
1a0008f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0008fc:	e7f7      	b.n	1a0008ee <ov7670Init+0xfe>
1a0008fe:	bf00      	nop
1a000900:	40086000 	.word	0x40086000

1a000904 <ov7670TakePhoto>:

// Take a photo
void ov7670TakePhoto(uint8_t lineStart, uint8_t lineEnd, uint8_t evenLine, uint8_t* output, uint16_t* bytePerLine)
{
1a000904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000908:	b085      	sub	sp, #20
1a00090a:	4607      	mov	r7, r0
1a00090c:	468b      	mov	fp, r1
1a00090e:	4692      	mov	sl, r2
1a000910:	9301      	str	r3, [sp, #4]
 * GPIO read and write functions. A low state indicates the pin is settable
 * and readable via the masked write and read functions.
 */
STATIC INLINE void Chip_GPIO_SetPortMask(LPC_GPIO_T *pGPIO, uint8_t port, uint32_t mask)
{
	pGPIO->MASK[port] = mask;
1a000912:	4a52      	ldr	r2, [pc, #328]	; (1a000a5c <ov7670TakePhoto+0x158>)
1a000914:	f242 0388 	movw	r3, #8328	; 0x2088
1a000918:	2180      	movs	r1, #128	; 0x80
1a00091a:	50d1      	str	r1, [r2, r3]
     int8_t riseEdgeVS = -1;
     int8_t riseEdgeHS = -1;
     int8_t riseEdgePCLK = -1;

		 // Signal prevoius state
     uint8_t HSPrev = 0;
1a00091c:	2300      	movs	r3, #0
1a00091e:	f88d 300f 	strb.w	r3, [sp, #15]
     uint8_t PCLKPrev = 0;
1a000922:	f88d 300e 	strb.w	r3, [sp, #14]
     uint8_t VSPrev = gpioRead(OV7670_PIN_VS);
1a000926:	200e      	movs	r0, #14
1a000928:	f001 fbf5 	bl	1a002116 <gpioRead>
1a00092c:	f88d 000d 	strb.w	r0, [sp, #13]
     int8_t riseEdgeVS = -1;
1a000930:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

		 // Wait for a rising edge in VS to sycnronize
     while(riseEdgeVS != 1) {
1a000934:	e004      	b.n	1a000940 <ov7670TakePhoto+0x3c>
       riseEdgeVS = ov7670EdgeDetect(OV7670_PIN_VS, &VSPrev);
1a000936:	f10d 010d 	add.w	r1, sp, #13
1a00093a:	200e      	movs	r0, #14
1a00093c:	f7ff fd38 	bl	1a0003b0 <ov7670EdgeDetect>
     while(riseEdgeVS != 1) {
1a000940:	2801      	cmp	r0, #1
1a000942:	d1f8      	bne.n	1a000936 <ov7670TakePhoto+0x32>
     }

     VSPrev = gpioRead(OV7670_PIN_VS);
1a000944:	200e      	movs	r0, #14
1a000946:	f001 fbe6 	bl	1a002116 <gpioRead>
1a00094a:	f88d 000d 	strb.w	r0, [sp, #13]
     int8_t fallEdgeVS = -1;
1a00094e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     riseEdgeVS = -1;

		 // Wait for a fall edge in VS to start the image scanning
     while(fallEdgeVS != 0) {
1a000952:	e004      	b.n	1a00095e <ov7670TakePhoto+0x5a>
       fallEdgeVS = ov7670EdgeDetect(OV7670_PIN_VS, &VSPrev);
1a000954:	f10d 010d 	add.w	r1, sp, #13
1a000958:	200e      	movs	r0, #14
1a00095a:	f7ff fd29 	bl	1a0003b0 <ov7670EdgeDetect>
     while(fallEdgeVS != 0) {
1a00095e:	2800      	cmp	r0, #0
1a000960:	d1f8      	bne.n	1a000954 <ov7670TakePhoto+0x50>
     }

     fallEdgeVS = -1;

     HSPrev = gpioRead(OV7670_PIN_HS);
1a000962:	200f      	movs	r0, #15
1a000964:	f001 fbd7 	bl	1a002116 <gpioRead>
1a000968:	f88d 000f 	strb.w	r0, [sp, #15]
     VSPrev = gpioRead(OV7670_PIN_VS);
1a00096c:	200e      	movs	r0, #14
1a00096e:	f001 fbd2 	bl	1a002116 <gpioRead>
1a000972:	f88d 000d 	strb.w	r0, [sp, #13]
     riseEdgeVS = -1;
1a000976:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     uint8_t even = 1;								// Detect if the byte is even or odd
1a00097a:	f04f 0801 	mov.w	r8, #1
     uint32_t line_count = 0;	  			// line counter
1a00097e:	2500      	movs	r5, #0
		 uint32_t buffer_count = 0;   		// Buffer counter
1a000980:	46a9      	mov	r9, r5

		 // A rise edge in VS means the end of the image
     while(riseEdgeVS != 1) {
1a000982:	e04e      	b.n	1a000a22 <ov7670TakePhoto+0x11e>
                   even = 0;
                 }

               } else { // If we set to save even bytes number

                 if (even == 1) {  	// If the bytes number is even
1a000984:	f1b8 0f01 	cmp.w	r8, #1
1a000988:	d02a      	beq.n	1a0009e0 <ov7670TakePhoto+0xdc>
                   pixel_line_count = pixel_line_count + 1;
                   even = 0;

                 } else
                 {
                   even = 1;
1a00098a:	46a0      	mov	r8, r4

               riseEdgePCLK = -1;

             }

             HSPrev = gpioRead(OV7670_PIN_HS);
1a00098c:	200f      	movs	r0, #15
1a00098e:	f001 fbc2 	bl	1a002116 <gpioRead>
1a000992:	f88d 000f 	strb.w	r0, [sp, #15]
           while(HSPrev == 1){
1a000996:	f89d 400f 	ldrb.w	r4, [sp, #15]
1a00099a:	2c01      	cmp	r4, #1
1a00099c:	d137      	bne.n	1a000a0e <ov7670TakePhoto+0x10a>
             riseEdgePCLK = ov7670EdgeDetect(OV7670_PIN_PCLK, &PCLKPrev);
1a00099e:	f10d 010e 	add.w	r1, sp, #14
1a0009a2:	200d      	movs	r0, #13
1a0009a4:	f7ff fd04 	bl	1a0003b0 <ov7670EdgeDetect>
             if(riseEdgePCLK == 1){
1a0009a8:	2801      	cmp	r0, #1
1a0009aa:	d1ef      	bne.n	1a00098c <ov7670TakePhoto+0x88>
               if (evenLine == FALSE) {  // If we set to save odd bytes number
1a0009ac:	f1ba 0f00 	cmp.w	sl, #0
1a0009b0:	d1e8      	bne.n	1a000984 <ov7670TakePhoto+0x80>
                 if (even == 0) {		// If the bytes number is odd
1a0009b2:	f1b8 0f00 	cmp.w	r8, #0
1a0009b6:	d128      	bne.n	1a000a0a <ov7670TakePhoto+0x106>
 * @param	port	: GPIO Port number where @a pin is located
 * @return	Current (masked) state of all GPIO pins
 */
STATIC INLINE uint32_t Chip_GPIO_GetMaskedPortValue(LPC_GPIO_T *pGPIO, uint8_t port)
{
	return pGPIO->MPIN[port];
1a0009b8:	4a28      	ldr	r2, [pc, #160]	; (1a000a5c <ov7670TakePhoto+0x158>)
1a0009ba:	f242 1388 	movw	r3, #8584	; 0x2188
1a0009be:	58d3      	ldr	r3, [r2, r3]
                   d7_d0[0] = Chip_GPIO_GetMaskedPortValue(LPC_GPIO_PORT, 2);
1a0009c0:	b2db      	uxtb	r3, r3
                   d7_d0[1] = (LPC_GPIO_PORT->W[2][8]) & 0x80;                 // We read the GPIO port
1a0009c2:	f502 5289 	add.w	r2, r2, #4384	; 0x1120
1a0009c6:	6812      	ldr	r2, [r2, #0]
1a0009c8:	f002 0280 	and.w	r2, r2, #128	; 0x80
                   output[buffer_count] = d7_d0[0] | d7_d0[1];								 // And save it in the output
1a0009cc:	4313      	orrs	r3, r2
1a0009ce:	9a01      	ldr	r2, [sp, #4]
1a0009d0:	f802 3009 	strb.w	r3, [r2, r9]
                   buffer_count = buffer_count + 1;
1a0009d4:	f109 0901 	add.w	r9, r9, #1
                   pixel_line_count = pixel_line_count + 1;
1a0009d8:	3601      	adds	r6, #1
1a0009da:	b2b6      	uxth	r6, r6
                   even = 1;
1a0009dc:	46a0      	mov	r8, r4
1a0009de:	e7d5      	b.n	1a00098c <ov7670TakePhoto+0x88>
1a0009e0:	4a1e      	ldr	r2, [pc, #120]	; (1a000a5c <ov7670TakePhoto+0x158>)
1a0009e2:	f242 1388 	movw	r3, #8584	; 0x2188
1a0009e6:	58d3      	ldr	r3, [r2, r3]
                   d7_d0[0] = Chip_GPIO_GetMaskedPortValue(LPC_GPIO_PORT, 2);  // We read the GPIO port
1a0009e8:	b2db      	uxtb	r3, r3
                   d7_d0[1] = (LPC_GPIO_PORT->W[2][8]) & 0x80;
1a0009ea:	f502 5289 	add.w	r2, r2, #4384	; 0x1120
1a0009ee:	6812      	ldr	r2, [r2, #0]
1a0009f0:	f002 0280 	and.w	r2, r2, #128	; 0x80
                   output[buffer_count] = d7_d0[0] | d7_d0[1];                 // And save it in the output
1a0009f4:	4313      	orrs	r3, r2
1a0009f6:	9a01      	ldr	r2, [sp, #4]
1a0009f8:	f802 3009 	strb.w	r3, [r2, r9]
                   buffer_count = buffer_count + 1;
1a0009fc:	f109 0901 	add.w	r9, r9, #1
                   pixel_line_count = pixel_line_count + 1;
1a000a00:	3601      	adds	r6, #1
1a000a02:	b2b6      	uxth	r6, r6
                   even = 0;
1a000a04:	f04f 0800 	mov.w	r8, #0
1a000a08:	e7c0      	b.n	1a00098c <ov7670TakePhoto+0x88>
                   even = 0;
1a000a0a:	46d0      	mov	r8, sl
1a000a0c:	e7be      	b.n	1a00098c <ov7670TakePhoto+0x88>

          }

          bytePerLine[line_count - lineStart] = pixel_line_count;   // Save the number of bytes readed per line (We needed this information if a byte is lost)
1a000a0e:	1beb      	subs	r3, r5, r7
1a000a10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1a000a12:	f822 6013 	strh.w	r6, [r2, r3, lsl #1]
          pixel_line_count = 0;

        }

         line_count = line_count + 1;
1a000a16:	3501      	adds	r5, #1
       }

       riseEdgeVS = ov7670EdgeDetect(OV7670_PIN_VS, &VSPrev);
1a000a18:	f10d 010d 	add.w	r1, sp, #13
1a000a1c:	200e      	movs	r0, #14
1a000a1e:	f7ff fcc7 	bl	1a0003b0 <ov7670EdgeDetect>
     while(riseEdgeVS != 1) {
1a000a22:	2801      	cmp	r0, #1
1a000a24:	d016      	beq.n	1a000a54 <ov7670TakePhoto+0x150>
       riseEdgeHS = ov7670EdgeDetect(OV7670_PIN_HS, &HSPrev);
1a000a26:	f10d 010f 	add.w	r1, sp, #15
1a000a2a:	200f      	movs	r0, #15
1a000a2c:	f7ff fcc0 	bl	1a0003b0 <ov7670EdgeDetect>
       if(riseEdgeHS == 1){
1a000a30:	2801      	cmp	r0, #1
1a000a32:	d1f1      	bne.n	1a000a18 <ov7670TakePhoto+0x114>
         if (line_count >= lineStart) {
1a000a34:	42af      	cmp	r7, r5
1a000a36:	d8ee      	bhi.n	1a000a16 <ov7670TakePhoto+0x112>
           if(line_count == lineEnd) {
1a000a38:	45ab      	cmp	fp, r5
1a000a3a:	d00b      	beq.n	1a000a54 <ov7670TakePhoto+0x150>
           HSPrev = gpioRead(OV7670_PIN_HS);
1a000a3c:	200f      	movs	r0, #15
1a000a3e:	f001 fb6a 	bl	1a002116 <gpioRead>
1a000a42:	f88d 000f 	strb.w	r0, [sp, #15]
           PCLKPrev = gpioRead(OV7670_PIN_PCLK);
1a000a46:	200d      	movs	r0, #13
1a000a48:	f001 fb65 	bl	1a002116 <gpioRead>
1a000a4c:	f88d 000e 	strb.w	r0, [sp, #14]
           while(HSPrev == 1){
1a000a50:	2600      	movs	r6, #0
1a000a52:	e7a0      	b.n	1a000996 <ov7670TakePhoto+0x92>

     }
}
1a000a54:	b005      	add	sp, #20
1a000a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000a5a:	bf00      	nop
1a000a5c:	400f4000 	.word	0x400f4000

1a000a60 <main>:
/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void){
1a000a60:	b530      	push	{r4, r5, lr}
1a000a62:	f5ad 4dc3 	sub.w	sp, sp, #24960	; 0x6180
1a000a66:	b09b      	sub	sp, #108	; 0x6c
   /* ------------- INICIALIZACIONES ------------- */
   int8_t status = -1;   //status para ver el estado del sistema
   uint32_t count = 0;  // Contador para enviar los datos por puerto serie

   // Inicializar la placa
   boardConfig();
1a000a68:	f001 fb8e 	bl	1a002188 <boardInit>

   // Inicializamos la camara
   status = ov7670Init();
1a000a6c:	f7ff fec0 	bl	1a0007f0 <ov7670Init>
1a000a70:	4604      	mov	r4, r0

   printf("Bienvenido al sistema de prueba de la camara OV7670\r\n");
1a000a72:	4840      	ldr	r0, [pc, #256]	; (1a000b74 <main+0x114>)
1a000a74:	f001 fe84 	bl	1a002780 <puts>

   if(status < 0) {
1a000a78:	2c00      	cmp	r4, #0
1a000a7a:	db19      	blt.n	1a000ab0 <main+0x50>
     printf("Error de conexion\r\n");
     printf("Revise el PINOUT\r\n");

   } else {

     printf("OV7670 configurada\n");
1a000a7c:	483e      	ldr	r0, [pc, #248]	; (1a000b78 <main+0x118>)
1a000a7e:	f001 fe7f 	bl	1a002780 <puts>
   }

   // Sacamos una foto (para sacar mas de una foto, resetear el micro, cada vez que se quiere sacar una)

   // Prendemos el LED 1 para indicar al usuario que tiene 10 segundos para preparar la escena
   gpioWrite(LED1, ON);
1a000a82:	2101      	movs	r1, #1
1a000a84:	202b      	movs	r0, #43	; 0x2b
1a000a86:	f001 fb1b 	bl	1a0020c0 <gpioWrite>
   delay(10000);
1a000a8a:	f242 7010 	movw	r0, #10000	; 0x2710
1a000a8e:	2100      	movs	r1, #0
1a000a90:	f001 fbf4 	bl	1a00227c <delay>

   // Al apagarse el LED se idica que se saco la primera foto
   gpioWrite(LED1, OFF);
1a000a94:	2100      	movs	r1, #0
1a000a96:	202b      	movs	r0, #43	; 0x2b
1a000a98:	f001 fb12 	bl	1a0020c0 <gpioWrite>

   // Sacamos la primera foto
   ov7670TakePhoto(0, 144, FALSE, &photo[0], &lines[0]);
1a000a9c:	ab02      	add	r3, sp, #8
1a000a9e:	9300      	str	r3, [sp, #0]
1a000aa0:	ab4a      	add	r3, sp, #296	; 0x128
1a000aa2:	2200      	movs	r2, #0
1a000aa4:	2190      	movs	r1, #144	; 0x90
1a000aa6:	4610      	mov	r0, r2
1a000aa8:	f7ff ff2c 	bl	1a000904 <ov7670TakePhoto>
   uint32_t count = 0;  // Contador para enviar los datos por puerto serie
1a000aac:	2400      	movs	r4, #0

   // Una vez obtenida la foto
   while (count < IMGBYTES) {
1a000aae:	e00e      	b.n	1a000ace <main+0x6e>
     printf("Error de conexion\r\n");
1a000ab0:	4832      	ldr	r0, [pc, #200]	; (1a000b7c <main+0x11c>)
1a000ab2:	f001 fe65 	bl	1a002780 <puts>
     printf("Revise el PINOUT\r\n");
1a000ab6:	4832      	ldr	r0, [pc, #200]	; (1a000b80 <main+0x120>)
1a000ab8:	f001 fe62 	bl	1a002780 <puts>
1a000abc:	e7e1      	b.n	1a000a82 <main+0x22>

        printf("%d,", photo[count]);    //Enviamos por puerto serie la imagen
1a000abe:	ad4a      	add	r5, sp, #296	; 0x128
1a000ac0:	5d29      	ldrb	r1, [r5, r4]
1a000ac2:	4830      	ldr	r0, [pc, #192]	; (1a000b84 <main+0x124>)
1a000ac4:	f001 fde8 	bl	1a002698 <iprintf>
        photo[count] = 0;               //Limpiamos el buffer
1a000ac8:	2300      	movs	r3, #0
1a000aca:	552b      	strb	r3, [r5, r4]
        count = count + 1;
1a000acc:	3401      	adds	r4, #1
   while (count < IMGBYTES) {
1a000ace:	f246 03bf 	movw	r3, #24767	; 0x60bf
1a000ad2:	429c      	cmp	r4, r3
1a000ad4:	d9f3      	bls.n	1a000abe <main+0x5e>

   }

   count = 0;
   printf("\r\n");
1a000ad6:	482c      	ldr	r0, [pc, #176]	; (1a000b88 <main+0x128>)
1a000ad8:	f001 fe52 	bl	1a002780 <puts>
   count = 0;
1a000adc:	2400      	movs	r4, #0

   //Enviamos por el numero de bytes por linea
   while (count < IMGLINES) {
1a000ade:	e009      	b.n	1a000af4 <main+0x94>

        printf("%d,", lines[count]);
1a000ae0:	ad02      	add	r5, sp, #8
1a000ae2:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
1a000ae6:	4827      	ldr	r0, [pc, #156]	; (1a000b84 <main+0x124>)
1a000ae8:	f001 fdd6 	bl	1a002698 <iprintf>
        lines[count] = 0;
1a000aec:	2300      	movs	r3, #0
1a000aee:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
        count = count + 1;
1a000af2:	3401      	adds	r4, #1
   while (count < IMGLINES) {
1a000af4:	2c8f      	cmp	r4, #143	; 0x8f
1a000af6:	d9f3      	bls.n	1a000ae0 <main+0x80>

   }
   printf("\r\n");
1a000af8:	4823      	ldr	r0, [pc, #140]	; (1a000b88 <main+0x128>)
1a000afa:	f001 fe41 	bl	1a002780 <puts>

   // Prendemos el LED 2 para indicar al usuario que viene la segunda foto
   gpioWrite(LED2, ON);
1a000afe:	2101      	movs	r1, #1
1a000b00:	202c      	movs	r0, #44	; 0x2c
1a000b02:	f001 fadd 	bl	1a0020c0 <gpioWrite>
   delay(1000);
1a000b06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000b0a:	2100      	movs	r1, #0
1a000b0c:	f001 fbb6 	bl	1a00227c <delay>

   // Al apagarse el LED se idica que se saco la primera foto
   gpioWrite(LED2, OFF);
1a000b10:	2100      	movs	r1, #0
1a000b12:	202c      	movs	r0, #44	; 0x2c
1a000b14:	f001 fad4 	bl	1a0020c0 <gpioWrite>

   // Sacamos la segunda foto
   ov7670TakePhoto(0, 144, TRUE, &photo[0], &lines[0]);
1a000b18:	ab02      	add	r3, sp, #8
1a000b1a:	9300      	str	r3, [sp, #0]
1a000b1c:	ab4a      	add	r3, sp, #296	; 0x128
1a000b1e:	2201      	movs	r2, #1
1a000b20:	2190      	movs	r1, #144	; 0x90
1a000b22:	2000      	movs	r0, #0
1a000b24:	f7ff feee 	bl	1a000904 <ov7670TakePhoto>

   // Una vez obtenida la foto
   while (count < IMGBYTES) {
1a000b28:	e007      	b.n	1a000b3a <main+0xda>

        printf("%d,", photo[count]);    //Enviamos por puerto serie la imagen
1a000b2a:	ad4a      	add	r5, sp, #296	; 0x128
1a000b2c:	5d29      	ldrb	r1, [r5, r4]
1a000b2e:	4815      	ldr	r0, [pc, #84]	; (1a000b84 <main+0x124>)
1a000b30:	f001 fdb2 	bl	1a002698 <iprintf>
        photo[count] = 0;               //Limpiamos el buffer
1a000b34:	2300      	movs	r3, #0
1a000b36:	552b      	strb	r3, [r5, r4]
        count = count + 1;
1a000b38:	3401      	adds	r4, #1
   while (count < IMGBYTES) {
1a000b3a:	f246 03bf 	movw	r3, #24767	; 0x60bf
1a000b3e:	429c      	cmp	r4, r3
1a000b40:	d9f3      	bls.n	1a000b2a <main+0xca>

   }

   count = 0;
   printf("\r\n");
1a000b42:	4811      	ldr	r0, [pc, #68]	; (1a000b88 <main+0x128>)
1a000b44:	f001 fe1c 	bl	1a002780 <puts>
   count = 0;
1a000b48:	2400      	movs	r4, #0

   //Enviamos por el numero de bytes por linea
   while (count < IMGLINES) {
1a000b4a:	e009      	b.n	1a000b60 <main+0x100>

        printf("%d,", lines[count]);
1a000b4c:	ad02      	add	r5, sp, #8
1a000b4e:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
1a000b52:	480c      	ldr	r0, [pc, #48]	; (1a000b84 <main+0x124>)
1a000b54:	f001 fda0 	bl	1a002698 <iprintf>
        lines[count] = 0;
1a000b58:	2300      	movs	r3, #0
1a000b5a:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
        count = count + 1;
1a000b5e:	3401      	adds	r4, #1
   while (count < IMGLINES) {
1a000b60:	2c8f      	cmp	r4, #143	; 0x8f
1a000b62:	d9f3      	bls.n	1a000b4c <main+0xec>

   }
   printf("\r\n");
1a000b64:	4808      	ldr	r0, [pc, #32]	; (1a000b88 <main+0x128>)
1a000b66:	f001 fe0b 	bl	1a002780 <puts>

   // Prendemos el LED 3 para indicar que el proceso ya termino
   gpioWrite(LED3, ON);
1a000b6a:	2101      	movs	r1, #1
1a000b6c:	202d      	movs	r0, #45	; 0x2d
1a000b6e:	f001 faa7 	bl	1a0020c0 <gpioWrite>
1a000b72:	e7fe      	b.n	1a000b72 <main+0x112>
1a000b74:	1a0034e4 	.word	0x1a0034e4
1a000b78:	1a003544 	.word	0x1a003544
1a000b7c:	1a00351c 	.word	0x1a00351c
1a000b80:	1a003530 	.word	0x1a003530
1a000b84:	1a003558 	.word	0x1a003558
1a000b88:	1a003540 	.word	0x1a003540

1a000b8c <initialise_monitor_handles>:
}
1a000b8c:	4770      	bx	lr
1a000b8e:	Address 0x000000001a000b8e is out of bounds.


1a000b90 <Reset_Handler>:
void Reset_Handler(void) {
1a000b90:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000b92:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000b94:	4b19      	ldr	r3, [pc, #100]	; (1a000bfc <Reset_Handler+0x6c>)
1a000b96:	4a1a      	ldr	r2, [pc, #104]	; (1a000c00 <Reset_Handler+0x70>)
1a000b98:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000b9a:	3304      	adds	r3, #4
1a000b9c:	4a19      	ldr	r2, [pc, #100]	; (1a000c04 <Reset_Handler+0x74>)
1a000b9e:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000ba0:	2300      	movs	r3, #0
1a000ba2:	e005      	b.n	1a000bb0 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000ba4:	4a18      	ldr	r2, [pc, #96]	; (1a000c08 <Reset_Handler+0x78>)
1a000ba6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000baa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000bae:	3301      	adds	r3, #1
1a000bb0:	2b07      	cmp	r3, #7
1a000bb2:	d9f7      	bls.n	1a000ba4 <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000bb4:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000bb6:	4b15      	ldr	r3, [pc, #84]	; (1a000c0c <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000bb8:	e007      	b.n	1a000bca <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000bba:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000bbe:	689a      	ldr	r2, [r3, #8]
1a000bc0:	6859      	ldr	r1, [r3, #4]
1a000bc2:	6818      	ldr	r0, [r3, #0]
1a000bc4:	f7ff fae1 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000bc8:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000bca:	4a11      	ldr	r2, [pc, #68]	; (1a000c10 <Reset_Handler+0x80>)
1a000bcc:	4293      	cmp	r3, r2
1a000bce:	d3f4      	bcc.n	1a000bba <Reset_Handler+0x2a>
1a000bd0:	e006      	b.n	1a000be0 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000bd2:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000bd4:	6859      	ldr	r1, [r3, #4]
1a000bd6:	f854 0b08 	ldr.w	r0, [r4], #8
1a000bda:	f7ff fae5 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000bde:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000be0:	4a0c      	ldr	r2, [pc, #48]	; (1a000c14 <Reset_Handler+0x84>)
1a000be2:	4293      	cmp	r3, r2
1a000be4:	d3f5      	bcc.n	1a000bd2 <Reset_Handler+0x42>
    SystemInit();
1a000be6:	f001 f877 	bl	1a001cd8 <SystemInit>
    __libc_init_array();
1a000bea:	f001 fd29 	bl	1a002640 <__libc_init_array>
    initialise_monitor_handles();
1a000bee:	f7ff ffcd 	bl	1a000b8c <initialise_monitor_handles>
    main();
1a000bf2:	f7ff ff35 	bl	1a000a60 <main>
        __asm__ volatile("wfi");
1a000bf6:	bf30      	wfi
1a000bf8:	e7fd      	b.n	1a000bf6 <Reset_Handler+0x66>
1a000bfa:	bf00      	nop
1a000bfc:	40053100 	.word	0x40053100
1a000c00:	10df1000 	.word	0x10df1000
1a000c04:	01dff7ff 	.word	0x01dff7ff
1a000c08:	e000e280 	.word	0xe000e280
1a000c0c:	1a000114 	.word	0x1a000114
1a000c10:	1a000150 	.word	0x1a000150
1a000c14:	1a000178 	.word	0x1a000178

1a000c18 <_fini>:
void _fini(void) {}
1a000c18:	4770      	bx	lr

1a000c1a <_init>:
void _init(void) {}
1a000c1a:	4770      	bx	lr

1a000c1c <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000c1c:	2309      	movs	r3, #9
1a000c1e:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c24:	4770      	bx	lr

1a000c26 <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000c26:	2358      	movs	r3, #88	; 0x58
1a000c28:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c2e:	4770      	bx	lr

1a000c30 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000c30:	2902      	cmp	r1, #2
1a000c32:	d801      	bhi.n	1a000c38 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000c34:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000c36:	4770      	bx	lr
       SET_ERR(EBADF);
1a000c38:	2309      	movs	r3, #9
1a000c3a:	6003      	str	r3, [r0, #0]
       return -1;
1a000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c40:	4770      	bx	lr

1a000c42 <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000c42:	2358      	movs	r3, #88	; 0x58
1a000c44:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000c46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c4a:	4770      	bx	lr

1a000c4c <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000c4c:	2902      	cmp	r1, #2
1a000c4e:	d81f      	bhi.n	1a000c90 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000c54:	461d      	mov	r5, r3
1a000c56:	4617      	mov	r7, r2
1a000c58:	4606      	mov	r6, r0
  size_t i = 0;
1a000c5a:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000c5c:	42ac      	cmp	r4, r5
1a000c5e:	d211      	bcs.n	1a000c84 <_read_r+0x38>
         int c = __stdio_getchar();
1a000c60:	f000 f92d 	bl	1a000ebe <__stdio_getchar>
         if( c != -1 ){
1a000c64:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000c68:	d0f8      	beq.n	1a000c5c <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000c6a:	f104 0801 	add.w	r8, r4, #1
1a000c6e:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000c70:	280d      	cmp	r0, #13
1a000c72:	d003      	beq.n	1a000c7c <_read_r+0x30>
1a000c74:	280a      	cmp	r0, #10
1a000c76:	d001      	beq.n	1a000c7c <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000c78:	4644      	mov	r4, r8
1a000c7a:	e7ef      	b.n	1a000c5c <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000c7c:	f000 f91f 	bl	1a000ebe <__stdio_getchar>
               return i;
1a000c80:	4640      	mov	r0, r8
1a000c82:	e003      	b.n	1a000c8c <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000c84:	2313      	movs	r3, #19
1a000c86:	6033      	str	r3, [r6, #0]
      return -1;
1a000c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000c90:	2313      	movs	r3, #19
1a000c92:	6003      	str	r3, [r0, #0]
      return -1;
1a000c94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000c98:	4770      	bx	lr

1a000c9a <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000c9a:	2902      	cmp	r1, #2
1a000c9c:	d80c      	bhi.n	1a000cb8 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000c9e:	b570      	push	{r4, r5, r6, lr}
1a000ca0:	461d      	mov	r5, r3
1a000ca2:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000ca4:	2400      	movs	r4, #0
1a000ca6:	e003      	b.n	1a000cb0 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000ca8:	5d30      	ldrb	r0, [r6, r4]
1a000caa:	f000 f903 	bl	1a000eb4 <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000cae:	3401      	adds	r4, #1
1a000cb0:	42ac      	cmp	r4, r5
1a000cb2:	d3f9      	bcc.n	1a000ca8 <_write_r+0xe>
       return n;
1a000cb4:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000cb6:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000cb8:	2313      	movs	r3, #19
1a000cba:	6003      	str	r3, [r0, #0]
       return -1;
1a000cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000cc0:	4770      	bx	lr
1a000cc2:	Address 0x000000001a000cc2 is out of bounds.


1a000cc4 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000cc4:	4b05      	ldr	r3, [pc, #20]	; (1a000cdc <_sbrk_r+0x18>)
1a000cc6:	681b      	ldr	r3, [r3, #0]
1a000cc8:	b123      	cbz	r3, 1a000cd4 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000cca:	4b04      	ldr	r3, [pc, #16]	; (1a000cdc <_sbrk_r+0x18>)
1a000ccc:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000cce:	4401      	add	r1, r0
1a000cd0:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000cd2:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000cd4:	4b01      	ldr	r3, [pc, #4]	; (1a000cdc <_sbrk_r+0x18>)
1a000cd6:	4a02      	ldr	r2, [pc, #8]	; (1a000ce0 <_sbrk_r+0x1c>)
1a000cd8:	601a      	str	r2, [r3, #0]
1a000cda:	e7f6      	b.n	1a000cca <_sbrk_r+0x6>
1a000cdc:	100000e8 	.word	0x100000e8
1a000ce0:	10000124 	.word	0x10000124

1a000ce4 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000ce4:	2200      	movs	r2, #0
1a000ce6:	2a05      	cmp	r2, #5
1a000ce8:	d819      	bhi.n	1a000d1e <Board_LED_Init+0x3a>
{
1a000cea:	b470      	push	{r4, r5, r6}
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000cec:	490c      	ldr	r1, [pc, #48]	; (1a000d20 <Board_LED_Init+0x3c>)
1a000cee:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a000cf2:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a000cf6:	784c      	ldrb	r4, [r1, #1]
	pGPIO->DIR[port] |= 1UL << pin;
1a000cf8:	4b0a      	ldr	r3, [pc, #40]	; (1a000d24 <Board_LED_Init+0x40>)
1a000cfa:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a000cfe:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a000d02:	2001      	movs	r0, #1
1a000d04:	40a0      	lsls	r0, r4
1a000d06:	4301      	orrs	r1, r0
1a000d08:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a000d0c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a000d10:	2100      	movs	r1, #0
1a000d12:	5519      	strb	r1, [r3, r4]
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000d14:	3201      	adds	r2, #1
1a000d16:	2a05      	cmp	r2, #5
1a000d18:	d9e8      	bls.n	1a000cec <Board_LED_Init+0x8>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a000d1a:	bc70      	pop	{r4, r5, r6}
1a000d1c:	4770      	bx	lr
1a000d1e:	4770      	bx	lr
1a000d20:	1a003568 	.word	0x1a003568
1a000d24:	400f4000 	.word	0x400f4000

1a000d28 <Board_TEC_Init>:


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000d28:	2300      	movs	r3, #0
1a000d2a:	2b03      	cmp	r3, #3
1a000d2c:	d816      	bhi.n	1a000d5c <Board_TEC_Init+0x34>
{
1a000d2e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000d30:	490b      	ldr	r1, [pc, #44]	; (1a000d60 <Board_TEC_Init+0x38>)
1a000d32:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000d36:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000d3a:	784d      	ldrb	r5, [r1, #1]
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000d3c:	4c09      	ldr	r4, [pc, #36]	; (1a000d64 <Board_TEC_Init+0x3c>)
1a000d3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000d42:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000d46:	2001      	movs	r0, #1
1a000d48:	40a8      	lsls	r0, r5
1a000d4a:	ea21 0100 	bic.w	r1, r1, r0
1a000d4e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000d52:	3301      	adds	r3, #1
1a000d54:	2b03      	cmp	r3, #3
1a000d56:	d9eb      	bls.n	1a000d30 <Board_TEC_Init+0x8>
    }
}
1a000d58:	bc30      	pop	{r4, r5}
1a000d5a:	4770      	bx	lr
1a000d5c:	4770      	bx	lr
1a000d5e:	bf00      	nop
1a000d60:	1a003560 	.word	0x1a003560
1a000d64:	400f4000 	.word	0x400f4000

1a000d68 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000d68:	2300      	movs	r3, #0
1a000d6a:	2b08      	cmp	r3, #8
1a000d6c:	d816      	bhi.n	1a000d9c <Board_GPIO_Init+0x34>
{
1a000d6e:	b430      	push	{r4, r5}
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000d70:	490b      	ldr	r1, [pc, #44]	; (1a000da0 <Board_GPIO_Init+0x38>)
1a000d72:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000d76:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000d7a:	784d      	ldrb	r5, [r1, #1]
1a000d7c:	4c09      	ldr	r4, [pc, #36]	; (1a000da4 <Board_GPIO_Init+0x3c>)
1a000d7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000d82:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000d86:	2001      	movs	r0, #1
1a000d88:	40a8      	lsls	r0, r5
1a000d8a:	ea21 0100 	bic.w	r1, r1, r0
1a000d8e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000d92:	3301      	adds	r3, #1
1a000d94:	2b08      	cmp	r3, #8
1a000d96:	d9eb      	bls.n	1a000d70 <Board_GPIO_Init+0x8>
    }
}
1a000d98:	bc30      	pop	{r4, r5}
1a000d9a:	4770      	bx	lr
1a000d9c:	4770      	bx	lr
1a000d9e:	bf00      	nop
1a000da0:	1a003574 	.word	0x1a003574
1a000da4:	400f4000 	.word	0x400f4000

1a000da8 <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000da8:	b510      	push	{r4, lr}
1a000daa:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a000dac:	4c08      	ldr	r4, [pc, #32]	; (1a000dd0 <Board_ADC_Init+0x28>)
1a000dae:	4669      	mov	r1, sp
1a000db0:	4620      	mov	r0, r4
1a000db2:	f000 f9bd 	bl	1a001130 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000db6:	4a07      	ldr	r2, [pc, #28]	; (1a000dd4 <Board_ADC_Init+0x2c>)
1a000db8:	4669      	mov	r1, sp
1a000dba:	4620      	mov	r0, r4
1a000dbc:	f000 f9d8 	bl	1a001170 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000dc0:	2200      	movs	r2, #0
1a000dc2:	4669      	mov	r1, sp
1a000dc4:	4620      	mov	r0, r4
1a000dc6:	f000 f9ec 	bl	1a0011a2 <Chip_ADC_SetResolution>
}
1a000dca:	b002      	add	sp, #8
1a000dcc:	bd10      	pop	{r4, pc}
1a000dce:	bf00      	nop
1a000dd0:	400e3000 	.word	0x400e3000
1a000dd4:	00061a80 	.word	0x00061a80

1a000dd8 <Board_SPI_Init>:
{
1a000dd8:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a000dda:	4c0b      	ldr	r4, [pc, #44]	; (1a000e08 <Board_SPI_Init+0x30>)
1a000ddc:	4620      	mov	r0, r4
1a000dde:	f000 ff5f 	bl	1a001ca0 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000de2:	6863      	ldr	r3, [r4, #4]
1a000de4:	f023 0304 	bic.w	r3, r3, #4
1a000de8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000dea:	6823      	ldr	r3, [r4, #0]
1a000dec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000df0:	f043 0307 	orr.w	r3, r3, #7
1a000df4:	6023      	str	r3, [r4, #0]
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000df6:	4905      	ldr	r1, [pc, #20]	; (1a000e0c <Board_SPI_Init+0x34>)
1a000df8:	4620      	mov	r0, r4
1a000dfa:	f000 ff32 	bl	1a001c62 <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000dfe:	6863      	ldr	r3, [r4, #4]
1a000e00:	f043 0302 	orr.w	r3, r3, #2
1a000e04:	6063      	str	r3, [r4, #4]
}
1a000e06:	bd10      	pop	{r4, pc}
1a000e08:	400c5000 	.word	0x400c5000
1a000e0c:	000186a0 	.word	0x000186a0

1a000e10 <Board_I2C_Init>:
{
1a000e10:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a000e12:	2000      	movs	r0, #0
1a000e14:	f000 fe80 	bl	1a001b18 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000e18:	4b04      	ldr	r3, [pc, #16]	; (1a000e2c <Board_I2C_Init+0x1c>)
1a000e1a:	f640 0208 	movw	r2, #2056	; 0x808
1a000e1e:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000e22:	4903      	ldr	r1, [pc, #12]	; (1a000e30 <Board_I2C_Init+0x20>)
1a000e24:	2000      	movs	r0, #0
1a000e26:	f000 fe89 	bl	1a001b3c <Chip_I2C_SetClockRate>
}
1a000e2a:	bd08      	pop	{r3, pc}
1a000e2c:	40086000 	.word	0x40086000
1a000e30:	000f4240 	.word	0x000f4240

1a000e34 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000e34:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a000e36:	4c07      	ldr	r4, [pc, #28]	; (1a000e54 <Board_Debug_Init+0x20>)
1a000e38:	4620      	mov	r0, r4
1a000e3a:	f000 f8b7 	bl	1a000fac <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000e3e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000e42:	4620      	mov	r0, r4
1a000e44:	f000 f8dc 	bl	1a001000 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000e48:	2303      	movs	r3, #3
1a000e4a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000e4c:	2301      	movs	r3, #1
1a000e4e:	65e3      	str	r3, [r4, #92]	; 0x5c
    Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
    Chip_UART_TXEnable(DEBUG_UART);
}
1a000e50:	bd10      	pop	{r4, pc}
1a000e52:	bf00      	nop
1a000e54:	400c1000 	.word	0x400c1000

1a000e58 <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a000e58:	4b03      	ldr	r3, [pc, #12]	; (1a000e68 <Board_UARTPutChar+0x10>)
1a000e5a:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
    while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a000e5c:	f013 0f20 	tst.w	r3, #32
1a000e60:	d0fa      	beq.n	1a000e58 <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a000e62:	4b01      	ldr	r3, [pc, #4]	; (1a000e68 <Board_UARTPutChar+0x10>)
1a000e64:	6018      	str	r0, [r3, #0]
    Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a000e66:	4770      	bx	lr
1a000e68:	400c1000 	.word	0x400c1000

1a000e6c <Board_UARTGetChar>:
	return pUART->LSR;
1a000e6c:	4b05      	ldr	r3, [pc, #20]	; (1a000e84 <Board_UARTGetChar+0x18>)
1a000e6e:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
    if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a000e70:	f013 0f01 	tst.w	r3, #1
1a000e74:	d003      	beq.n	1a000e7e <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000e76:	4b03      	ldr	r3, [pc, #12]	; (1a000e84 <Board_UARTGetChar+0x18>)
1a000e78:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a000e7a:	b2c0      	uxtb	r0, r0
1a000e7c:	4770      	bx	lr
    }
    return EOF;
1a000e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000e82:	4770      	bx	lr
1a000e84:	400c1000 	.word	0x400c1000

1a000e88 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000e88:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000e8a:	f7ff ffd3 	bl	1a000e34 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000e8e:	4808      	ldr	r0, [pc, #32]	; (1a000eb0 <Board_Init+0x28>)
1a000e90:	f000 fda1 	bl	1a0019d6 <Chip_GPIO_Init>
   
   Board_GPIO_Init();
1a000e94:	f7ff ff68 	bl	1a000d68 <Board_GPIO_Init>
   Board_ADC_Init();
1a000e98:	f7ff ff86 	bl	1a000da8 <Board_ADC_Init>
   Board_SPI_Init();
1a000e9c:	f7ff ff9c 	bl	1a000dd8 <Board_SPI_Init>
   Board_I2C_Init();
1a000ea0:	f7ff ffb6 	bl	1a000e10 <Board_I2C_Init>

   Board_LED_Init();
1a000ea4:	f7ff ff1e 	bl	1a000ce4 <Board_LED_Init>
   Board_TEC_Init();
1a000ea8:	f7ff ff3e 	bl	1a000d28 <Board_TEC_Init>

   #ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
   #endif
}
1a000eac:	bd08      	pop	{r3, pc}
1a000eae:	bf00      	nop
1a000eb0:	400f4000 	.word	0x400f4000

1a000eb4 <__stdio_putchar>:
    Chip_ADC_EnableChannel(LPC_ADC0, curADCChannel, DISABLE);
    curADCChannel = 0xFF;
    return data;
}

void __stdio_putchar(int c) {
1a000eb4:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a000eb6:	b2c0      	uxtb	r0, r0
1a000eb8:	f7ff ffce 	bl	1a000e58 <Board_UARTPutChar>
}
1a000ebc:	bd08      	pop	{r3, pc}

1a000ebe <__stdio_getchar>:

int __stdio_getchar() {
1a000ebe:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a000ec0:	f7ff ffd4 	bl	1a000e6c <Board_UARTGetChar>
}
1a000ec4:	bd08      	pop	{r3, pc}

1a000ec6 <__stdio_init>:

void __stdio_init() {
1a000ec6:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a000ec8:	f7ff ffb4 	bl	1a000e34 <Board_Debug_Init>
1a000ecc:	bd08      	pop	{r3, pc}
1a000ece:	Address 0x000000001a000ece is out of bounds.


1a000ed0 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000ed0:	2300      	movs	r3, #0
1a000ed2:	2b1c      	cmp	r3, #28
1a000ed4:	d812      	bhi.n	1a000efc <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a000ed6:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000ed8:	4a09      	ldr	r2, [pc, #36]	; (1a000f00 <Board_SetupMuxing+0x30>)
1a000eda:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000ede:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000ee2:	784a      	ldrb	r2, [r1, #1]
1a000ee4:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000ee6:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000eea:	4906      	ldr	r1, [pc, #24]	; (1a000f04 <Board_SetupMuxing+0x34>)
1a000eec:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000ef0:	3301      	adds	r3, #1
1a000ef2:	2b1c      	cmp	r3, #28
1a000ef4:	d9f0      	bls.n	1a000ed8 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000efa:	4770      	bx	lr
1a000efc:	4770      	bx	lr
1a000efe:	bf00      	nop
1a000f00:	1a003590 	.word	0x1a003590
1a000f04:	40086000 	.word	0x40086000

1a000f08 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000f08:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000f0a:	4a17      	ldr	r2, [pc, #92]	; (1a000f68 <Board_SetupClocking+0x60>)
1a000f0c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000f14:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000f18:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000f1c:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000f20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000f24:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000f28:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000f2c:	2201      	movs	r2, #1
1a000f2e:	490f      	ldr	r1, [pc, #60]	; (1a000f6c <Board_SetupClocking+0x64>)
1a000f30:	2006      	movs	r0, #6
1a000f32:	f000 fc0f 	bl	1a001754 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000f36:	2400      	movs	r4, #0
1a000f38:	b14c      	cbz	r4, 1a000f4e <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000f3a:	4b0b      	ldr	r3, [pc, #44]	; (1a000f68 <Board_SetupClocking+0x60>)
1a000f3c:	685a      	ldr	r2, [r3, #4]
1a000f3e:	f022 020c 	bic.w	r2, r2, #12
1a000f42:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000f44:	685a      	ldr	r2, [r3, #4]
1a000f46:	f042 0203 	orr.w	r2, r2, #3
1a000f4a:	605a      	str	r2, [r3, #4]
}
1a000f4c:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000f4e:	4808      	ldr	r0, [pc, #32]	; (1a000f70 <Board_SetupClocking+0x68>)
1a000f50:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000f54:	2301      	movs	r3, #1
1a000f56:	788a      	ldrb	r2, [r1, #2]
1a000f58:	7849      	ldrb	r1, [r1, #1]
1a000f5a:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000f5e:	f000 fb4b 	bl	1a0015f8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000f62:	3401      	adds	r4, #1
1a000f64:	e7e8      	b.n	1a000f38 <Board_SetupClocking+0x30>
1a000f66:	bf00      	nop
1a000f68:	40043000 	.word	0x40043000
1a000f6c:	0c28cb00 	.word	0x0c28cb00
1a000f70:	1a00358c 	.word	0x1a00358c

1a000f74 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000f74:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000f76:	f7ff ffab 	bl	1a000ed0 <Board_SetupMuxing>
    Board_SetupClocking();
1a000f7a:	f7ff ffc5 	bl	1a000f08 <Board_SetupClocking>
}
1a000f7e:	bd08      	pop	{r3, pc}

1a000f80 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000f80:	4b09      	ldr	r3, [pc, #36]	; (1a000fa8 <Chip_UART_GetIndex+0x28>)
1a000f82:	4298      	cmp	r0, r3
1a000f84:	d009      	beq.n	1a000f9a <Chip_UART_GetIndex+0x1a>
1a000f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000f8a:	4298      	cmp	r0, r3
1a000f8c:	d007      	beq.n	1a000f9e <Chip_UART_GetIndex+0x1e>
1a000f8e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000f92:	4298      	cmp	r0, r3
1a000f94:	d005      	beq.n	1a000fa2 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000f96:	2000      	movs	r0, #0
1a000f98:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000f9a:	2002      	movs	r0, #2
1a000f9c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000f9e:	2003      	movs	r0, #3
1a000fa0:	4770      	bx	lr
			return 1;
1a000fa2:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a000fa4:	4770      	bx	lr
1a000fa6:	bf00      	nop
1a000fa8:	400c1000 	.word	0x400c1000

1a000fac <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000fac:	b530      	push	{r4, r5, lr}
1a000fae:	b083      	sub	sp, #12
1a000fb0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000fb2:	f7ff ffe5 	bl	1a000f80 <Chip_UART_GetIndex>
1a000fb6:	2301      	movs	r3, #1
1a000fb8:	461a      	mov	r2, r3
1a000fba:	4619      	mov	r1, r3
1a000fbc:	4d0e      	ldr	r5, [pc, #56]	; (1a000ff8 <Chip_UART_Init+0x4c>)
1a000fbe:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000fc2:	f000 fb5f 	bl	1a001684 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a000fc6:	2307      	movs	r3, #7
1a000fc8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000fca:	2300      	movs	r3, #0
1a000fcc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000fce:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000fd0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000fd2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000fd4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000fd6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000fd8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000fda:	4b08      	ldr	r3, [pc, #32]	; (1a000ffc <Chip_UART_Init+0x50>)
1a000fdc:	429c      	cmp	r4, r3
1a000fde:	d006      	beq.n	1a000fee <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a000fe0:	2303      	movs	r3, #3
1a000fe2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000fe4:	2310      	movs	r3, #16
1a000fe6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000fe8:	9b01      	ldr	r3, [sp, #4]
}
1a000fea:	b003      	add	sp, #12
1a000fec:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a000fee:	2300      	movs	r3, #0
1a000ff0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a000ff2:	69a3      	ldr	r3, [r4, #24]
1a000ff4:	9301      	str	r3, [sp, #4]
1a000ff6:	e7f3      	b.n	1a000fe0 <Chip_UART_Init+0x34>
1a000ff8:	1a00360c 	.word	0x1a00360c
1a000ffc:	40082000 	.word	0x40082000

1a001000 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001004:	b083      	sub	sp, #12
1a001006:	4683      	mov	fp, r0
1a001008:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00100a:	f7ff ffb9 	bl	1a000f80 <Chip_UART_GetIndex>
1a00100e:	4b35      	ldr	r3, [pc, #212]	; (1a0010e4 <Chip_UART_SetBaudFDR+0xe4>)
1a001010:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001014:	f000 fb6e 	bl	1a0016f4 <Chip_Clock_GetRate>
1a001018:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00101a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00101e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001020:	2300      	movs	r3, #0
1a001022:	9301      	str	r3, [sp, #4]
1a001024:	46a2      	mov	sl, r4
1a001026:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a001028:	e02a      	b.n	1a001080 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00102a:	4242      	negs	r2, r0
				div ++;
1a00102c:	1c4b      	adds	r3, r1, #1
1a00102e:	e017      	b.n	1a001060 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001030:	b30a      	cbz	r2, 1a001076 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a001032:	4617      	mov	r7, r2
			sd = d;
1a001034:	9501      	str	r5, [sp, #4]
			sm = m;
1a001036:	46a2      	mov	sl, r4
			sdiv = div;
1a001038:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00103a:	3501      	adds	r5, #1
1a00103c:	42ac      	cmp	r4, r5
1a00103e:	d91e      	bls.n	1a00107e <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001040:	0933      	lsrs	r3, r6, #4
1a001042:	0730      	lsls	r0, r6, #28
1a001044:	fba4 0100 	umull	r0, r1, r4, r0
1a001048:	fb04 1103 	mla	r1, r4, r3, r1
1a00104c:	1962      	adds	r2, r4, r5
1a00104e:	fb08 f202 	mul.w	r2, r8, r2
1a001052:	2300      	movs	r3, #0
1a001054:	f001 f974 	bl	1a002340 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001058:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00105a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00105c:	2800      	cmp	r0, #0
1a00105e:	dbe4      	blt.n	1a00102a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001060:	4297      	cmp	r7, r2
1a001062:	d3ea      	bcc.n	1a00103a <Chip_UART_SetBaudFDR+0x3a>
1a001064:	2b00      	cmp	r3, #0
1a001066:	d0e8      	beq.n	1a00103a <Chip_UART_SetBaudFDR+0x3a>
1a001068:	0c19      	lsrs	r1, r3, #16
1a00106a:	d1e6      	bne.n	1a00103a <Chip_UART_SetBaudFDR+0x3a>
1a00106c:	2b02      	cmp	r3, #2
1a00106e:	d8df      	bhi.n	1a001030 <Chip_UART_SetBaudFDR+0x30>
1a001070:	2d00      	cmp	r5, #0
1a001072:	d0dd      	beq.n	1a001030 <Chip_UART_SetBaudFDR+0x30>
1a001074:	e7e1      	b.n	1a00103a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a001076:	4617      	mov	r7, r2
			sd = d;
1a001078:	9501      	str	r5, [sp, #4]
			sm = m;
1a00107a:	46a2      	mov	sl, r4
			sdiv = div;
1a00107c:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a00107e:	3401      	adds	r4, #1
1a001080:	b11f      	cbz	r7, 1a00108a <Chip_UART_SetBaudFDR+0x8a>
1a001082:	2c0f      	cmp	r4, #15
1a001084:	d801      	bhi.n	1a00108a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a001086:	2500      	movs	r5, #0
1a001088:	e7d8      	b.n	1a00103c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00108a:	f1b9 0f00 	cmp.w	r9, #0
1a00108e:	d024      	beq.n	1a0010da <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001090:	f8db 300c 	ldr.w	r3, [fp, #12]
1a001094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001098:	f8cb 300c 	str.w	r3, [fp, #12]
1a00109c:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0010a0:	f8cb 3000 	str.w	r3, [fp]
1a0010a4:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0010a8:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0010ac:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0010b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0010b4:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0010b8:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0010bc:	b2db      	uxtb	r3, r3
1a0010be:	9901      	ldr	r1, [sp, #4]
1a0010c0:	f001 020f 	and.w	r2, r1, #15
1a0010c4:	4313      	orrs	r3, r2
1a0010c6:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0010ca:	0933      	lsrs	r3, r6, #4
1a0010cc:	fb0a f303 	mul.w	r3, sl, r3
1a0010d0:	448a      	add	sl, r1
1a0010d2:	fb09 f90a 	mul.w	r9, r9, sl
1a0010d6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0010da:	4648      	mov	r0, r9
1a0010dc:	b003      	add	sp, #12
1a0010de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0010e2:	bf00      	nop
1a0010e4:	1a003604 	.word	0x1a003604

1a0010e8 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a0010e8:	4b03      	ldr	r3, [pc, #12]	; (1a0010f8 <Chip_ADC_GetClockIndex+0x10>)
1a0010ea:	4298      	cmp	r0, r3
1a0010ec:	d001      	beq.n	1a0010f2 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a0010ee:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a0010f0:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a0010f2:	2004      	movs	r0, #4
1a0010f4:	4770      	bx	lr
1a0010f6:	bf00      	nop
1a0010f8:	400e4000 	.word	0x400e4000

1a0010fc <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a0010fc:	b570      	push	{r4, r5, r6, lr}
1a0010fe:	460d      	mov	r5, r1
1a001100:	4614      	mov	r4, r2
1a001102:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001104:	f7ff fff0 	bl	1a0010e8 <Chip_ADC_GetClockIndex>
1a001108:	f000 faf4 	bl	1a0016f4 <Chip_Clock_GetRate>
	if (burstMode) {
1a00110c:	b965      	cbnz	r5, 1a001128 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a00110e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001112:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001116:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00111a:	0064      	lsls	r4, r4, #1
1a00111c:	fbb0 f0f4 	udiv	r0, r0, r4
1a001120:	b2c0      	uxtb	r0, r0
1a001122:	3801      	subs	r0, #1
	return div;
}
1a001124:	b2c0      	uxtb	r0, r0
1a001126:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a001128:	fb04 f406 	mul.w	r4, r4, r6
1a00112c:	e7f3      	b.n	1a001116 <getClkDiv+0x1a>
1a00112e:	Address 0x000000001a00112e is out of bounds.


1a001130 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001130:	b538      	push	{r3, r4, r5, lr}
1a001132:	4605      	mov	r5, r0
1a001134:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001136:	f7ff ffd7 	bl	1a0010e8 <Chip_ADC_GetClockIndex>
1a00113a:	2301      	movs	r3, #1
1a00113c:	461a      	mov	r2, r3
1a00113e:	4619      	mov	r1, r3
1a001140:	f000 faa0 	bl	1a001684 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001144:	2100      	movs	r1, #0
1a001146:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001148:	4a08      	ldr	r2, [pc, #32]	; (1a00116c <Chip_ADC_Init+0x3c>)
1a00114a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00114c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00114e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001150:	230b      	movs	r3, #11
1a001152:	4628      	mov	r0, r5
1a001154:	f7ff ffd2 	bl	1a0010fc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001158:	0200      	lsls	r0, r0, #8
1a00115a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00115e:	7920      	ldrb	r0, [r4, #4]
1a001160:	0440      	lsls	r0, r0, #17
1a001162:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a001166:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a001168:	6028      	str	r0, [r5, #0]
}
1a00116a:	bd38      	pop	{r3, r4, r5, pc}
1a00116c:	00061a80 	.word	0x00061a80

1a001170 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001170:	b570      	push	{r4, r5, r6, lr}
1a001172:	4605      	mov	r5, r0
1a001174:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a001176:	6804      	ldr	r4, [r0, #0]
1a001178:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a00117c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a001180:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a001182:	790b      	ldrb	r3, [r1, #4]
1a001184:	f1c3 030b 	rsb	r3, r3, #11
1a001188:	b2db      	uxtb	r3, r3
1a00118a:	7949      	ldrb	r1, [r1, #5]
1a00118c:	f7ff ffb6 	bl	1a0010fc <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001190:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001194:	7930      	ldrb	r0, [r6, #4]
1a001196:	0440      	lsls	r0, r0, #17
1a001198:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a00119c:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a00119e:	6028      	str	r0, [r5, #0]
}
1a0011a0:	bd70      	pop	{r4, r5, r6, pc}

1a0011a2 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a0011a2:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a0011a4:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a0011a6:	680a      	ldr	r2, [r1, #0]
1a0011a8:	f7ff ffe2 	bl	1a001170 <Chip_ADC_SetSampleRate>
}
1a0011ac:	bd08      	pop	{r3, pc}
1a0011ae:	Address 0x000000001a0011ae is out of bounds.


1a0011b0 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0011b0:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0011b2:	680b      	ldr	r3, [r1, #0]
1a0011b4:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0011b8:	d002      	beq.n	1a0011c0 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0011ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0011be:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0011c0:	4607      	mov	r7, r0
1a0011c2:	2501      	movs	r5, #1
1a0011c4:	e03b      	b.n	1a00123e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0011c6:	694b      	ldr	r3, [r1, #20]
1a0011c8:	fb03 f302 	mul.w	r3, r3, r2
1a0011cc:	fbb3 f3f5 	udiv	r3, r3, r5
1a0011d0:	e014      	b.n	1a0011fc <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0011d2:	461c      	mov	r4, r3
1a0011d4:	e020      	b.n	1a001218 <pll_calc_divs+0x68>
		return -val;
1a0011d6:	f1cc 0c00 	rsb	ip, ip, #0
1a0011da:	e020      	b.n	1a00121e <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a0011dc:	3201      	adds	r2, #1
1a0011de:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0011e2:	dc26      	bgt.n	1a001232 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a0011e4:	680c      	ldr	r4, [r1, #0]
1a0011e6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0011ea:	d0ec      	beq.n	1a0011c6 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0011ec:	1c73      	adds	r3, r6, #1
1a0011ee:	fa02 fc03 	lsl.w	ip, r2, r3
1a0011f2:	694b      	ldr	r3, [r1, #20]
1a0011f4:	fb03 f30c 	mul.w	r3, r3, ip
1a0011f8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0011fc:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a00124c <pll_calc_divs+0x9c>
1a001200:	4563      	cmp	r3, ip
1a001202:	d9eb      	bls.n	1a0011dc <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a001204:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a001250 <pll_calc_divs+0xa0>
1a001208:	4563      	cmp	r3, ip
1a00120a:	d812      	bhi.n	1a001232 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a00120c:	f014 0f80 	tst.w	r4, #128	; 0x80
1a001210:	d1df      	bne.n	1a0011d2 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a001212:	1c74      	adds	r4, r6, #1
1a001214:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a001218:	ebb0 0c04 	subs.w	ip, r0, r4
1a00121c:	d4db      	bmi.n	1a0011d6 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a00121e:	4567      	cmp	r7, ip
1a001220:	d9dc      	bls.n	1a0011dc <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a001222:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a001224:	1c77      	adds	r7, r6, #1
1a001226:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a001228:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00122a:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a00122c:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a00122e:	4667      	mov	r7, ip
1a001230:	e7d4      	b.n	1a0011dc <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a001232:	3601      	adds	r6, #1
1a001234:	2e03      	cmp	r6, #3
1a001236:	dc01      	bgt.n	1a00123c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a001238:	2201      	movs	r2, #1
1a00123a:	e7d0      	b.n	1a0011de <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a00123c:	3501      	adds	r5, #1
1a00123e:	2d04      	cmp	r5, #4
1a001240:	dc01      	bgt.n	1a001246 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a001242:	2600      	movs	r6, #0
1a001244:	e7f6      	b.n	1a001234 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a001246:	bcf0      	pop	{r4, r5, r6, r7}
1a001248:	4770      	bx	lr
1a00124a:	bf00      	nop
1a00124c:	094c5eff 	.word	0x094c5eff
1a001250:	1312d000 	.word	0x1312d000

1a001254 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001254:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001256:	b099      	sub	sp, #100	; 0x64
1a001258:	4605      	mov	r5, r0
1a00125a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00125c:	225c      	movs	r2, #92	; 0x5c
1a00125e:	2100      	movs	r1, #0
1a001260:	a801      	add	r0, sp, #4
1a001262:	f001 fa11 	bl	1a002688 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001266:	2380      	movs	r3, #128	; 0x80
1a001268:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00126a:	6963      	ldr	r3, [r4, #20]
1a00126c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00126e:	7923      	ldrb	r3, [r4, #4]
1a001270:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001274:	4669      	mov	r1, sp
1a001276:	4628      	mov	r0, r5
1a001278:	f7ff ff9a 	bl	1a0011b0 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00127c:	9b06      	ldr	r3, [sp, #24]
1a00127e:	42ab      	cmp	r3, r5
1a001280:	d027      	beq.n	1a0012d2 <pll_get_frac+0x7e>
	if (val < 0)
1a001282:	1aeb      	subs	r3, r5, r3
1a001284:	d42e      	bmi.n	1a0012e4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001286:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a001288:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00128a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00128e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a001290:	6963      	ldr	r3, [r4, #20]
1a001292:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a001294:	7923      	ldrb	r3, [r4, #4]
1a001296:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00129a:	a910      	add	r1, sp, #64	; 0x40
1a00129c:	4628      	mov	r0, r5
1a00129e:	f7ff ff87 	bl	1a0011b0 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0012a2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0012a4:	42ab      	cmp	r3, r5
1a0012a6:	d01f      	beq.n	1a0012e8 <pll_get_frac+0x94>
	if (val < 0)
1a0012a8:	1aeb      	subs	r3, r5, r3
1a0012aa:	d425      	bmi.n	1a0012f8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0012ac:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0012ae:	4b2b      	ldr	r3, [pc, #172]	; (1a00135c <pll_get_frac+0x108>)
1a0012b0:	429d      	cmp	r5, r3
1a0012b2:	d923      	bls.n	1a0012fc <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0012b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a0012b6:	1aed      	subs	r5, r5, r3
1a0012b8:	d433      	bmi.n	1a001322 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0012ba:	42ae      	cmp	r6, r5
1a0012bc:	dc3b      	bgt.n	1a001336 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a0012be:	42be      	cmp	r6, r7
1a0012c0:	dc31      	bgt.n	1a001326 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a0012c2:	466d      	mov	r5, sp
1a0012c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0012c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0012c8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0012cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0012d0:	e006      	b.n	1a0012e0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0012d2:	466d      	mov	r5, sp
1a0012d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0012d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0012d8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0012dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0012e0:	b019      	add	sp, #100	; 0x64
1a0012e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0012e4:	425b      	negs	r3, r3
1a0012e6:	e7ce      	b.n	1a001286 <pll_get_frac+0x32>
		*ppll = pll[2];
1a0012e8:	ad10      	add	r5, sp, #64	; 0x40
1a0012ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0012ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0012ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0012f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0012f6:	e7f3      	b.n	1a0012e0 <pll_get_frac+0x8c>
		return -val;
1a0012f8:	425b      	negs	r3, r3
1a0012fa:	e7d7      	b.n	1a0012ac <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0012fc:	2340      	movs	r3, #64	; 0x40
1a0012fe:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a001300:	6963      	ldr	r3, [r4, #20]
1a001302:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a001304:	a908      	add	r1, sp, #32
1a001306:	4628      	mov	r0, r5
1a001308:	f7ff ff52 	bl	1a0011b0 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a00130c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a00130e:	42ab      	cmp	r3, r5
1a001310:	d1d0      	bne.n	1a0012b4 <pll_get_frac+0x60>
			*ppll = pll[1];
1a001312:	ad08      	add	r5, sp, #32
1a001314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001318:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00131c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a001320:	e7de      	b.n	1a0012e0 <pll_get_frac+0x8c>
		return -val;
1a001322:	426d      	negs	r5, r5
1a001324:	e7c9      	b.n	1a0012ba <pll_get_frac+0x66>
			*ppll = pll[2];
1a001326:	ad10      	add	r5, sp, #64	; 0x40
1a001328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00132a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00132c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001330:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001334:	e7d4      	b.n	1a0012e0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a001336:	42af      	cmp	r7, r5
1a001338:	db07      	blt.n	1a00134a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00133a:	ad08      	add	r5, sp, #32
1a00133c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00133e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001340:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001344:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001348:	e7ca      	b.n	1a0012e0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00134a:	ad10      	add	r5, sp, #64	; 0x40
1a00134c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00134e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001350:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001354:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001358:	e7c2      	b.n	1a0012e0 <pll_get_frac+0x8c>
1a00135a:	bf00      	nop
1a00135c:	068e7780 	.word	0x068e7780

1a001360 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001360:	b430      	push	{r4, r5}
1a001362:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a001364:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a001366:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001368:	e000      	b.n	1a00136c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00136a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00136c:	281c      	cmp	r0, #28
1a00136e:	d118      	bne.n	1a0013a2 <Chip_Clock_FindBaseClock+0x42>
1a001370:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001374:	0051      	lsls	r1, r2, #1
1a001376:	4a0c      	ldr	r2, [pc, #48]	; (1a0013a8 <Chip_Clock_FindBaseClock+0x48>)
1a001378:	440a      	add	r2, r1
1a00137a:	7914      	ldrb	r4, [r2, #4]
1a00137c:	4284      	cmp	r4, r0
1a00137e:	d010      	beq.n	1a0013a2 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001380:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a001384:	004a      	lsls	r2, r1, #1
1a001386:	4908      	ldr	r1, [pc, #32]	; (1a0013a8 <Chip_Clock_FindBaseClock+0x48>)
1a001388:	5a8a      	ldrh	r2, [r1, r2]
1a00138a:	42aa      	cmp	r2, r5
1a00138c:	d8ed      	bhi.n	1a00136a <Chip_Clock_FindBaseClock+0xa>
1a00138e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001392:	0051      	lsls	r1, r2, #1
1a001394:	4a04      	ldr	r2, [pc, #16]	; (1a0013a8 <Chip_Clock_FindBaseClock+0x48>)
1a001396:	440a      	add	r2, r1
1a001398:	8852      	ldrh	r2, [r2, #2]
1a00139a:	42aa      	cmp	r2, r5
1a00139c:	d3e5      	bcc.n	1a00136a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00139e:	4620      	mov	r0, r4
1a0013a0:	e7e4      	b.n	1a00136c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a0013a2:	bc30      	pop	{r4, r5}
1a0013a4:	4770      	bx	lr
1a0013a6:	bf00      	nop
1a0013a8:	1a003620 	.word	0x1a003620

1a0013ac <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0013ac:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0013ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0013b2:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0013b4:	4a0d      	ldr	r2, [pc, #52]	; (1a0013ec <Chip_Clock_EnableCrystal+0x40>)
1a0013b6:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0013b8:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0013bc:	6992      	ldr	r2, [r2, #24]
1a0013be:	428a      	cmp	r2, r1
1a0013c0:	d001      	beq.n	1a0013c6 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0013c2:	4a0a      	ldr	r2, [pc, #40]	; (1a0013ec <Chip_Clock_EnableCrystal+0x40>)
1a0013c4:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0013c6:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0013ca:	4a09      	ldr	r2, [pc, #36]	; (1a0013f0 <Chip_Clock_EnableCrystal+0x44>)
1a0013cc:	6811      	ldr	r1, [r2, #0]
1a0013ce:	4a09      	ldr	r2, [pc, #36]	; (1a0013f4 <Chip_Clock_EnableCrystal+0x48>)
1a0013d0:	4291      	cmp	r1, r2
1a0013d2:	d901      	bls.n	1a0013d8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0013d4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0013d8:	4a04      	ldr	r2, [pc, #16]	; (1a0013ec <Chip_Clock_EnableCrystal+0x40>)
1a0013da:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0013dc:	9b01      	ldr	r3, [sp, #4]
1a0013de:	1e5a      	subs	r2, r3, #1
1a0013e0:	9201      	str	r2, [sp, #4]
1a0013e2:	2b00      	cmp	r3, #0
1a0013e4:	d1fa      	bne.n	1a0013dc <Chip_Clock_EnableCrystal+0x30>
}
1a0013e6:	b002      	add	sp, #8
1a0013e8:	4770      	bx	lr
1a0013ea:	bf00      	nop
1a0013ec:	40050000 	.word	0x40050000
1a0013f0:	1a003588 	.word	0x1a003588
1a0013f4:	01312cff 	.word	0x01312cff

1a0013f8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0013f8:	3012      	adds	r0, #18
1a0013fa:	4b05      	ldr	r3, [pc, #20]	; (1a001410 <Chip_Clock_GetDividerSource+0x18>)
1a0013fc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a001400:	f010 0f01 	tst.w	r0, #1
1a001404:	d102      	bne.n	1a00140c <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001406:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00140a:	4770      	bx	lr
		return CLKINPUT_PD;
1a00140c:	2011      	movs	r0, #17
}
1a00140e:	4770      	bx	lr
1a001410:	40050000 	.word	0x40050000

1a001414 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001414:	f100 0212 	add.w	r2, r0, #18
1a001418:	4b03      	ldr	r3, [pc, #12]	; (1a001428 <Chip_Clock_GetDividerDivisor+0x14>)
1a00141a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a00141e:	4b03      	ldr	r3, [pc, #12]	; (1a00142c <Chip_Clock_GetDividerDivisor+0x18>)
1a001420:	5c18      	ldrb	r0, [r3, r0]
}
1a001422:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a001426:	4770      	bx	lr
1a001428:	40050000 	.word	0x40050000
1a00142c:	1a003618 	.word	0x1a003618

1a001430 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001430:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001432:	2810      	cmp	r0, #16
1a001434:	d80a      	bhi.n	1a00144c <Chip_Clock_GetClockInputHz+0x1c>
1a001436:	e8df f000 	tbb	[pc, r0]
1a00143a:	0b42      	.short	0x0b42
1a00143c:	091f160d 	.word	0x091f160d
1a001440:	2b282522 	.word	0x2b282522
1a001444:	322e0909 	.word	0x322e0909
1a001448:	3a36      	.short	0x3a36
1a00144a:	3e          	.byte	0x3e
1a00144b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00144c:	2000      	movs	r0, #0
1a00144e:	e038      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001450:	481e      	ldr	r0, [pc, #120]	; (1a0014cc <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001452:	e036      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001454:	4b1e      	ldr	r3, [pc, #120]	; (1a0014d0 <Chip_Clock_GetClockInputHz+0xa0>)
1a001456:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00145a:	f003 0307 	and.w	r3, r3, #7
1a00145e:	2b04      	cmp	r3, #4
1a001460:	d130      	bne.n	1a0014c4 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a001462:	2000      	movs	r0, #0
1a001464:	e02d      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001466:	4b1a      	ldr	r3, [pc, #104]	; (1a0014d0 <Chip_Clock_GetClockInputHz+0xa0>)
1a001468:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00146c:	f003 0307 	and.w	r3, r3, #7
1a001470:	2b04      	cmp	r3, #4
1a001472:	d029      	beq.n	1a0014c8 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001474:	4817      	ldr	r0, [pc, #92]	; (1a0014d4 <Chip_Clock_GetClockInputHz+0xa4>)
1a001476:	e024      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a001478:	4b17      	ldr	r3, [pc, #92]	; (1a0014d8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00147a:	6818      	ldr	r0, [r3, #0]
		break;
1a00147c:	e021      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00147e:	4b17      	ldr	r3, [pc, #92]	; (1a0014dc <Chip_Clock_GetClockInputHz+0xac>)
1a001480:	6818      	ldr	r0, [r3, #0]
		break;
1a001482:	e01e      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001484:	4b16      	ldr	r3, [pc, #88]	; (1a0014e0 <Chip_Clock_GetClockInputHz+0xb0>)
1a001486:	6818      	ldr	r0, [r3, #0]
		break;
1a001488:	e01b      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00148a:	4b15      	ldr	r3, [pc, #84]	; (1a0014e0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00148c:	6858      	ldr	r0, [r3, #4]
		break;
1a00148e:	e018      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001490:	f000 f86a 	bl	1a001568 <Chip_Clock_GetMainPLLHz>
		break;
1a001494:	e015      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a001496:	2100      	movs	r1, #0
1a001498:	f000 f89c 	bl	1a0015d4 <Chip_Clock_GetDivRate>
		break;
1a00149c:	e011      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00149e:	2101      	movs	r1, #1
1a0014a0:	f000 f898 	bl	1a0015d4 <Chip_Clock_GetDivRate>
		break;
1a0014a4:	e00d      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0014a6:	2102      	movs	r1, #2
1a0014a8:	f000 f894 	bl	1a0015d4 <Chip_Clock_GetDivRate>
		break;
1a0014ac:	e009      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0014ae:	2103      	movs	r1, #3
1a0014b0:	f000 f890 	bl	1a0015d4 <Chip_Clock_GetDivRate>
		break;
1a0014b4:	e005      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0014b6:	2104      	movs	r1, #4
1a0014b8:	f000 f88c 	bl	1a0015d4 <Chip_Clock_GetDivRate>
		break;
1a0014bc:	e001      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a0014be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a0014c2:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a0014c4:	4803      	ldr	r0, [pc, #12]	; (1a0014d4 <Chip_Clock_GetClockInputHz+0xa4>)
1a0014c6:	e7fc      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a0014c8:	4806      	ldr	r0, [pc, #24]	; (1a0014e4 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a0014ca:	e7fa      	b.n	1a0014c2 <Chip_Clock_GetClockInputHz+0x92>
1a0014cc:	00b71b00 	.word	0x00b71b00
1a0014d0:	40043000 	.word	0x40043000
1a0014d4:	017d7840 	.word	0x017d7840
1a0014d8:	1a00355c 	.word	0x1a00355c
1a0014dc:	1a003588 	.word	0x1a003588
1a0014e0:	100000ec 	.word	0x100000ec
1a0014e4:	02faf080 	.word	0x02faf080

1a0014e8 <Chip_Clock_CalcMainPLLValue>:
{
1a0014e8:	b538      	push	{r3, r4, r5, lr}
1a0014ea:	4605      	mov	r5, r0
1a0014ec:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0014ee:	7908      	ldrb	r0, [r1, #4]
1a0014f0:	f7ff ff9e 	bl	1a001430 <Chip_Clock_GetClockInputHz>
1a0014f4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0014f6:	4b19      	ldr	r3, [pc, #100]	; (1a00155c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0014f8:	442b      	add	r3, r5
1a0014fa:	4a19      	ldr	r2, [pc, #100]	; (1a001560 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0014fc:	4293      	cmp	r3, r2
1a0014fe:	d821      	bhi.n	1a001544 <Chip_Clock_CalcMainPLLValue+0x5c>
1a001500:	b318      	cbz	r0, 1a00154a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a001502:	2380      	movs	r3, #128	; 0x80
1a001504:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a001506:	2300      	movs	r3, #0
1a001508:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a00150a:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a00150c:	fbb5 f3f0 	udiv	r3, r5, r0
1a001510:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001512:	4a14      	ldr	r2, [pc, #80]	; (1a001564 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001514:	4295      	cmp	r5, r2
1a001516:	d903      	bls.n	1a001520 <Chip_Clock_CalcMainPLLValue+0x38>
1a001518:	fb03 f000 	mul.w	r0, r3, r0
1a00151c:	42a8      	cmp	r0, r5
1a00151e:	d007      	beq.n	1a001530 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001520:	4621      	mov	r1, r4
1a001522:	4628      	mov	r0, r5
1a001524:	f7ff fe96 	bl	1a001254 <pll_get_frac>
		if (!ppll->nsel) {
1a001528:	68a3      	ldr	r3, [r4, #8]
1a00152a:	b18b      	cbz	r3, 1a001550 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a00152c:	3b01      	subs	r3, #1
1a00152e:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a001530:	6923      	ldr	r3, [r4, #16]
1a001532:	b183      	cbz	r3, 1a001556 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a001534:	68e2      	ldr	r2, [r4, #12]
1a001536:	b10a      	cbz	r2, 1a00153c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a001538:	3a01      	subs	r2, #1
1a00153a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a00153c:	3b01      	subs	r3, #1
1a00153e:	6123      	str	r3, [r4, #16]
	return 0;
1a001540:	2000      	movs	r0, #0
}
1a001542:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a001544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001548:	e7fb      	b.n	1a001542 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00154a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00154e:	e7f8      	b.n	1a001542 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a001550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001554:	e7f5      	b.n	1a001542 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a001556:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00155a:	e7f2      	b.n	1a001542 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00155c:	ff6b3a10 	.word	0xff6b3a10
1a001560:	0b940510 	.word	0x0b940510
1a001564:	094c5eff 	.word	0x094c5eff

1a001568 <Chip_Clock_GetMainPLLHz>:
{
1a001568:	b530      	push	{r4, r5, lr}
1a00156a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00156c:	4d17      	ldr	r5, [pc, #92]	; (1a0015cc <Chip_Clock_GetMainPLLHz+0x64>)
1a00156e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001570:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001574:	f7ff ff5c 	bl	1a001430 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a001578:	4b15      	ldr	r3, [pc, #84]	; (1a0015d0 <Chip_Clock_GetMainPLLHz+0x68>)
1a00157a:	681b      	ldr	r3, [r3, #0]
1a00157c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00157e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a001580:	f013 0f01 	tst.w	r3, #1
1a001584:	d01f      	beq.n	1a0015c6 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a001586:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00158a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00158e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a001592:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a001596:	3301      	adds	r3, #1
	n = nsel + 1;
1a001598:	3201      	adds	r2, #1
	p = ptab[psel];
1a00159a:	f10d 0c08 	add.w	ip, sp, #8
1a00159e:	4461      	add	r1, ip
1a0015a0:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a0015a4:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0015a8:	d108      	bne.n	1a0015bc <Chip_Clock_GetMainPLLHz+0x54>
1a0015aa:	b93d      	cbnz	r5, 1a0015bc <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a0015ac:	0049      	lsls	r1, r1, #1
1a0015ae:	fbb3 f3f1 	udiv	r3, r3, r1
1a0015b2:	fbb0 f0f2 	udiv	r0, r0, r2
1a0015b6:	fb00 f003 	mul.w	r0, r0, r3
1a0015ba:	e005      	b.n	1a0015c8 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a0015bc:	fbb0 f0f2 	udiv	r0, r0, r2
1a0015c0:	fb03 f000 	mul.w	r0, r3, r0
1a0015c4:	e000      	b.n	1a0015c8 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a0015c6:	2000      	movs	r0, #0
}
1a0015c8:	b003      	add	sp, #12
1a0015ca:	bd30      	pop	{r4, r5, pc}
1a0015cc:	40050000 	.word	0x40050000
1a0015d0:	1a003614 	.word	0x1a003614

1a0015d4 <Chip_Clock_GetDivRate>:
{
1a0015d4:	b538      	push	{r3, r4, r5, lr}
1a0015d6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0015d8:	4608      	mov	r0, r1
1a0015da:	f7ff ff0d 	bl	1a0013f8 <Chip_Clock_GetDividerSource>
1a0015de:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0015e0:	4620      	mov	r0, r4
1a0015e2:	f7ff ff17 	bl	1a001414 <Chip_Clock_GetDividerDivisor>
1a0015e6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0015e8:	4628      	mov	r0, r5
1a0015ea:	f7ff ff21 	bl	1a001430 <Chip_Clock_GetClockInputHz>
1a0015ee:	3401      	adds	r4, #1
}
1a0015f0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0015f4:	bd38      	pop	{r3, r4, r5, pc}
1a0015f6:	Address 0x000000001a0015f6 is out of bounds.


1a0015f8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0015f8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0015fa:	f100 0416 	add.w	r4, r0, #22
1a0015fe:	00a4      	lsls	r4, r4, #2
1a001600:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a001604:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a001608:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a00160a:	281b      	cmp	r0, #27
1a00160c:	d813      	bhi.n	1a001636 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a00160e:	2911      	cmp	r1, #17
1a001610:	d01a      	beq.n	1a001648 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a001612:	4d0e      	ldr	r5, [pc, #56]	; (1a00164c <Chip_Clock_SetBaseClock+0x54>)
1a001614:	4025      	ands	r5, r4

			if (autoblocken) {
1a001616:	b10a      	cbz	r2, 1a00161c <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a001618:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a00161c:	b10b      	cbz	r3, 1a001622 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a00161e:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001622:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a001626:	3016      	adds	r0, #22
1a001628:	0080      	lsls	r0, r0, #2
1a00162a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00162e:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001632:	6045      	str	r5, [r0, #4]
1a001634:	e008      	b.n	1a001648 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001636:	f044 0401 	orr.w	r4, r4, #1
1a00163a:	3016      	adds	r0, #22
1a00163c:	0080      	lsls	r0, r0, #2
1a00163e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a001642:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001646:	6044      	str	r4, [r0, #4]
	}
}
1a001648:	bc30      	pop	{r4, r5}
1a00164a:	4770      	bx	lr
1a00164c:	e0fff7fe 	.word	0xe0fff7fe

1a001650 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a001650:	281b      	cmp	r0, #27
1a001652:	d80c      	bhi.n	1a00166e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001654:	3016      	adds	r0, #22
1a001656:	0080      	lsls	r0, r0, #2
1a001658:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00165c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a001660:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a001662:	f010 0f01 	tst.w	r0, #1
1a001666:	d104      	bne.n	1a001672 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a001668:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00166c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00166e:	2011      	movs	r0, #17
1a001670:	4770      	bx	lr
		return CLKINPUT_PD;
1a001672:	2011      	movs	r0, #17
}
1a001674:	4770      	bx	lr

1a001676 <Chip_Clock_GetBaseClocktHz>:
{
1a001676:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001678:	f7ff ffea 	bl	1a001650 <Chip_Clock_GetBaseClock>
1a00167c:	f7ff fed8 	bl	1a001430 <Chip_Clock_GetClockInputHz>
}
1a001680:	bd08      	pop	{r3, pc}
1a001682:	Address 0x000000001a001682 is out of bounds.


1a001684 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a001684:	b969      	cbnz	r1, 1a0016a2 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a001686:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a001688:	b10a      	cbz	r2, 1a00168e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00168a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00168e:	2b02      	cmp	r3, #2
1a001690:	d009      	beq.n	1a0016a6 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001692:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001696:	d209      	bcs.n	1a0016ac <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001698:	3020      	adds	r0, #32
1a00169a:	4b07      	ldr	r3, [pc, #28]	; (1a0016b8 <Chip_Clock_EnableOpts+0x34>)
1a00169c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a0016a0:	4770      	bx	lr
		reg |= (1 << 1);
1a0016a2:	2103      	movs	r1, #3
1a0016a4:	e7f0      	b.n	1a001688 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a0016a6:	f041 0120 	orr.w	r1, r1, #32
1a0016aa:	e7f2      	b.n	1a001692 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a0016ac:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0016b0:	4b02      	ldr	r3, [pc, #8]	; (1a0016bc <Chip_Clock_EnableOpts+0x38>)
1a0016b2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a0016b6:	4770      	bx	lr
1a0016b8:	40051000 	.word	0x40051000
1a0016bc:	40052000 	.word	0x40052000

1a0016c0 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a0016c0:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0016c4:	d208      	bcs.n	1a0016d8 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0016c6:	4a09      	ldr	r2, [pc, #36]	; (1a0016ec <Chip_Clock_Enable+0x2c>)
1a0016c8:	3020      	adds	r0, #32
1a0016ca:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0016ce:	f043 0301 	orr.w	r3, r3, #1
1a0016d2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0016d6:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0016d8:	4a05      	ldr	r2, [pc, #20]	; (1a0016f0 <Chip_Clock_Enable+0x30>)
1a0016da:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0016de:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0016e2:	f043 0301 	orr.w	r3, r3, #1
1a0016e6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0016ea:	4770      	bx	lr
1a0016ec:	40051000 	.word	0x40051000
1a0016f0:	40052000 	.word	0x40052000

1a0016f4 <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0016f4:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0016f6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0016fa:	d309      	bcc.n	1a001710 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0016fc:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a001700:	4a0d      	ldr	r2, [pc, #52]	; (1a001738 <Chip_Clock_GetRate+0x44>)
1a001702:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a001706:	f014 0f01 	tst.w	r4, #1
1a00170a:	d107      	bne.n	1a00171c <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a00170c:	2000      	movs	r0, #0
	}

	return rate;
}
1a00170e:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a001710:	f100 0320 	add.w	r3, r0, #32
1a001714:	4a09      	ldr	r2, [pc, #36]	; (1a00173c <Chip_Clock_GetRate+0x48>)
1a001716:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a00171a:	e7f4      	b.n	1a001706 <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a00171c:	f7ff fe20 	bl	1a001360 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a001720:	f7ff ffa9 	bl	1a001676 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a001724:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a001728:	d103      	bne.n	1a001732 <Chip_Clock_GetRate+0x3e>
			div = 1;
1a00172a:	2301      	movs	r3, #1
		rate = rate / div;
1a00172c:	fbb0 f0f3 	udiv	r0, r0, r3
1a001730:	e7ed      	b.n	1a00170e <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a001732:	2302      	movs	r3, #2
1a001734:	e7fa      	b.n	1a00172c <Chip_Clock_GetRate+0x38>
1a001736:	bf00      	nop
1a001738:	40052000 	.word	0x40052000
1a00173c:	40051000 	.word	0x40051000

1a001740 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001740:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a001742:	2069      	movs	r0, #105	; 0x69
1a001744:	f7ff ffd6 	bl	1a0016f4 <Chip_Clock_GetRate>
1a001748:	4b01      	ldr	r3, [pc, #4]	; (1a001750 <SystemCoreClockUpdate+0x10>)
1a00174a:	6018      	str	r0, [r3, #0]
}
1a00174c:	bd08      	pop	{r3, pc}
1a00174e:	bf00      	nop
1a001750:	10000110 	.word	0x10000110

1a001754 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001754:	b570      	push	{r4, r5, r6, lr}
1a001756:	b08a      	sub	sp, #40	; 0x28
1a001758:	4605      	mov	r5, r0
1a00175a:	460e      	mov	r6, r1
1a00175c:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a00175e:	f242 7310 	movw	r3, #10000	; 0x2710
1a001762:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001764:	2806      	cmp	r0, #6
1a001766:	d018      	beq.n	1a00179a <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a001768:	2300      	movs	r3, #0
1a00176a:	2201      	movs	r2, #1
1a00176c:	4629      	mov	r1, r5
1a00176e:	2004      	movs	r0, #4
1a001770:	f7ff ff42 	bl	1a0015f8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001774:	4a49      	ldr	r2, [pc, #292]	; (1a00189c <Chip_SetupCoreClock+0x148>)
1a001776:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a001778:	f043 0301 	orr.w	r3, r3, #1
1a00177c:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a00177e:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001782:	a901      	add	r1, sp, #4
1a001784:	4630      	mov	r0, r6
1a001786:	f7ff feaf 	bl	1a0014e8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00178a:	4b45      	ldr	r3, [pc, #276]	; (1a0018a0 <Chip_SetupCoreClock+0x14c>)
1a00178c:	429e      	cmp	r6, r3
1a00178e:	d916      	bls.n	1a0017be <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001790:	9b01      	ldr	r3, [sp, #4]
1a001792:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001796:	d003      	beq.n	1a0017a0 <Chip_SetupCoreClock+0x4c>
1a001798:	e7fe      	b.n	1a001798 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00179a:	f7ff fe07 	bl	1a0013ac <Chip_Clock_EnableCrystal>
1a00179e:	e7e3      	b.n	1a001768 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a0017a0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0017a4:	d005      	beq.n	1a0017b2 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a0017a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0017aa:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a0017ac:	2500      	movs	r5, #0
			direct = 1;
1a0017ae:	2601      	movs	r6, #1
1a0017b0:	e007      	b.n	1a0017c2 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a0017b2:	9b04      	ldr	r3, [sp, #16]
1a0017b4:	3301      	adds	r3, #1
1a0017b6:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0017b8:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0017ba:	2600      	movs	r6, #0
1a0017bc:	e001      	b.n	1a0017c2 <Chip_SetupCoreClock+0x6e>
1a0017be:	2500      	movs	r5, #0
1a0017c0:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0017c2:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0017c6:	9b01      	ldr	r3, [sp, #4]
1a0017c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0017cc:	9a05      	ldr	r2, [sp, #20]
1a0017ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0017d2:	9a03      	ldr	r2, [sp, #12]
1a0017d4:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0017d8:	9a04      	ldr	r2, [sp, #16]
1a0017da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0017de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0017e2:	4a2e      	ldr	r2, [pc, #184]	; (1a00189c <Chip_SetupCoreClock+0x148>)
1a0017e4:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0017e6:	4b2d      	ldr	r3, [pc, #180]	; (1a00189c <Chip_SetupCoreClock+0x148>)
1a0017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0017ea:	f013 0f01 	tst.w	r3, #1
1a0017ee:	d0fa      	beq.n	1a0017e6 <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0017f0:	2300      	movs	r3, #0
1a0017f2:	2201      	movs	r2, #1
1a0017f4:	2109      	movs	r1, #9
1a0017f6:	2004      	movs	r0, #4
1a0017f8:	f7ff fefe 	bl	1a0015f8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0017fc:	b1fe      	cbz	r6, 1a00183e <Chip_SetupCoreClock+0xea>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0017fe:	f242 7310 	movw	r3, #10000	; 0x2710
1a001802:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001804:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001806:	1e5a      	subs	r2, r3, #1
1a001808:	9209      	str	r2, [sp, #36]	; 0x24
1a00180a:	2b00      	cmp	r3, #0
1a00180c:	d1fa      	bne.n	1a001804 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a00180e:	9b01      	ldr	r3, [sp, #4]
1a001810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001814:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001816:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00181a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00181e:	9a05      	ldr	r2, [sp, #20]
1a001820:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001824:	9a03      	ldr	r2, [sp, #12]
1a001826:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00182a:	9a04      	ldr	r2, [sp, #16]
1a00182c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001830:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001834:	4a19      	ldr	r2, [pc, #100]	; (1a00189c <Chip_SetupCoreClock+0x148>)
1a001836:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a001838:	b36c      	cbz	r4, 1a001896 <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00183a:	2400      	movs	r4, #0
1a00183c:	e029      	b.n	1a001892 <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a00183e:	2d00      	cmp	r5, #0
1a001840:	d0fa      	beq.n	1a001838 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001842:	f242 7310 	movw	r3, #10000	; 0x2710
1a001846:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a001848:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00184a:	1e5a      	subs	r2, r3, #1
1a00184c:	9209      	str	r2, [sp, #36]	; 0x24
1a00184e:	2b00      	cmp	r3, #0
1a001850:	d1fa      	bne.n	1a001848 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a001852:	9b04      	ldr	r3, [sp, #16]
1a001854:	1e5a      	subs	r2, r3, #1
1a001856:	9204      	str	r2, [sp, #16]
1a001858:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a00185c:	9b01      	ldr	r3, [sp, #4]
1a00185e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001862:	9905      	ldr	r1, [sp, #20]
1a001864:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001868:	9903      	ldr	r1, [sp, #12]
1a00186a:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a00186e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001872:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001876:	4a09      	ldr	r2, [pc, #36]	; (1a00189c <Chip_SetupCoreClock+0x148>)
1a001878:	6453      	str	r3, [r2, #68]	; 0x44
1a00187a:	e7dd      	b.n	1a001838 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00187c:	4809      	ldr	r0, [pc, #36]	; (1a0018a4 <Chip_SetupCoreClock+0x150>)
1a00187e:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001882:	78cb      	ldrb	r3, [r1, #3]
1a001884:	788a      	ldrb	r2, [r1, #2]
1a001886:	7849      	ldrb	r1, [r1, #1]
1a001888:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00188c:	f7ff feb4 	bl	1a0015f8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001890:	3401      	adds	r4, #1
1a001892:	2c11      	cmp	r4, #17
1a001894:	d9f2      	bls.n	1a00187c <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001896:	b00a      	add	sp, #40	; 0x28
1a001898:	bd70      	pop	{r4, r5, r6, pc}
1a00189a:	bf00      	nop
1a00189c:	40050000 	.word	0x40050000
1a0018a0:	068e7780 	.word	0x068e7780
1a0018a4:	1a00368c 	.word	0x1a00368c

1a0018a8 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a0018a8:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a0018aa:	6843      	ldr	r3, [r0, #4]
1a0018ac:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0018b0:	2b30      	cmp	r3, #48	; 0x30
1a0018b2:	d04a      	beq.n	1a00194a <Chip_I2CM_XferHandler+0xa2>
1a0018b4:	d90f      	bls.n	1a0018d6 <Chip_I2CM_XferHandler+0x2e>
1a0018b6:	2b48      	cmp	r3, #72	; 0x48
1a0018b8:	d06a      	beq.n	1a001990 <Chip_I2CM_XferHandler+0xe8>
1a0018ba:	d83a      	bhi.n	1a001932 <Chip_I2CM_XferHandler+0x8a>
1a0018bc:	2b38      	cmp	r3, #56	; 0x38
1a0018be:	d06b      	beq.n	1a001998 <Chip_I2CM_XferHandler+0xf0>
1a0018c0:	2b40      	cmp	r3, #64	; 0x40
1a0018c2:	d13e      	bne.n	1a001942 <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a0018c4:	88ca      	ldrh	r2, [r1, #6]
1a0018c6:	2a01      	cmp	r2, #1
1a0018c8:	d95a      	bls.n	1a001980 <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a0018ca:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a0018cc:	b9b2      	cbnz	r2, 1a0018fc <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a0018ce:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0018d0:	f023 0310 	bic.w	r3, r3, #16
1a0018d4:	e012      	b.n	1a0018fc <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0018d6:	2b10      	cmp	r3, #16
1a0018d8:	d007      	beq.n	1a0018ea <Chip_I2CM_XferHandler+0x42>
1a0018da:	d81c      	bhi.n	1a001916 <Chip_I2CM_XferHandler+0x6e>
1a0018dc:	b91b      	cbnz	r3, 1a0018e6 <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a0018de:	2303      	movs	r3, #3
1a0018e0:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0018e2:	232c      	movs	r3, #44	; 0x2c
        break;
1a0018e4:	e00a      	b.n	1a0018fc <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0018e6:	2b08      	cmp	r3, #8
1a0018e8:	d12b      	bne.n	1a001942 <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a0018ea:	780a      	ldrb	r2, [r1, #0]
1a0018ec:	888b      	ldrh	r3, [r1, #4]
1a0018ee:	fab3 f383 	clz	r3, r3
1a0018f2:	095b      	lsrs	r3, r3, #5
1a0018f4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a0018f8:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0018fa:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a0018fc:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a001900:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a001902:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a001906:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a001908:	8848      	ldrh	r0, [r1, #2]
1a00190a:	38ff      	subs	r0, #255	; 0xff
1a00190c:	bf18      	it	ne
1a00190e:	2001      	movne	r0, #1
}
1a001910:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001914:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001916:	2b20      	cmp	r3, #32
1a001918:	d017      	beq.n	1a00194a <Chip_I2CM_XferHandler+0xa2>
1a00191a:	2b28      	cmp	r3, #40	; 0x28
1a00191c:	d001      	beq.n	1a001922 <Chip_I2CM_XferHandler+0x7a>
1a00191e:	2b18      	cmp	r3, #24
1a001920:	d10f      	bne.n	1a001942 <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a001922:	888b      	ldrh	r3, [r1, #4]
1a001924:	b9cb      	cbnz	r3, 1a00195a <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a001926:	88cb      	ldrh	r3, [r1, #6]
1a001928:	2b00      	cmp	r3, #0
1a00192a:	d139      	bne.n	1a0019a0 <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a00192c:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a00192e:	232c      	movs	r3, #44	; 0x2c
1a001930:	e7e4      	b.n	1a0018fc <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a001932:	2b58      	cmp	r3, #88	; 0x58
1a001934:	d01b      	beq.n	1a00196e <Chip_I2CM_XferHandler+0xc6>
1a001936:	2bf8      	cmp	r3, #248	; 0xf8
1a001938:	d101      	bne.n	1a00193e <Chip_I2CM_XferHandler+0x96>
      return 0;
1a00193a:	2000      	movs	r0, #0
1a00193c:	e7e8      	b.n	1a001910 <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a00193e:	2b50      	cmp	r3, #80	; 0x50
1a001940:	d015      	beq.n	1a00196e <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a001942:	2301      	movs	r3, #1
1a001944:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001946:	232c      	movs	r3, #44	; 0x2c
        break;
1a001948:	e7d8      	b.n	1a0018fc <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a00194a:	784b      	ldrb	r3, [r1, #1]
1a00194c:	f013 0f01 	tst.w	r3, #1
1a001950:	d1e7      	bne.n	1a001922 <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a001952:	2302      	movs	r3, #2
1a001954:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a001956:	232c      	movs	r3, #44	; 0x2c
			break;
1a001958:	e7d0      	b.n	1a0018fc <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a00195a:	688b      	ldr	r3, [r1, #8]
1a00195c:	1c5a      	adds	r2, r3, #1
1a00195e:	608a      	str	r2, [r1, #8]
1a001960:	781b      	ldrb	r3, [r3, #0]
1a001962:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a001964:	888b      	ldrh	r3, [r1, #4]
1a001966:	3b01      	subs	r3, #1
1a001968:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a00196a:	233c      	movs	r3, #60	; 0x3c
1a00196c:	e7c6      	b.n	1a0018fc <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a00196e:	6882      	ldr	r2, [r0, #8]
1a001970:	68cb      	ldr	r3, [r1, #12]
1a001972:	1c5c      	adds	r4, r3, #1
1a001974:	60cc      	str	r4, [r1, #12]
1a001976:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a001978:	88cb      	ldrh	r3, [r1, #6]
1a00197a:	3b01      	subs	r3, #1
1a00197c:	80cb      	strh	r3, [r1, #6]
1a00197e:	e7a1      	b.n	1a0018c4 <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a001980:	784b      	ldrb	r3, [r1, #1]
1a001982:	f013 0f02 	tst.w	r3, #2
1a001986:	d101      	bne.n	1a00198c <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a001988:	233c      	movs	r3, #60	; 0x3c
1a00198a:	e79f      	b.n	1a0018cc <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a00198c:	2338      	movs	r3, #56	; 0x38
1a00198e:	e79d      	b.n	1a0018cc <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a001990:	2304      	movs	r3, #4
1a001992:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a001994:	232c      	movs	r3, #44	; 0x2c
		break;
1a001996:	e7b1      	b.n	1a0018fc <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a001998:	2305      	movs	r3, #5
1a00199a:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a00199c:	233c      	movs	r3, #60	; 0x3c
		break;
1a00199e:	e7ad      	b.n	1a0018fc <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a0019a0:	231c      	movs	r3, #28
1a0019a2:	e7ab      	b.n	1a0018fc <Chip_I2CM_XferHandler+0x54>

1a0019a4 <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a0019a4:	23ff      	movs	r3, #255	; 0xff
1a0019a6:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a0019a8:	232c      	movs	r3, #44	; 0x2c
1a0019aa:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a0019ac:	2360      	movs	r3, #96	; 0x60
1a0019ae:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a0019b0:	4770      	bx	lr

1a0019b2 <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a0019b2:	b538      	push	{r3, r4, r5, lr}
1a0019b4:	4604      	mov	r4, r0
1a0019b6:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a0019b8:	f7ff fff4 	bl	1a0019a4 <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a0019bc:	2000      	movs	r0, #0

	while (ret == 0) {
1a0019be:	e007      	b.n	1a0019d0 <Chip_I2CM_XferBlocking+0x1e>
	return pI2C->CONSET & I2C_CON_SI;
1a0019c0:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a0019c2:	f013 0f08 	tst.w	r3, #8
1a0019c6:	d0fb      	beq.n	1a0019c0 <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a0019c8:	4629      	mov	r1, r5
1a0019ca:	4620      	mov	r0, r4
1a0019cc:	f7ff ff6c 	bl	1a0018a8 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a0019d0:	2800      	cmp	r0, #0
1a0019d2:	d0f5      	beq.n	1a0019c0 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a0019d4:	bd38      	pop	{r3, r4, r5, pc}

1a0019d6 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a0019d6:	4770      	bx	lr

1a0019d8 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a0019d8:	2901      	cmp	r1, #1
1a0019da:	d000      	beq.n	1a0019de <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a0019dc:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a0019de:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a0019e2:	0082      	lsls	r2, r0, #2
1a0019e4:	4b03      	ldr	r3, [pc, #12]	; (1a0019f4 <Chip_I2C_EventHandler+0x1c>)
1a0019e6:	4413      	add	r3, r2
1a0019e8:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a0019ea:	7d13      	ldrb	r3, [r2, #20]
1a0019ec:	b2db      	uxtb	r3, r3
1a0019ee:	2b04      	cmp	r3, #4
1a0019f0:	d0fb      	beq.n	1a0019ea <Chip_I2C_EventHandler+0x12>
1a0019f2:	e7f3      	b.n	1a0019dc <Chip_I2C_EventHandler+0x4>
1a0019f4:	10000000 	.word	0x10000000

1a0019f8 <handleMasterXferState>:
{
1a0019f8:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a0019fa:	6843      	ldr	r3, [r0, #4]
1a0019fc:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a001a00:	2b58      	cmp	r3, #88	; 0x58
1a001a02:	d87e      	bhi.n	1a001b02 <handleMasterXferState+0x10a>
1a001a04:	e8df f003 	tbb	[pc, r3]
1a001a08:	7d7d7d79 	.word	0x7d7d7d79
1a001a0c:	7d7d7d7d 	.word	0x7d7d7d7d
1a001a10:	7d7d7d2f 	.word	0x7d7d7d2f
1a001a14:	7d7d7d7d 	.word	0x7d7d7d7d
1a001a18:	7d7d7d2f 	.word	0x7d7d7d2f
1a001a1c:	7d7d7d7d 	.word	0x7d7d7d7d
1a001a20:	7d7d7d39 	.word	0x7d7d7d39
1a001a24:	7d7d7d7d 	.word	0x7d7d7d7d
1a001a28:	7d7d7d6d 	.word	0x7d7d7d6d
1a001a2c:	7d7d7d7d 	.word	0x7d7d7d7d
1a001a30:	7d7d7d39 	.word	0x7d7d7d39
1a001a34:	7d7d7d7d 	.word	0x7d7d7d7d
1a001a38:	7d7d7d71 	.word	0x7d7d7d71
1a001a3c:	7d7d7d7d 	.word	0x7d7d7d7d
1a001a40:	7d7d7d75 	.word	0x7d7d7d75
1a001a44:	7d7d7d7d 	.word	0x7d7d7d7d
1a001a48:	7d7d7d6b 	.word	0x7d7d7d6b
1a001a4c:	7d7d7d7d 	.word	0x7d7d7d7d
1a001a50:	7d7d7d6d 	.word	0x7d7d7d6d
1a001a54:	7d7d7d7d 	.word	0x7d7d7d7d
1a001a58:	7d7d7d2d 	.word	0x7d7d7d2d
1a001a5c:	7d7d7d7d 	.word	0x7d7d7d7d
1a001a60:	4f          	.byte	0x4f
1a001a61:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a001a62:	233c      	movs	r3, #60	; 0x3c
1a001a64:	e020      	b.n	1a001aa8 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a001a66:	780a      	ldrb	r2, [r1, #0]
1a001a68:	688b      	ldr	r3, [r1, #8]
1a001a6a:	fab3 f383 	clz	r3, r3
1a001a6e:	095b      	lsrs	r3, r3, #5
1a001a70:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a001a74:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a001a76:	233c      	movs	r3, #60	; 0x3c
		break;
1a001a78:	e023      	b.n	1a001ac2 <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a001a7a:	688b      	ldr	r3, [r1, #8]
1a001a7c:	b94b      	cbnz	r3, 1a001a92 <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a001a7e:	690b      	ldr	r3, [r1, #16]
1a001a80:	b123      	cbz	r3, 1a001a8c <handleMasterXferState+0x94>
1a001a82:	f06f 0320 	mvn.w	r3, #32
1a001a86:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a001a8a:	e01a      	b.n	1a001ac2 <handleMasterXferState+0xca>
1a001a8c:	f06f 0310 	mvn.w	r3, #16
1a001a90:	e7f9      	b.n	1a001a86 <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a001a92:	684b      	ldr	r3, [r1, #4]
1a001a94:	1c5a      	adds	r2, r3, #1
1a001a96:	604a      	str	r2, [r1, #4]
1a001a98:	781b      	ldrb	r3, [r3, #0]
1a001a9a:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a001a9c:	688b      	ldr	r3, [r1, #8]
1a001a9e:	3b01      	subs	r3, #1
1a001aa0:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a001aa2:	233c      	movs	r3, #60	; 0x3c
1a001aa4:	e00d      	b.n	1a001ac2 <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a001aa6:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a001aa8:	6884      	ldr	r4, [r0, #8]
1a001aaa:	68ca      	ldr	r2, [r1, #12]
1a001aac:	1c55      	adds	r5, r2, #1
1a001aae:	60cd      	str	r5, [r1, #12]
1a001ab0:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a001ab2:	690a      	ldr	r2, [r1, #16]
1a001ab4:	3a01      	subs	r2, #1
1a001ab6:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a001ab8:	690a      	ldr	r2, [r1, #16]
1a001aba:	2a01      	cmp	r2, #1
1a001abc:	dd01      	ble.n	1a001ac2 <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a001abe:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a001ac2:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a001ac6:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a001ac8:	f023 0210 	bic.w	r2, r3, #16
1a001acc:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a001ace:	f013 0f10 	tst.w	r3, #16
1a001ad2:	d018      	beq.n	1a001b06 <handleMasterXferState+0x10e>
1a001ad4:	7d0b      	ldrb	r3, [r1, #20]
1a001ad6:	2b02      	cmp	r3, #2
1a001ad8:	d015      	beq.n	1a001b06 <handleMasterXferState+0x10e>
	return 1;
1a001ada:	2001      	movs	r0, #1
1a001adc:	e017      	b.n	1a001b0e <handleMasterXferState+0x116>
	uint32_t cclr = I2C_CON_FLAGS;
1a001ade:	233c      	movs	r3, #60	; 0x3c
1a001ae0:	e7ea      	b.n	1a001ab8 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a001ae2:	2305      	movs	r3, #5
1a001ae4:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a001ae6:	232c      	movs	r3, #44	; 0x2c
		break;
1a001ae8:	e7eb      	b.n	1a001ac2 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a001aea:	2301      	movs	r3, #1
1a001aec:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a001aee:	232c      	movs	r3, #44	; 0x2c
		break;
1a001af0:	e7e7      	b.n	1a001ac2 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a001af2:	2302      	movs	r3, #2
1a001af4:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a001af6:	233c      	movs	r3, #60	; 0x3c
		break;
1a001af8:	e7e3      	b.n	1a001ac2 <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a001afa:	2303      	movs	r3, #3
1a001afc:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a001afe:	232c      	movs	r3, #44	; 0x2c
1a001b00:	e7df      	b.n	1a001ac2 <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a001b02:	233c      	movs	r3, #60	; 0x3c
1a001b04:	e7dd      	b.n	1a001ac2 <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a001b06:	7d0b      	ldrb	r3, [r1, #20]
1a001b08:	2b04      	cmp	r3, #4
1a001b0a:	d002      	beq.n	1a001b12 <handleMasterXferState+0x11a>
		return 0;
1a001b0c:	2000      	movs	r0, #0
}
1a001b0e:	bc30      	pop	{r4, r5}
1a001b10:	4770      	bx	lr
			xfer->status = I2C_STATUS_DONE;
1a001b12:	2000      	movs	r0, #0
1a001b14:	7508      	strb	r0, [r1, #20]
1a001b16:	e7fa      	b.n	1a001b0e <handleMasterXferState+0x116>

1a001b18 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a001b18:	b570      	push	{r4, r5, r6, lr}
1a001b1a:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001b1c:	4e06      	ldr	r6, [pc, #24]	; (1a001b38 <Chip_I2C_Init+0x20>)
1a001b1e:	00c4      	lsls	r4, r0, #3
1a001b20:	1a22      	subs	r2, r4, r0
1a001b22:	0093      	lsls	r3, r2, #2
1a001b24:	4433      	add	r3, r6
1a001b26:	8898      	ldrh	r0, [r3, #4]
1a001b28:	f7ff fdca 	bl	1a0016c0 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001b2c:	1b64      	subs	r4, r4, r5
1a001b2e:	00a3      	lsls	r3, r4, #2
1a001b30:	58f3      	ldr	r3, [r6, r3]
1a001b32:	226c      	movs	r2, #108	; 0x6c
1a001b34:	619a      	str	r2, [r3, #24]
}
1a001b36:	bd70      	pop	{r4, r5, r6, pc}
1a001b38:	10000000 	.word	0x10000000

1a001b3c <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001b40:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a001b42:	4e0b      	ldr	r6, [pc, #44]	; (1a001b70 <Chip_I2C_SetClockRate+0x34>)
1a001b44:	00c5      	lsls	r5, r0, #3
1a001b46:	1a2b      	subs	r3, r5, r0
1a001b48:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a001b4c:	eb06 0308 	add.w	r3, r6, r8
1a001b50:	8898      	ldrh	r0, [r3, #4]
1a001b52:	f7ff fdcf 	bl	1a0016f4 <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a001b56:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a001b5a:	f856 3008 	ldr.w	r3, [r6, r8]
1a001b5e:	0842      	lsrs	r2, r0, #1
1a001b60:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a001b62:	f856 3008 	ldr.w	r3, [r6, r8]
1a001b66:	691a      	ldr	r2, [r3, #16]
1a001b68:	1a80      	subs	r0, r0, r2
1a001b6a:	6158      	str	r0, [r3, #20]
}
1a001b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001b70:	10000000 	.word	0x10000000

1a001b74 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a001b74:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001b78:	009a      	lsls	r2, r3, #2
1a001b7a:	4b09      	ldr	r3, [pc, #36]	; (1a001ba0 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a001b7c:	4413      	add	r3, r2
1a001b7e:	691b      	ldr	r3, [r3, #16]
1a001b80:	b153      	cbz	r3, 1a001b98 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a001b82:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001b86:	0082      	lsls	r2, r0, #2
1a001b88:	4b05      	ldr	r3, [pc, #20]	; (1a001ba0 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a001b8a:	4413      	add	r3, r2
1a001b8c:	6898      	ldr	r0, [r3, #8]
}
1a001b8e:	4288      	cmp	r0, r1
1a001b90:	bf14      	ite	ne
1a001b92:	2000      	movne	r0, #0
1a001b94:	2001      	moveq	r0, #1
1a001b96:	4770      	bx	lr
		iic->mEvent = event;
1a001b98:	4b01      	ldr	r3, [pc, #4]	; (1a001ba0 <Chip_I2C_SetMasterEventHandler+0x2c>)
1a001b9a:	4413      	add	r3, r2
1a001b9c:	6099      	str	r1, [r3, #8]
1a001b9e:	e7f0      	b.n	1a001b82 <Chip_I2C_SetMasterEventHandler+0xe>
1a001ba0:	10000000 	.word	0x10000000

1a001ba4 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a001ba4:	b510      	push	{r4, lr}
1a001ba6:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a001ba8:	4809      	ldr	r0, [pc, #36]	; (1a001bd0 <Chip_I2C_MasterStateHandler+0x2c>)
1a001baa:	00e3      	lsls	r3, r4, #3
1a001bac:	1b1b      	subs	r3, r3, r4
1a001bae:	009a      	lsls	r2, r3, #2
1a001bb0:	1883      	adds	r3, r0, r2
1a001bb2:	6919      	ldr	r1, [r3, #16]
1a001bb4:	5880      	ldr	r0, [r0, r2]
1a001bb6:	f7ff ff1f 	bl	1a0019f8 <handleMasterXferState>
1a001bba:	b940      	cbnz	r0, 1a001bce <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a001bbc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a001bc0:	009a      	lsls	r2, r3, #2
1a001bc2:	4b03      	ldr	r3, [pc, #12]	; (1a001bd0 <Chip_I2C_MasterStateHandler+0x2c>)
1a001bc4:	4413      	add	r3, r2
1a001bc6:	689b      	ldr	r3, [r3, #8]
1a001bc8:	2102      	movs	r1, #2
1a001bca:	4620      	mov	r0, r4
1a001bcc:	4798      	blx	r3
	}
}
1a001bce:	bd10      	pop	{r4, pc}
1a001bd0:	10000000 	.word	0x10000000

1a001bd4 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a001bd4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a001bd8:	0083      	lsls	r3, r0, #2
1a001bda:	4a03      	ldr	r2, [pc, #12]	; (1a001be8 <Chip_I2C_IsStateChanged+0x14>)
1a001bdc:	58d3      	ldr	r3, [r2, r3]
1a001bde:	6818      	ldr	r0, [r3, #0]
}
1a001be0:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a001be4:	4770      	bx	lr
1a001be6:	bf00      	nop
1a001be8:	10000000 	.word	0x10000000

1a001bec <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a001bec:	2901      	cmp	r1, #1
1a001bee:	d000      	beq.n	1a001bf2 <Chip_I2C_EventHandlerPolling+0x6>
1a001bf0:	4770      	bx	lr
{
1a001bf2:	b538      	push	{r3, r4, r5, lr}
1a001bf4:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a001bf6:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001bfa:	009a      	lsls	r2, r3, #2
1a001bfc:	4b08      	ldr	r3, [pc, #32]	; (1a001c20 <Chip_I2C_EventHandlerPolling+0x34>)
1a001bfe:	4413      	add	r3, r2
1a001c00:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a001c02:	7d2b      	ldrb	r3, [r5, #20]
1a001c04:	b2db      	uxtb	r3, r3
1a001c06:	2b04      	cmp	r3, #4
1a001c08:	d108      	bne.n	1a001c1c <Chip_I2C_EventHandlerPolling+0x30>
		if (Chip_I2C_IsStateChanged(id)) {
1a001c0a:	4620      	mov	r0, r4
1a001c0c:	f7ff ffe2 	bl	1a001bd4 <Chip_I2C_IsStateChanged>
1a001c10:	2800      	cmp	r0, #0
1a001c12:	d0f6      	beq.n	1a001c02 <Chip_I2C_EventHandlerPolling+0x16>
			Chip_I2C_MasterStateHandler(id);
1a001c14:	4620      	mov	r0, r4
1a001c16:	f7ff ffc5 	bl	1a001ba4 <Chip_I2C_MasterStateHandler>
1a001c1a:	e7f2      	b.n	1a001c02 <Chip_I2C_EventHandlerPolling+0x16>
}
1a001c1c:	bd38      	pop	{r3, r4, r5, pc}
1a001c1e:	bf00      	nop
1a001c20:	10000000 	.word	0x10000000

1a001c24 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001c24:	4b03      	ldr	r3, [pc, #12]	; (1a001c34 <Chip_SSP_GetClockIndex+0x10>)
1a001c26:	4298      	cmp	r0, r3
1a001c28:	d001      	beq.n	1a001c2e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001c2a:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001c2c:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a001c2e:	20a5      	movs	r0, #165	; 0xa5
1a001c30:	4770      	bx	lr
1a001c32:	bf00      	nop
1a001c34:	400c5000 	.word	0x400c5000

1a001c38 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001c38:	4b04      	ldr	r3, [pc, #16]	; (1a001c4c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001c3a:	4298      	cmp	r0, r3
1a001c3c:	d002      	beq.n	1a001c44 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001c3e:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a001c42:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001c44:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001c48:	4770      	bx	lr
1a001c4a:	bf00      	nop
1a001c4c:	400c5000 	.word	0x400c5000

1a001c50 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001c50:	6803      	ldr	r3, [r0, #0]
1a001c52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001c56:	0209      	lsls	r1, r1, #8
1a001c58:	b289      	uxth	r1, r1
1a001c5a:	4319      	orrs	r1, r3
1a001c5c:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a001c5e:	6102      	str	r2, [r0, #16]
}
1a001c60:	4770      	bx	lr

1a001c62 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001c62:	b570      	push	{r4, r5, r6, lr}
1a001c64:	4606      	mov	r6, r0
1a001c66:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001c68:	f7ff ffe6 	bl	1a001c38 <Chip_SSP_GetPeriphClockIndex>
1a001c6c:	f7ff fd42 	bl	1a0016f4 <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001c70:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a001c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a001c76:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a001c78:	e000      	b.n	1a001c7c <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001c7a:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a001c7c:	42ab      	cmp	r3, r5
1a001c7e:	d90b      	bls.n	1a001c98 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a001c80:	1c4c      	adds	r4, r1, #1
1a001c82:	fb02 f304 	mul.w	r3, r2, r4
1a001c86:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001c8a:	429d      	cmp	r5, r3
1a001c8c:	d2f6      	bcs.n	1a001c7c <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a001c8e:	2cff      	cmp	r4, #255	; 0xff
1a001c90:	d9f3      	bls.n	1a001c7a <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a001c92:	3202      	adds	r2, #2
				cr0_div = 0;
1a001c94:	2100      	movs	r1, #0
1a001c96:	e7f1      	b.n	1a001c7c <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a001c98:	4630      	mov	r0, r6
1a001c9a:	f7ff ffd9 	bl	1a001c50 <Chip_SSP_SetClockRate>
}
1a001c9e:	bd70      	pop	{r4, r5, r6, pc}

1a001ca0 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001ca0:	b510      	push	{r4, lr}
1a001ca2:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001ca4:	f7ff ffbe 	bl	1a001c24 <Chip_SSP_GetClockIndex>
1a001ca8:	f7ff fd0a 	bl	1a0016c0 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a001cac:	4620      	mov	r0, r4
1a001cae:	f7ff ffc3 	bl	1a001c38 <Chip_SSP_GetPeriphClockIndex>
1a001cb2:	f7ff fd05 	bl	1a0016c0 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a001cb6:	6863      	ldr	r3, [r4, #4]
1a001cb8:	f023 0304 	bic.w	r3, r3, #4
1a001cbc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a001cbe:	6823      	ldr	r3, [r4, #0]
1a001cc0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001cc4:	f043 0307 	orr.w	r3, r3, #7
1a001cc8:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a001cca:	4902      	ldr	r1, [pc, #8]	; (1a001cd4 <Chip_SSP_Init+0x34>)
1a001ccc:	4620      	mov	r0, r4
1a001cce:	f7ff ffc8 	bl	1a001c62 <Chip_SSP_SetBitRate>
}
1a001cd2:	bd10      	pop	{r4, pc}
1a001cd4:	000186a0 	.word	0x000186a0

1a001cd8 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a001cd8:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a001cda:	4a0b      	ldr	r2, [pc, #44]	; (1a001d08 <SystemInit+0x30>)
1a001cdc:	4b0b      	ldr	r3, [pc, #44]	; (1a001d0c <SystemInit+0x34>)
1a001cde:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001ce0:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a001ce4:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a001ce6:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a001cea:	2b20      	cmp	r3, #32
1a001cec:	d004      	beq.n	1a001cf8 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a001cee:	f7ff f941 	bl	1a000f74 <Board_SystemInit>
   Board_Init();
1a001cf2:	f7ff f8c9 	bl	1a000e88 <Board_Init>
}
1a001cf6:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a001cf8:	4a04      	ldr	r2, [pc, #16]	; (1a001d0c <SystemInit+0x34>)
1a001cfa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001cfe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001d02:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a001d06:	e7f2      	b.n	1a001cee <SystemInit+0x16>
1a001d08:	1a000000 	.word	0x1a000000
1a001d0c:	e000ed00 	.word	0xe000ed00

1a001d10 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001d10:	4b04      	ldr	r3, [pc, #16]	; (1a001d24 <cyclesCounterInit+0x14>)
1a001d12:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001d14:	4a04      	ldr	r2, [pc, #16]	; (1a001d28 <cyclesCounterInit+0x18>)
1a001d16:	6813      	ldr	r3, [r2, #0]
1a001d18:	f043 0301 	orr.w	r3, r3, #1
1a001d1c:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001d1e:	2001      	movs	r0, #1
1a001d20:	4770      	bx	lr
1a001d22:	bf00      	nop
1a001d24:	10000038 	.word	0x10000038
1a001d28:	e0001000 	.word	0xe0001000

1a001d2c <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a001d2c:	4b01      	ldr	r3, [pc, #4]	; (1a001d34 <tickRead+0x8>)
1a001d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001d32:	4770      	bx	lr
1a001d34:	100000f8 	.word	0x100000f8

1a001d38 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a001d38:	b918      	cbnz	r0, 1a001d42 <tickPowerSet+0xa>
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a001d3a:	4b04      	ldr	r3, [pc, #16]	; (1a001d4c <tickPowerSet+0x14>)
1a001d3c:	2200      	movs	r2, #0
1a001d3e:	601a      	str	r2, [r3, #0]
   }
}
1a001d40:	4770      	bx	lr
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001d42:	4b02      	ldr	r3, [pc, #8]	; (1a001d4c <tickPowerSet+0x14>)
1a001d44:	2207      	movs	r2, #7
1a001d46:	601a      	str	r2, [r3, #0]
1a001d48:	4770      	bx	lr
1a001d4a:	bf00      	nop
1a001d4c:	e000e010 	.word	0xe000e010

1a001d50 <tickInit>:
{
1a001d50:	b538      	push	{r3, r4, r5, lr}
      if( tickRateMSvalue == 0 ) {
1a001d52:	ea50 0301 	orrs.w	r3, r0, r1
1a001d56:	d02a      	beq.n	1a001dae <tickInit+0x5e>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001d58:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a001d5c:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001d60:	2b00      	cmp	r3, #0
1a001d62:	bf08      	it	eq
1a001d64:	2a32      	cmpeq	r2, #50	; 0x32
1a001d66:	d227      	bcs.n	1a001db8 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001d68:	4b14      	ldr	r3, [pc, #80]	; (1a001dbc <tickInit+0x6c>)
1a001d6a:	e9c3 0100 	strd	r0, r1, [r3]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001d6e:	4b14      	ldr	r3, [pc, #80]	; (1a001dc0 <tickInit+0x70>)
1a001d70:	681b      	ldr	r3, [r3, #0]
1a001d72:	fba3 4500 	umull	r4, r5, r3, r0
1a001d76:	fb03 5501 	mla	r5, r3, r1, r5
1a001d7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001d7e:	2300      	movs	r3, #0
1a001d80:	4620      	mov	r0, r4
1a001d82:	4629      	mov	r1, r5
1a001d84:	f000 fadc 	bl	1a002340 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001d88:	3801      	subs	r0, #1
1a001d8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001d8e:	d209      	bcs.n	1a001da4 <tickInit+0x54>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a001d90:	4b0c      	ldr	r3, [pc, #48]	; (1a001dc4 <tickInit+0x74>)
1a001d92:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001d94:	4a0c      	ldr	r2, [pc, #48]	; (1a001dc8 <tickInit+0x78>)
1a001d96:	21e0      	movs	r1, #224	; 0xe0
1a001d98:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a001d9c:	2200      	movs	r2, #0
1a001d9e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001da0:	2207      	movs	r2, #7
1a001da2:	601a      	str	r2, [r3, #0]
            tickPowerSet( ON );
1a001da4:	2001      	movs	r0, #1
1a001da6:	f7ff ffc7 	bl	1a001d38 <tickPowerSet>
      bool_t ret_val = 1;
1a001daa:	2001      	movs	r0, #1
}
1a001dac:	bd38      	pop	{r3, r4, r5, pc}
         tickPowerSet( OFF );
1a001dae:	2000      	movs	r0, #0
1a001db0:	f7ff ffc2 	bl	1a001d38 <tickPowerSet>
         ret_val = 0;
1a001db4:	2000      	movs	r0, #0
1a001db6:	e7f9      	b.n	1a001dac <tickInit+0x5c>
            ret_val = 0;
1a001db8:	2000      	movs	r0, #0
1a001dba:	e7f7      	b.n	1a001dac <tickInit+0x5c>
1a001dbc:	10000118 	.word	0x10000118
1a001dc0:	10000110 	.word	0x10000110
1a001dc4:	e000e010 	.word	0xe000e010
1a001dc8:	e000ed00 	.word	0xe000ed00

1a001dcc <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001dcc:	e92d 4800 	stmdb	sp!, {fp, lr}
   // Increment Tick counters
   tickCounter++;
1a001dd0:	4908      	ldr	r1, [pc, #32]	; (1a001df4 <SysTick_Handler+0x28>)
1a001dd2:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001dd6:	f112 0b01 	adds.w	fp, r2, #1
1a001dda:	f143 0c00 	adc.w	ip, r3, #0
1a001dde:	e9c1 bc00 	strd	fp, ip, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001de2:	4b05      	ldr	r3, [pc, #20]	; (1a001df8 <SysTick_Handler+0x2c>)
1a001de4:	681b      	ldr	r3, [r3, #0]
1a001de6:	b113      	cbz	r3, 1a001dee <SysTick_Handler+0x22>
      (* tickHookFunction )( callBackFuncParams );
1a001de8:	4a04      	ldr	r2, [pc, #16]	; (1a001dfc <SysTick_Handler+0x30>)
1a001dea:	6810      	ldr	r0, [r2, #0]
1a001dec:	4798      	blx	r3
   }
}
1a001dee:	e8bd 8800 	ldmia.w	sp!, {fp, pc}
1a001df2:	bf00      	nop
1a001df4:	100000f8 	.word	0x100000f8
1a001df8:	10000100 	.word	0x10000100
1a001dfc:	100000f4 	.word	0x100000f4

1a001e00 <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a001e00:	b538      	push	{r3, r4, r5, lr}
1a001e02:	4604      	mov	r4, r0
1a001e04:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a001e06:	4b08      	ldr	r3, [pc, #32]	; (1a001e28 <i2cHardwareInit+0x28>)
1a001e08:	f640 0208 	movw	r2, #2056	; 0x808
1a001e0c:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE );

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a001e10:	f7ff fe82 	bl	1a001b18 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a001e14:	4629      	mov	r1, r5
1a001e16:	4620      	mov	r0, r4
1a001e18:	f7ff fe90 	bl	1a001b3c <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a001e1c:	4903      	ldr	r1, [pc, #12]	; (1a001e2c <i2cHardwareInit+0x2c>)
1a001e1e:	4620      	mov	r0, r4
1a001e20:	f7ff fea8 	bl	1a001b74 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a001e24:	2001      	movs	r0, #1
1a001e26:	bd38      	pop	{r3, r4, r5, pc}
1a001e28:	40086000 	.word	0x40086000
1a001e2c:	1a001bed 	.word	0x1a001bed

1a001e30 <i2cHardwareRead>:
                               uint16_t dataToReadBufferSize,
                               bool_t   sendWriteStop,
                               uint8_t* receiveDataBuffer,
                               uint16_t receiveDataBufferSize,
                               bool_t   sendReadStop )
{
1a001e30:	b500      	push	{lr}
1a001e32:	b085      	sub	sp, #20

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   i2cData.slaveAddr = i2cSlaveAddress;
1a001e34:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a001e38:	2100      	movs	r1, #0
1a001e3a:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a001e3e:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = dataToReadBuffer;
1a001e42:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = dataToReadBufferSize;
1a001e44:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = receiveDataBuffer;
1a001e48:	9b07      	ldr	r3, [sp, #28]
1a001e4a:	9303      	str	r3, [sp, #12]
   i2cData.rxSz      = receiveDataBufferSize;
1a001e4c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
1a001e50:	f8ad 3006 	strh.w	r3, [sp, #6]

   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a001e54:	4669      	mov	r1, sp
1a001e56:	4804      	ldr	r0, [pc, #16]	; (1a001e68 <i2cHardwareRead+0x38>)
1a001e58:	f7ff fdab 	bl	1a0019b2 <Chip_I2CM_XferBlocking>
1a001e5c:	b100      	cbz	r0, 1a001e60 <i2cHardwareRead+0x30>
      return FALSE;
   }

   return TRUE;
1a001e5e:	2001      	movs	r0, #1
}
1a001e60:	b005      	add	sp, #20
1a001e62:	f85d fb04 	ldr.w	pc, [sp], #4
1a001e66:	bf00      	nop
1a001e68:	400a1000 	.word	0x400a1000

1a001e6c <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a001e6c:	b108      	cbz	r0, 1a001e72 <i2cHardwareWrite+0x6>
      return FALSE;
1a001e6e:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a001e70:	4770      	bx	lr
{
1a001e72:	b500      	push	{lr}
1a001e74:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a001e76:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a001e7a:	2100      	movs	r1, #0
1a001e7c:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a001e80:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a001e84:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a001e86:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a001e8a:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a001e8c:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a001e90:	4669      	mov	r1, sp
1a001e92:	4804      	ldr	r0, [pc, #16]	; (1a001ea4 <i2cHardwareWrite+0x38>)
1a001e94:	f7ff fd8d 	bl	1a0019b2 <Chip_I2CM_XferBlocking>
1a001e98:	b100      	cbz	r0, 1a001e9c <i2cHardwareWrite+0x30>
   return TRUE;
1a001e9a:	2001      	movs	r0, #1
}
1a001e9c:	b005      	add	sp, #20
1a001e9e:	f85d fb04 	ldr.w	pc, [sp], #4
1a001ea2:	bf00      	nop
1a001ea4:	400a1000 	.word	0x400a1000

1a001ea8 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001ea8:	b108      	cbz	r0, 1a001eae <i2cInit+0x6>
      return FALSE;
1a001eaa:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a001eac:	4770      	bx	lr
{
1a001eae:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a001eb0:	f7ff ffa6 	bl	1a001e00 <i2cHardwareInit>
}
1a001eb4:	bd08      	pop	{r3, pc}

1a001eb6 <i2cRead>:
                bool_t   sendReadStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001eb6:	b108      	cbz	r0, 1a001ebc <i2cRead+0x6>
      return FALSE;
1a001eb8:	2000      	movs	r0, #0
                             receiveDataBufferSize,
                             sendReadStop );
#endif

   return retVal;
}
1a001eba:	4770      	bx	lr
{
1a001ebc:	b510      	push	{r4, lr}
1a001ebe:	b084      	sub	sp, #16
   retVal = i2cHardwareRead( i2cNumber,
1a001ec0:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
1a001ec4:	9403      	str	r4, [sp, #12]
1a001ec6:	f8bd 4020 	ldrh.w	r4, [sp, #32]
1a001eca:	9402      	str	r4, [sp, #8]
1a001ecc:	9c07      	ldr	r4, [sp, #28]
1a001ece:	9401      	str	r4, [sp, #4]
1a001ed0:	f89d 4018 	ldrb.w	r4, [sp, #24]
1a001ed4:	9400      	str	r4, [sp, #0]
1a001ed6:	f7ff ffab 	bl	1a001e30 <i2cHardwareRead>
}
1a001eda:	b004      	add	sp, #16
1a001edc:	bd10      	pop	{r4, pc}

1a001ede <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a001ede:	b108      	cbz	r0, 1a001ee4 <i2cWrite+0x6>
      return FALSE;
1a001ee0:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a001ee2:	4770      	bx	lr
{
1a001ee4:	b510      	push	{r4, lr}
1a001ee6:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a001ee8:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a001eec:	9400      	str	r4, [sp, #0]
1a001eee:	f7ff ffbd 	bl	1a001e6c <i2cHardwareWrite>
}
1a001ef2:	b002      	add	sp, #8
1a001ef4:	bd10      	pop	{r4, pc}
1a001ef6:	Address 0x000000001a001ef6 is out of bounds.


1a001ef8 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001ef8:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001efa:	4d0b      	ldr	r5, [pc, #44]	; (1a001f28 <gpioObtainPinInit+0x30>)
1a001efc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001f00:	182c      	adds	r4, r5, r0
1a001f02:	5628      	ldrsb	r0, [r5, r0]
1a001f04:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001f06:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a001f0a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001f0c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a001f10:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001f12:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a001f16:	9b02      	ldr	r3, [sp, #8]
1a001f18:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001f1a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a001f1e:	9b03      	ldr	r3, [sp, #12]
1a001f20:	701a      	strb	r2, [r3, #0]
}
1a001f22:	bc30      	pop	{r4, r5}
1a001f24:	4770      	bx	lr
1a001f26:	bf00      	nop
1a001f28:	1a0036d4 	.word	0x1a0036d4

1a001f2c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a001f2c:	b570      	push	{r4, r5, r6, lr}
1a001f2e:	b084      	sub	sp, #16
1a001f30:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001f32:	2300      	movs	r3, #0
1a001f34:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001f38:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001f3c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001f40:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001f44:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001f48:	f10d 030b 	add.w	r3, sp, #11
1a001f4c:	9301      	str	r3, [sp, #4]
1a001f4e:	ab03      	add	r3, sp, #12
1a001f50:	9300      	str	r3, [sp, #0]
1a001f52:	f10d 030d 	add.w	r3, sp, #13
1a001f56:	f10d 020e 	add.w	r2, sp, #14
1a001f5a:	f10d 010f 	add.w	r1, sp, #15
1a001f5e:	f7ff ffcb 	bl	1a001ef8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001f62:	2c05      	cmp	r4, #5
1a001f64:	f200 80a5 	bhi.w	1a0020b2 <gpioInit+0x186>
1a001f68:	e8df f004 	tbb	[pc, r4]
1a001f6c:	45278109 	.word	0x45278109
1a001f70:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001f72:	4851      	ldr	r0, [pc, #324]	; (1a0020b8 <gpioInit+0x18c>)
1a001f74:	f7ff fd2f 	bl	1a0019d6 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001f78:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a001f7a:	b004      	add	sp, #16
1a001f7c:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a001f7e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001f82:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001f86:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001f8a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001f8e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001f92:	494a      	ldr	r1, [pc, #296]	; (1a0020bc <gpioInit+0x190>)
1a001f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001f98:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001f9c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001fa0:	2001      	movs	r0, #1
1a001fa2:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] &= ~bitValue;
1a001fa6:	4c44      	ldr	r4, [pc, #272]	; (1a0020b8 <gpioInit+0x18c>)
1a001fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001fac:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001fb0:	ea22 0201 	bic.w	r2, r2, r1
1a001fb4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001fb8:	e7df      	b.n	1a001f7a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001fba:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001fbe:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001fc2:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001fc6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001fca:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001fce:	493b      	ldr	r1, [pc, #236]	; (1a0020bc <gpioInit+0x190>)
1a001fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001fd4:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001fd8:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001fdc:	2001      	movs	r0, #1
1a001fde:	fa00 f102 	lsl.w	r1, r0, r2
1a001fe2:	4c35      	ldr	r4, [pc, #212]	; (1a0020b8 <gpioInit+0x18c>)
1a001fe4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001fe8:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001fec:	ea22 0201 	bic.w	r2, r2, r1
1a001ff0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001ff4:	e7c1      	b.n	1a001f7a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a001ff6:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001ffa:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001ffe:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a002002:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a002006:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00200a:	492c      	ldr	r1, [pc, #176]	; (1a0020bc <gpioInit+0x190>)
1a00200c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a002010:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002014:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002018:	2001      	movs	r0, #1
1a00201a:	fa00 f102 	lsl.w	r1, r0, r2
1a00201e:	4c26      	ldr	r4, [pc, #152]	; (1a0020b8 <gpioInit+0x18c>)
1a002020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002024:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002028:	ea22 0201 	bic.w	r2, r2, r1
1a00202c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a002030:	e7a3      	b.n	1a001f7a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a002032:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002036:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00203a:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00203e:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a002042:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002046:	491d      	ldr	r1, [pc, #116]	; (1a0020bc <gpioInit+0x190>)
1a002048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00204c:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a002050:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002054:	2001      	movs	r0, #1
1a002056:	fa00 f102 	lsl.w	r1, r0, r2
1a00205a:	4c17      	ldr	r4, [pc, #92]	; (1a0020b8 <gpioInit+0x18c>)
1a00205c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a002060:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a002064:	ea22 0201 	bic.w	r2, r2, r1
1a002068:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00206c:	e785      	b.n	1a001f7a <gpioInit+0x4e>
      Chip_SCU_PinMux(
1a00206e:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a002072:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a002076:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a00207a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00207e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a002082:	490e      	ldr	r1, [pc, #56]	; (1a0020bc <gpioInit+0x190>)
1a002084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a002088:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00208c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a002090:	2001      	movs	r0, #1
1a002092:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a002096:	4b08      	ldr	r3, [pc, #32]	; (1a0020b8 <gpioInit+0x18c>)
1a002098:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a00209c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a0020a0:	4331      	orrs	r1, r6
1a0020a2:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a0020a6:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a0020a8:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a0020ac:	2100      	movs	r1, #0
1a0020ae:	5499      	strb	r1, [r3, r2]
1a0020b0:	e763      	b.n	1a001f7a <gpioInit+0x4e>
      ret_val = 0;
1a0020b2:	2000      	movs	r0, #0
1a0020b4:	e761      	b.n	1a001f7a <gpioInit+0x4e>
1a0020b6:	bf00      	nop
1a0020b8:	400f4000 	.word	0x400f4000
1a0020bc:	40086000 	.word	0x40086000

1a0020c0 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a0020c0:	b510      	push	{r4, lr}
1a0020c2:	b084      	sub	sp, #16
1a0020c4:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0020c6:	2300      	movs	r3, #0
1a0020c8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0020cc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0020d0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0020d4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0020d8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0020dc:	f10d 030b 	add.w	r3, sp, #11
1a0020e0:	9301      	str	r3, [sp, #4]
1a0020e2:	ab03      	add	r3, sp, #12
1a0020e4:	9300      	str	r3, [sp, #0]
1a0020e6:	f10d 030d 	add.w	r3, sp, #13
1a0020ea:	f10d 020e 	add.w	r2, sp, #14
1a0020ee:	f10d 010f 	add.w	r1, sp, #15
1a0020f2:	f7ff ff01 	bl	1a001ef8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0020f6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0020fa:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0020fe:	3400      	adds	r4, #0
1a002100:	bf18      	it	ne
1a002102:	2401      	movne	r4, #1
1a002104:	015b      	lsls	r3, r3, #5
1a002106:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00210a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00210e:	549c      	strb	r4, [r3, r2]

   return ret_val;
}
1a002110:	2001      	movs	r0, #1
1a002112:	b004      	add	sp, #16
1a002114:	bd10      	pop	{r4, pc}

1a002116 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a002116:	b500      	push	{lr}
1a002118:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a00211a:	2300      	movs	r3, #0
1a00211c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002120:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002124:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002128:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00212c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002130:	f10d 030b 	add.w	r3, sp, #11
1a002134:	9301      	str	r3, [sp, #4]
1a002136:	ab03      	add	r3, sp, #12
1a002138:	9300      	str	r3, [sp, #0]
1a00213a:	f10d 030d 	add.w	r3, sp, #13
1a00213e:	f10d 020e 	add.w	r2, sp, #14
1a002142:	f10d 010f 	add.w	r1, sp, #15
1a002146:	f7ff fed7 	bl	1a001ef8 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a00214a:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a00214e:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a002152:	015b      	lsls	r3, r3, #5
1a002154:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a002158:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00215c:	5c98      	ldrb	r0, [r3, r2]

   return ret_val;
}
1a00215e:	3000      	adds	r0, #0
1a002160:	bf18      	it	ne
1a002162:	2001      	movne	r0, #1
1a002164:	b005      	add	sp, #20
1a002166:	f85d fb04 	ldr.w	pc, [sp], #4
1a00216a:	Address 0x000000001a00216a is out of bounds.


1a00216c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a00216c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00216e:	4b04      	ldr	r3, [pc, #16]	; (1a002180 <USB0_IRQHandler+0x14>)
1a002170:	681b      	ldr	r3, [r3, #0]
1a002172:	681b      	ldr	r3, [r3, #0]
1a002174:	68db      	ldr	r3, [r3, #12]
1a002176:	4a03      	ldr	r2, [pc, #12]	; (1a002184 <USB0_IRQHandler+0x18>)
1a002178:	6810      	ldr	r0, [r2, #0]
1a00217a:	4798      	blx	r3
}
1a00217c:	bd08      	pop	{r3, pc}
1a00217e:	bf00      	nop
1a002180:	10000120 	.word	0x10000120
1a002184:	10000104 	.word	0x10000104

1a002188 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a002188:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00218a:	f7ff fad9 	bl	1a001740 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00218e:	4b3a      	ldr	r3, [pc, #232]	; (1a002278 <boardInit+0xf0>)
1a002190:	6818      	ldr	r0, [r3, #0]
1a002192:	f7ff fdbd 	bl	1a001d10 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a002196:	2001      	movs	r0, #1
1a002198:	2100      	movs	r1, #0
1a00219a:	f7ff fdd9 	bl	1a001d50 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a00219e:	2105      	movs	r1, #5
1a0021a0:	2000      	movs	r0, #0
1a0021a2:	f7ff fec3 	bl	1a001f2c <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a0021a6:	2100      	movs	r1, #0
1a0021a8:	2024      	movs	r0, #36	; 0x24
1a0021aa:	f7ff febf 	bl	1a001f2c <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a0021ae:	2100      	movs	r1, #0
1a0021b0:	2025      	movs	r0, #37	; 0x25
1a0021b2:	f7ff febb 	bl	1a001f2c <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a0021b6:	2100      	movs	r1, #0
1a0021b8:	2026      	movs	r0, #38	; 0x26
1a0021ba:	f7ff feb7 	bl	1a001f2c <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a0021be:	2100      	movs	r1, #0
1a0021c0:	2027      	movs	r0, #39	; 0x27
1a0021c2:	f7ff feb3 	bl	1a001f2c <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a0021c6:	2101      	movs	r1, #1
1a0021c8:	2028      	movs	r0, #40	; 0x28
1a0021ca:	f7ff feaf 	bl	1a001f2c <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a0021ce:	2101      	movs	r1, #1
1a0021d0:	2029      	movs	r0, #41	; 0x29
1a0021d2:	f7ff feab 	bl	1a001f2c <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a0021d6:	2101      	movs	r1, #1
1a0021d8:	202a      	movs	r0, #42	; 0x2a
1a0021da:	f7ff fea7 	bl	1a001f2c <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a0021de:	2101      	movs	r1, #1
1a0021e0:	202b      	movs	r0, #43	; 0x2b
1a0021e2:	f7ff fea3 	bl	1a001f2c <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a0021e6:	2101      	movs	r1, #1
1a0021e8:	202c      	movs	r0, #44	; 0x2c
1a0021ea:	f7ff fe9f 	bl	1a001f2c <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a0021ee:	2101      	movs	r1, #1
1a0021f0:	202d      	movs	r0, #45	; 0x2d
1a0021f2:	f7ff fe9b 	bl	1a001f2c <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a0021f6:	2100      	movs	r1, #0
1a0021f8:	202e      	movs	r0, #46	; 0x2e
1a0021fa:	f7ff fe97 	bl	1a001f2c <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a0021fe:	2100      	movs	r1, #0
1a002200:	202f      	movs	r0, #47	; 0x2f
1a002202:	f7ff fe93 	bl	1a001f2c <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a002206:	2100      	movs	r1, #0
1a002208:	2030      	movs	r0, #48	; 0x30
1a00220a:	f7ff fe8f 	bl	1a001f2c <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a00220e:	2100      	movs	r1, #0
1a002210:	2031      	movs	r0, #49	; 0x31
1a002212:	f7ff fe8b 	bl	1a001f2c <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a002216:	2100      	movs	r1, #0
1a002218:	2032      	movs	r0, #50	; 0x32
1a00221a:	f7ff fe87 	bl	1a001f2c <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a00221e:	2100      	movs	r1, #0
1a002220:	2033      	movs	r0, #51	; 0x33
1a002222:	f7ff fe83 	bl	1a001f2c <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a002226:	2100      	movs	r1, #0
1a002228:	2034      	movs	r0, #52	; 0x34
1a00222a:	f7ff fe7f 	bl	1a001f2c <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a00222e:	2100      	movs	r1, #0
1a002230:	2035      	movs	r0, #53	; 0x35
1a002232:	f7ff fe7b 	bl	1a001f2c <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a002236:	2101      	movs	r1, #1
1a002238:	2036      	movs	r0, #54	; 0x36
1a00223a:	f7ff fe77 	bl	1a001f2c <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a00223e:	2101      	movs	r1, #1
1a002240:	2037      	movs	r0, #55	; 0x37
1a002242:	f7ff fe73 	bl	1a001f2c <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a002246:	2101      	movs	r1, #1
1a002248:	2038      	movs	r0, #56	; 0x38
1a00224a:	f7ff fe6f 	bl	1a001f2c <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a00224e:	2101      	movs	r1, #1
1a002250:	2039      	movs	r0, #57	; 0x39
1a002252:	f7ff fe6b 	bl	1a001f2c <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a002256:	2101      	movs	r1, #1
1a002258:	203a      	movs	r0, #58	; 0x3a
1a00225a:	f7ff fe67 	bl	1a001f2c <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a00225e:	2101      	movs	r1, #1
1a002260:	203b      	movs	r0, #59	; 0x3b
1a002262:	f7ff fe63 	bl	1a001f2c <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a002266:	2101      	movs	r1, #1
1a002268:	203c      	movs	r0, #60	; 0x3c
1a00226a:	f7ff fe5f 	bl	1a001f2c <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a00226e:	2101      	movs	r1, #1
1a002270:	203d      	movs	r0, #61	; 0x3d
1a002272:	f7ff fe5b 	bl	1a001f2c <gpioInit>

}
1a002276:	bd08      	pop	{r3, pc}
1a002278:	10000110 	.word	0x10000110

1a00227c <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay(tick_t duration)
{
1a00227c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002280:	4680      	mov	r8, r0
1a002282:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a002284:	f7ff fd52 	bl	1a001d2c <tickRead>
1a002288:	4606      	mov	r6, r0
1a00228a:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration/tickRateMS );
1a00228c:	f7ff fd4e 	bl	1a001d2c <tickRead>
1a002290:	1b84      	subs	r4, r0, r6
1a002292:	eb61 0507 	sbc.w	r5, r1, r7
1a002296:	4b06      	ldr	r3, [pc, #24]	; (1a0022b0 <delay+0x34>)
1a002298:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00229c:	4640      	mov	r0, r8
1a00229e:	4649      	mov	r1, r9
1a0022a0:	f000 f84e 	bl	1a002340 <__aeabi_uldivmod>
1a0022a4:	428d      	cmp	r5, r1
1a0022a6:	bf08      	it	eq
1a0022a8:	4284      	cmpeq	r4, r0
1a0022aa:	d3ef      	bcc.n	1a00228c <delay+0x10>
}
1a0022ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0022b0:	10000118 	.word	0x10000118

1a0022b4 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a0022b4:	2301      	movs	r3, #1
1a0022b6:	fa03 f000 	lsl.w	r0, r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a0022ba:	4b01      	ldr	r3, [pc, #4]	; (1a0022c0 <clearInterrupt+0xc>)
1a0022bc:	6258      	str	r0, [r3, #36]	; 0x24
}
1a0022be:	4770      	bx	lr
1a0022c0:	40087000 	.word	0x40087000

1a0022c4 <serveInterrupt>:

static void serveInterrupt(uint8_t irqChannel)
{
1a0022c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a0022c6:	4b12      	ldr	r3, [pc, #72]	; (1a002310 <serveInterrupt+0x4c>)
1a0022c8:	5c1a      	ldrb	r2, [r3, r0]
	return pPININT->RISE;
1a0022ca:	4b12      	ldr	r3, [pc, #72]	; (1a002314 <serveInterrupt+0x50>)
1a0022cc:	69d9      	ldr	r1, [r3, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a0022ce:	2301      	movs	r3, #1
1a0022d0:	4083      	lsls	r3, r0
1a0022d2:	420b      	tst	r3, r1
1a0022d4:	d111      	bne.n	1a0022fa <serveInterrupt+0x36>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a0022d6:	4910      	ldr	r1, [pc, #64]	; (1a002318 <serveInterrupt+0x54>)
1a0022d8:	688e      	ldr	r6, [r1, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0022da:	4d10      	ldr	r5, [pc, #64]	; (1a00231c <serveInterrupt+0x58>)
1a0022dc:	0051      	lsls	r1, r2, #1
1a0022de:	188f      	adds	r7, r1, r2
1a0022e0:	00fc      	lsls	r4, r7, #3
1a0022e2:	4627      	mov	r7, r4
1a0022e4:	442c      	add	r4, r5
1a0022e6:	60a6      	str	r6, [r4, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0022e8:	6864      	ldr	r4, [r4, #4]
1a0022ea:	1b36      	subs	r6, r6, r4
1a0022ec:	443d      	add	r5, r7
1a0022ee:	60ee      	str	r6, [r5, #12]
	pPININT->FALL = pins;
1a0022f0:	4a08      	ldr	r2, [pc, #32]	; (1a002314 <serveInterrupt+0x50>)
1a0022f2:	6213      	str	r3, [r2, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0022f4:	f7ff ffde 	bl	1a0022b4 <clearInterrupt>
}
1a0022f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0022fa:	4907      	ldr	r1, [pc, #28]	; (1a002318 <serveInterrupt+0x54>)
1a0022fc:	688c      	ldr	r4, [r1, #8]
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a0022fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a002302:	00d1      	lsls	r1, r2, #3
1a002304:	4a05      	ldr	r2, [pc, #20]	; (1a00231c <serveInterrupt+0x58>)
1a002306:	440a      	add	r2, r1
1a002308:	6054      	str	r4, [r2, #4]
	pPININT->RISE = pins;
1a00230a:	4a02      	ldr	r2, [pc, #8]	; (1a002314 <serveInterrupt+0x50>)
1a00230c:	61d3      	str	r3, [r2, #28]
1a00230e:	e7f1      	b.n	1a0022f4 <serveInterrupt+0x30>
1a002310:	1a00380c 	.word	0x1a00380c
1a002314:	40087000 	.word	0x40087000
1a002318:	40084000 	.word	0x40084000
1a00231c:	1000003c 	.word	0x1000003c

1a002320 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a002320:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a002322:	2000      	movs	r0, #0
1a002324:	f7ff ffce 	bl	1a0022c4 <serveInterrupt>
}
1a002328:	bd08      	pop	{r3, pc}

1a00232a <GPIO1_IRQHandler>:

void GPIO1_IRQHandler(void)
{
1a00232a:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a00232c:	2001      	movs	r0, #1
1a00232e:	f7ff ffc9 	bl	1a0022c4 <serveInterrupt>
}
1a002332:	bd08      	pop	{r3, pc}

1a002334 <GPIO2_IRQHandler>:

void GPIO2_IRQHandler(void)
{
1a002334:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a002336:	2002      	movs	r0, #2
1a002338:	f7ff ffc4 	bl	1a0022c4 <serveInterrupt>
}
1a00233c:	bd08      	pop	{r3, pc}
1a00233e:	Address 0x000000001a00233e is out of bounds.


1a002340 <__aeabi_uldivmod>:
1a002340:	b953      	cbnz	r3, 1a002358 <__aeabi_uldivmod+0x18>
1a002342:	b94a      	cbnz	r2, 1a002358 <__aeabi_uldivmod+0x18>
1a002344:	2900      	cmp	r1, #0
1a002346:	bf08      	it	eq
1a002348:	2800      	cmpeq	r0, #0
1a00234a:	bf1c      	itt	ne
1a00234c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a002350:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002354:	f000 b972 	b.w	1a00263c <__aeabi_idiv0>
1a002358:	f1ad 0c08 	sub.w	ip, sp, #8
1a00235c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002360:	f000 f806 	bl	1a002370 <__udivmoddi4>
1a002364:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00236c:	b004      	add	sp, #16
1a00236e:	4770      	bx	lr

1a002370 <__udivmoddi4>:
1a002370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002374:	9e08      	ldr	r6, [sp, #32]
1a002376:	4604      	mov	r4, r0
1a002378:	4688      	mov	r8, r1
1a00237a:	2b00      	cmp	r3, #0
1a00237c:	d14b      	bne.n	1a002416 <__udivmoddi4+0xa6>
1a00237e:	428a      	cmp	r2, r1
1a002380:	4615      	mov	r5, r2
1a002382:	d967      	bls.n	1a002454 <__udivmoddi4+0xe4>
1a002384:	fab2 f282 	clz	r2, r2
1a002388:	b14a      	cbz	r2, 1a00239e <__udivmoddi4+0x2e>
1a00238a:	f1c2 0720 	rsb	r7, r2, #32
1a00238e:	fa01 f302 	lsl.w	r3, r1, r2
1a002392:	fa20 f707 	lsr.w	r7, r0, r7
1a002396:	4095      	lsls	r5, r2
1a002398:	ea47 0803 	orr.w	r8, r7, r3
1a00239c:	4094      	lsls	r4, r2
1a00239e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0023a2:	0c23      	lsrs	r3, r4, #16
1a0023a4:	fbb8 f7fe 	udiv	r7, r8, lr
1a0023a8:	fa1f fc85 	uxth.w	ip, r5
1a0023ac:	fb0e 8817 	mls	r8, lr, r7, r8
1a0023b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0023b4:	fb07 f10c 	mul.w	r1, r7, ip
1a0023b8:	4299      	cmp	r1, r3
1a0023ba:	d909      	bls.n	1a0023d0 <__udivmoddi4+0x60>
1a0023bc:	18eb      	adds	r3, r5, r3
1a0023be:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0023c2:	f080 811b 	bcs.w	1a0025fc <__udivmoddi4+0x28c>
1a0023c6:	4299      	cmp	r1, r3
1a0023c8:	f240 8118 	bls.w	1a0025fc <__udivmoddi4+0x28c>
1a0023cc:	3f02      	subs	r7, #2
1a0023ce:	442b      	add	r3, r5
1a0023d0:	1a5b      	subs	r3, r3, r1
1a0023d2:	b2a4      	uxth	r4, r4
1a0023d4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0023d8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0023dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0023e0:	fb00 fc0c 	mul.w	ip, r0, ip
1a0023e4:	45a4      	cmp	ip, r4
1a0023e6:	d909      	bls.n	1a0023fc <__udivmoddi4+0x8c>
1a0023e8:	192c      	adds	r4, r5, r4
1a0023ea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0023ee:	f080 8107 	bcs.w	1a002600 <__udivmoddi4+0x290>
1a0023f2:	45a4      	cmp	ip, r4
1a0023f4:	f240 8104 	bls.w	1a002600 <__udivmoddi4+0x290>
1a0023f8:	3802      	subs	r0, #2
1a0023fa:	442c      	add	r4, r5
1a0023fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a002400:	eba4 040c 	sub.w	r4, r4, ip
1a002404:	2700      	movs	r7, #0
1a002406:	b11e      	cbz	r6, 1a002410 <__udivmoddi4+0xa0>
1a002408:	40d4      	lsrs	r4, r2
1a00240a:	2300      	movs	r3, #0
1a00240c:	e9c6 4300 	strd	r4, r3, [r6]
1a002410:	4639      	mov	r1, r7
1a002412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002416:	428b      	cmp	r3, r1
1a002418:	d909      	bls.n	1a00242e <__udivmoddi4+0xbe>
1a00241a:	2e00      	cmp	r6, #0
1a00241c:	f000 80eb 	beq.w	1a0025f6 <__udivmoddi4+0x286>
1a002420:	2700      	movs	r7, #0
1a002422:	e9c6 0100 	strd	r0, r1, [r6]
1a002426:	4638      	mov	r0, r7
1a002428:	4639      	mov	r1, r7
1a00242a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00242e:	fab3 f783 	clz	r7, r3
1a002432:	2f00      	cmp	r7, #0
1a002434:	d147      	bne.n	1a0024c6 <__udivmoddi4+0x156>
1a002436:	428b      	cmp	r3, r1
1a002438:	d302      	bcc.n	1a002440 <__udivmoddi4+0xd0>
1a00243a:	4282      	cmp	r2, r0
1a00243c:	f200 80fa 	bhi.w	1a002634 <__udivmoddi4+0x2c4>
1a002440:	1a84      	subs	r4, r0, r2
1a002442:	eb61 0303 	sbc.w	r3, r1, r3
1a002446:	2001      	movs	r0, #1
1a002448:	4698      	mov	r8, r3
1a00244a:	2e00      	cmp	r6, #0
1a00244c:	d0e0      	beq.n	1a002410 <__udivmoddi4+0xa0>
1a00244e:	e9c6 4800 	strd	r4, r8, [r6]
1a002452:	e7dd      	b.n	1a002410 <__udivmoddi4+0xa0>
1a002454:	b902      	cbnz	r2, 1a002458 <__udivmoddi4+0xe8>
1a002456:	deff      	udf	#255	; 0xff
1a002458:	fab2 f282 	clz	r2, r2
1a00245c:	2a00      	cmp	r2, #0
1a00245e:	f040 808f 	bne.w	1a002580 <__udivmoddi4+0x210>
1a002462:	1b49      	subs	r1, r1, r5
1a002464:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002468:	fa1f f885 	uxth.w	r8, r5
1a00246c:	2701      	movs	r7, #1
1a00246e:	fbb1 fcfe 	udiv	ip, r1, lr
1a002472:	0c23      	lsrs	r3, r4, #16
1a002474:	fb0e 111c 	mls	r1, lr, ip, r1
1a002478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00247c:	fb08 f10c 	mul.w	r1, r8, ip
1a002480:	4299      	cmp	r1, r3
1a002482:	d907      	bls.n	1a002494 <__udivmoddi4+0x124>
1a002484:	18eb      	adds	r3, r5, r3
1a002486:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00248a:	d202      	bcs.n	1a002492 <__udivmoddi4+0x122>
1a00248c:	4299      	cmp	r1, r3
1a00248e:	f200 80cd 	bhi.w	1a00262c <__udivmoddi4+0x2bc>
1a002492:	4684      	mov	ip, r0
1a002494:	1a59      	subs	r1, r3, r1
1a002496:	b2a3      	uxth	r3, r4
1a002498:	fbb1 f0fe 	udiv	r0, r1, lr
1a00249c:	fb0e 1410 	mls	r4, lr, r0, r1
1a0024a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a0024a4:	fb08 f800 	mul.w	r8, r8, r0
1a0024a8:	45a0      	cmp	r8, r4
1a0024aa:	d907      	bls.n	1a0024bc <__udivmoddi4+0x14c>
1a0024ac:	192c      	adds	r4, r5, r4
1a0024ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a0024b2:	d202      	bcs.n	1a0024ba <__udivmoddi4+0x14a>
1a0024b4:	45a0      	cmp	r8, r4
1a0024b6:	f200 80b6 	bhi.w	1a002626 <__udivmoddi4+0x2b6>
1a0024ba:	4618      	mov	r0, r3
1a0024bc:	eba4 0408 	sub.w	r4, r4, r8
1a0024c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a0024c4:	e79f      	b.n	1a002406 <__udivmoddi4+0x96>
1a0024c6:	f1c7 0c20 	rsb	ip, r7, #32
1a0024ca:	40bb      	lsls	r3, r7
1a0024cc:	fa22 fe0c 	lsr.w	lr, r2, ip
1a0024d0:	ea4e 0e03 	orr.w	lr, lr, r3
1a0024d4:	fa01 f407 	lsl.w	r4, r1, r7
1a0024d8:	fa20 f50c 	lsr.w	r5, r0, ip
1a0024dc:	fa21 f30c 	lsr.w	r3, r1, ip
1a0024e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a0024e4:	4325      	orrs	r5, r4
1a0024e6:	fbb3 f9f8 	udiv	r9, r3, r8
1a0024ea:	0c2c      	lsrs	r4, r5, #16
1a0024ec:	fb08 3319 	mls	r3, r8, r9, r3
1a0024f0:	fa1f fa8e 	uxth.w	sl, lr
1a0024f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a0024f8:	fb09 f40a 	mul.w	r4, r9, sl
1a0024fc:	429c      	cmp	r4, r3
1a0024fe:	fa02 f207 	lsl.w	r2, r2, r7
1a002502:	fa00 f107 	lsl.w	r1, r0, r7
1a002506:	d90b      	bls.n	1a002520 <__udivmoddi4+0x1b0>
1a002508:	eb1e 0303 	adds.w	r3, lr, r3
1a00250c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a002510:	f080 8087 	bcs.w	1a002622 <__udivmoddi4+0x2b2>
1a002514:	429c      	cmp	r4, r3
1a002516:	f240 8084 	bls.w	1a002622 <__udivmoddi4+0x2b2>
1a00251a:	f1a9 0902 	sub.w	r9, r9, #2
1a00251e:	4473      	add	r3, lr
1a002520:	1b1b      	subs	r3, r3, r4
1a002522:	b2ad      	uxth	r5, r5
1a002524:	fbb3 f0f8 	udiv	r0, r3, r8
1a002528:	fb08 3310 	mls	r3, r8, r0, r3
1a00252c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a002530:	fb00 fa0a 	mul.w	sl, r0, sl
1a002534:	45a2      	cmp	sl, r4
1a002536:	d908      	bls.n	1a00254a <__udivmoddi4+0x1da>
1a002538:	eb1e 0404 	adds.w	r4, lr, r4
1a00253c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a002540:	d26b      	bcs.n	1a00261a <__udivmoddi4+0x2aa>
1a002542:	45a2      	cmp	sl, r4
1a002544:	d969      	bls.n	1a00261a <__udivmoddi4+0x2aa>
1a002546:	3802      	subs	r0, #2
1a002548:	4474      	add	r4, lr
1a00254a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a00254e:	fba0 8902 	umull	r8, r9, r0, r2
1a002552:	eba4 040a 	sub.w	r4, r4, sl
1a002556:	454c      	cmp	r4, r9
1a002558:	46c2      	mov	sl, r8
1a00255a:	464b      	mov	r3, r9
1a00255c:	d354      	bcc.n	1a002608 <__udivmoddi4+0x298>
1a00255e:	d051      	beq.n	1a002604 <__udivmoddi4+0x294>
1a002560:	2e00      	cmp	r6, #0
1a002562:	d069      	beq.n	1a002638 <__udivmoddi4+0x2c8>
1a002564:	ebb1 050a 	subs.w	r5, r1, sl
1a002568:	eb64 0403 	sbc.w	r4, r4, r3
1a00256c:	fa04 fc0c 	lsl.w	ip, r4, ip
1a002570:	40fd      	lsrs	r5, r7
1a002572:	40fc      	lsrs	r4, r7
1a002574:	ea4c 0505 	orr.w	r5, ip, r5
1a002578:	e9c6 5400 	strd	r5, r4, [r6]
1a00257c:	2700      	movs	r7, #0
1a00257e:	e747      	b.n	1a002410 <__udivmoddi4+0xa0>
1a002580:	f1c2 0320 	rsb	r3, r2, #32
1a002584:	fa20 f703 	lsr.w	r7, r0, r3
1a002588:	4095      	lsls	r5, r2
1a00258a:	fa01 f002 	lsl.w	r0, r1, r2
1a00258e:	fa21 f303 	lsr.w	r3, r1, r3
1a002592:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002596:	4338      	orrs	r0, r7
1a002598:	0c01      	lsrs	r1, r0, #16
1a00259a:	fbb3 f7fe 	udiv	r7, r3, lr
1a00259e:	fa1f f885 	uxth.w	r8, r5
1a0025a2:	fb0e 3317 	mls	r3, lr, r7, r3
1a0025a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0025aa:	fb07 f308 	mul.w	r3, r7, r8
1a0025ae:	428b      	cmp	r3, r1
1a0025b0:	fa04 f402 	lsl.w	r4, r4, r2
1a0025b4:	d907      	bls.n	1a0025c6 <__udivmoddi4+0x256>
1a0025b6:	1869      	adds	r1, r5, r1
1a0025b8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0025bc:	d22f      	bcs.n	1a00261e <__udivmoddi4+0x2ae>
1a0025be:	428b      	cmp	r3, r1
1a0025c0:	d92d      	bls.n	1a00261e <__udivmoddi4+0x2ae>
1a0025c2:	3f02      	subs	r7, #2
1a0025c4:	4429      	add	r1, r5
1a0025c6:	1acb      	subs	r3, r1, r3
1a0025c8:	b281      	uxth	r1, r0
1a0025ca:	fbb3 f0fe 	udiv	r0, r3, lr
1a0025ce:	fb0e 3310 	mls	r3, lr, r0, r3
1a0025d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0025d6:	fb00 f308 	mul.w	r3, r0, r8
1a0025da:	428b      	cmp	r3, r1
1a0025dc:	d907      	bls.n	1a0025ee <__udivmoddi4+0x27e>
1a0025de:	1869      	adds	r1, r5, r1
1a0025e0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a0025e4:	d217      	bcs.n	1a002616 <__udivmoddi4+0x2a6>
1a0025e6:	428b      	cmp	r3, r1
1a0025e8:	d915      	bls.n	1a002616 <__udivmoddi4+0x2a6>
1a0025ea:	3802      	subs	r0, #2
1a0025ec:	4429      	add	r1, r5
1a0025ee:	1ac9      	subs	r1, r1, r3
1a0025f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a0025f4:	e73b      	b.n	1a00246e <__udivmoddi4+0xfe>
1a0025f6:	4637      	mov	r7, r6
1a0025f8:	4630      	mov	r0, r6
1a0025fa:	e709      	b.n	1a002410 <__udivmoddi4+0xa0>
1a0025fc:	4607      	mov	r7, r0
1a0025fe:	e6e7      	b.n	1a0023d0 <__udivmoddi4+0x60>
1a002600:	4618      	mov	r0, r3
1a002602:	e6fb      	b.n	1a0023fc <__udivmoddi4+0x8c>
1a002604:	4541      	cmp	r1, r8
1a002606:	d2ab      	bcs.n	1a002560 <__udivmoddi4+0x1f0>
1a002608:	ebb8 0a02 	subs.w	sl, r8, r2
1a00260c:	eb69 020e 	sbc.w	r2, r9, lr
1a002610:	3801      	subs	r0, #1
1a002612:	4613      	mov	r3, r2
1a002614:	e7a4      	b.n	1a002560 <__udivmoddi4+0x1f0>
1a002616:	4660      	mov	r0, ip
1a002618:	e7e9      	b.n	1a0025ee <__udivmoddi4+0x27e>
1a00261a:	4618      	mov	r0, r3
1a00261c:	e795      	b.n	1a00254a <__udivmoddi4+0x1da>
1a00261e:	4667      	mov	r7, ip
1a002620:	e7d1      	b.n	1a0025c6 <__udivmoddi4+0x256>
1a002622:	4681      	mov	r9, r0
1a002624:	e77c      	b.n	1a002520 <__udivmoddi4+0x1b0>
1a002626:	3802      	subs	r0, #2
1a002628:	442c      	add	r4, r5
1a00262a:	e747      	b.n	1a0024bc <__udivmoddi4+0x14c>
1a00262c:	f1ac 0c02 	sub.w	ip, ip, #2
1a002630:	442b      	add	r3, r5
1a002632:	e72f      	b.n	1a002494 <__udivmoddi4+0x124>
1a002634:	4638      	mov	r0, r7
1a002636:	e708      	b.n	1a00244a <__udivmoddi4+0xda>
1a002638:	4637      	mov	r7, r6
1a00263a:	e6e9      	b.n	1a002410 <__udivmoddi4+0xa0>

1a00263c <__aeabi_idiv0>:
1a00263c:	4770      	bx	lr
1a00263e:	bf00      	nop

1a002640 <__libc_init_array>:
1a002640:	b570      	push	{r4, r5, r6, lr}
1a002642:	4e0d      	ldr	r6, [pc, #52]	; (1a002678 <__libc_init_array+0x38>)
1a002644:	4c0d      	ldr	r4, [pc, #52]	; (1a00267c <__libc_init_array+0x3c>)
1a002646:	1ba4      	subs	r4, r4, r6
1a002648:	10a4      	asrs	r4, r4, #2
1a00264a:	2500      	movs	r5, #0
1a00264c:	42a5      	cmp	r5, r4
1a00264e:	d109      	bne.n	1a002664 <__libc_init_array+0x24>
1a002650:	4e0b      	ldr	r6, [pc, #44]	; (1a002680 <__libc_init_array+0x40>)
1a002652:	4c0c      	ldr	r4, [pc, #48]	; (1a002684 <__libc_init_array+0x44>)
1a002654:	f7fe fae1 	bl	1a000c1a <_init>
1a002658:	1ba4      	subs	r4, r4, r6
1a00265a:	10a4      	asrs	r4, r4, #2
1a00265c:	2500      	movs	r5, #0
1a00265e:	42a5      	cmp	r5, r4
1a002660:	d105      	bne.n	1a00266e <__libc_init_array+0x2e>
1a002662:	bd70      	pop	{r4, r5, r6, pc}
1a002664:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a002668:	4798      	blx	r3
1a00266a:	3501      	adds	r5, #1
1a00266c:	e7ee      	b.n	1a00264c <__libc_init_array+0xc>
1a00266e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a002672:	4798      	blx	r3
1a002674:	3501      	adds	r5, #1
1a002676:	e7f2      	b.n	1a00265e <__libc_init_array+0x1e>
1a002678:	1a0038a8 	.word	0x1a0038a8
1a00267c:	1a0038a8 	.word	0x1a0038a8
1a002680:	1a0038a8 	.word	0x1a0038a8
1a002684:	1a0038ac 	.word	0x1a0038ac

1a002688 <memset>:
1a002688:	4402      	add	r2, r0
1a00268a:	4603      	mov	r3, r0
1a00268c:	4293      	cmp	r3, r2
1a00268e:	d100      	bne.n	1a002692 <memset+0xa>
1a002690:	4770      	bx	lr
1a002692:	f803 1b01 	strb.w	r1, [r3], #1
1a002696:	e7f9      	b.n	1a00268c <memset+0x4>

1a002698 <iprintf>:
1a002698:	b40f      	push	{r0, r1, r2, r3}
1a00269a:	4b0a      	ldr	r3, [pc, #40]	; (1a0026c4 <iprintf+0x2c>)
1a00269c:	b513      	push	{r0, r1, r4, lr}
1a00269e:	681c      	ldr	r4, [r3, #0]
1a0026a0:	b124      	cbz	r4, 1a0026ac <iprintf+0x14>
1a0026a2:	69a3      	ldr	r3, [r4, #24]
1a0026a4:	b913      	cbnz	r3, 1a0026ac <iprintf+0x14>
1a0026a6:	4620      	mov	r0, r4
1a0026a8:	f000 fa22 	bl	1a002af0 <__sinit>
1a0026ac:	ab05      	add	r3, sp, #20
1a0026ae:	9a04      	ldr	r2, [sp, #16]
1a0026b0:	68a1      	ldr	r1, [r4, #8]
1a0026b2:	9301      	str	r3, [sp, #4]
1a0026b4:	4620      	mov	r0, r4
1a0026b6:	f000 fbdb 	bl	1a002e70 <_vfiprintf_r>
1a0026ba:	b002      	add	sp, #8
1a0026bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0026c0:	b004      	add	sp, #16
1a0026c2:	4770      	bx	lr
1a0026c4:	10000084 	.word	0x10000084

1a0026c8 <_puts_r>:
1a0026c8:	b570      	push	{r4, r5, r6, lr}
1a0026ca:	460e      	mov	r6, r1
1a0026cc:	4605      	mov	r5, r0
1a0026ce:	b118      	cbz	r0, 1a0026d8 <_puts_r+0x10>
1a0026d0:	6983      	ldr	r3, [r0, #24]
1a0026d2:	b90b      	cbnz	r3, 1a0026d8 <_puts_r+0x10>
1a0026d4:	f000 fa0c 	bl	1a002af0 <__sinit>
1a0026d8:	69ab      	ldr	r3, [r5, #24]
1a0026da:	68ac      	ldr	r4, [r5, #8]
1a0026dc:	b913      	cbnz	r3, 1a0026e4 <_puts_r+0x1c>
1a0026de:	4628      	mov	r0, r5
1a0026e0:	f000 fa06 	bl	1a002af0 <__sinit>
1a0026e4:	4b23      	ldr	r3, [pc, #140]	; (1a002774 <_puts_r+0xac>)
1a0026e6:	429c      	cmp	r4, r3
1a0026e8:	d117      	bne.n	1a00271a <_puts_r+0x52>
1a0026ea:	686c      	ldr	r4, [r5, #4]
1a0026ec:	89a3      	ldrh	r3, [r4, #12]
1a0026ee:	071b      	lsls	r3, r3, #28
1a0026f0:	d51d      	bpl.n	1a00272e <_puts_r+0x66>
1a0026f2:	6923      	ldr	r3, [r4, #16]
1a0026f4:	b1db      	cbz	r3, 1a00272e <_puts_r+0x66>
1a0026f6:	3e01      	subs	r6, #1
1a0026f8:	68a3      	ldr	r3, [r4, #8]
1a0026fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a0026fe:	3b01      	subs	r3, #1
1a002700:	60a3      	str	r3, [r4, #8]
1a002702:	b9e9      	cbnz	r1, 1a002740 <_puts_r+0x78>
1a002704:	2b00      	cmp	r3, #0
1a002706:	da2e      	bge.n	1a002766 <_puts_r+0x9e>
1a002708:	4622      	mov	r2, r4
1a00270a:	210a      	movs	r1, #10
1a00270c:	4628      	mov	r0, r5
1a00270e:	f000 f83f 	bl	1a002790 <__swbuf_r>
1a002712:	3001      	adds	r0, #1
1a002714:	d011      	beq.n	1a00273a <_puts_r+0x72>
1a002716:	200a      	movs	r0, #10
1a002718:	e011      	b.n	1a00273e <_puts_r+0x76>
1a00271a:	4b17      	ldr	r3, [pc, #92]	; (1a002778 <_puts_r+0xb0>)
1a00271c:	429c      	cmp	r4, r3
1a00271e:	d101      	bne.n	1a002724 <_puts_r+0x5c>
1a002720:	68ac      	ldr	r4, [r5, #8]
1a002722:	e7e3      	b.n	1a0026ec <_puts_r+0x24>
1a002724:	4b15      	ldr	r3, [pc, #84]	; (1a00277c <_puts_r+0xb4>)
1a002726:	429c      	cmp	r4, r3
1a002728:	bf08      	it	eq
1a00272a:	68ec      	ldreq	r4, [r5, #12]
1a00272c:	e7de      	b.n	1a0026ec <_puts_r+0x24>
1a00272e:	4621      	mov	r1, r4
1a002730:	4628      	mov	r0, r5
1a002732:	f000 f87f 	bl	1a002834 <__swsetup_r>
1a002736:	2800      	cmp	r0, #0
1a002738:	d0dd      	beq.n	1a0026f6 <_puts_r+0x2e>
1a00273a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00273e:	bd70      	pop	{r4, r5, r6, pc}
1a002740:	2b00      	cmp	r3, #0
1a002742:	da04      	bge.n	1a00274e <_puts_r+0x86>
1a002744:	69a2      	ldr	r2, [r4, #24]
1a002746:	429a      	cmp	r2, r3
1a002748:	dc06      	bgt.n	1a002758 <_puts_r+0x90>
1a00274a:	290a      	cmp	r1, #10
1a00274c:	d004      	beq.n	1a002758 <_puts_r+0x90>
1a00274e:	6823      	ldr	r3, [r4, #0]
1a002750:	1c5a      	adds	r2, r3, #1
1a002752:	6022      	str	r2, [r4, #0]
1a002754:	7019      	strb	r1, [r3, #0]
1a002756:	e7cf      	b.n	1a0026f8 <_puts_r+0x30>
1a002758:	4622      	mov	r2, r4
1a00275a:	4628      	mov	r0, r5
1a00275c:	f000 f818 	bl	1a002790 <__swbuf_r>
1a002760:	3001      	adds	r0, #1
1a002762:	d1c9      	bne.n	1a0026f8 <_puts_r+0x30>
1a002764:	e7e9      	b.n	1a00273a <_puts_r+0x72>
1a002766:	6823      	ldr	r3, [r4, #0]
1a002768:	200a      	movs	r0, #10
1a00276a:	1c5a      	adds	r2, r3, #1
1a00276c:	6022      	str	r2, [r4, #0]
1a00276e:	7018      	strb	r0, [r3, #0]
1a002770:	e7e5      	b.n	1a00273e <_puts_r+0x76>
1a002772:	bf00      	nop
1a002774:	1a003830 	.word	0x1a003830
1a002778:	1a003850 	.word	0x1a003850
1a00277c:	1a003810 	.word	0x1a003810

1a002780 <puts>:
1a002780:	4b02      	ldr	r3, [pc, #8]	; (1a00278c <puts+0xc>)
1a002782:	4601      	mov	r1, r0
1a002784:	6818      	ldr	r0, [r3, #0]
1a002786:	f7ff bf9f 	b.w	1a0026c8 <_puts_r>
1a00278a:	bf00      	nop
1a00278c:	10000084 	.word	0x10000084

1a002790 <__swbuf_r>:
1a002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002792:	460e      	mov	r6, r1
1a002794:	4614      	mov	r4, r2
1a002796:	4605      	mov	r5, r0
1a002798:	b118      	cbz	r0, 1a0027a2 <__swbuf_r+0x12>
1a00279a:	6983      	ldr	r3, [r0, #24]
1a00279c:	b90b      	cbnz	r3, 1a0027a2 <__swbuf_r+0x12>
1a00279e:	f000 f9a7 	bl	1a002af0 <__sinit>
1a0027a2:	4b21      	ldr	r3, [pc, #132]	; (1a002828 <__swbuf_r+0x98>)
1a0027a4:	429c      	cmp	r4, r3
1a0027a6:	d12a      	bne.n	1a0027fe <__swbuf_r+0x6e>
1a0027a8:	686c      	ldr	r4, [r5, #4]
1a0027aa:	69a3      	ldr	r3, [r4, #24]
1a0027ac:	60a3      	str	r3, [r4, #8]
1a0027ae:	89a3      	ldrh	r3, [r4, #12]
1a0027b0:	071a      	lsls	r2, r3, #28
1a0027b2:	d52e      	bpl.n	1a002812 <__swbuf_r+0x82>
1a0027b4:	6923      	ldr	r3, [r4, #16]
1a0027b6:	b363      	cbz	r3, 1a002812 <__swbuf_r+0x82>
1a0027b8:	6923      	ldr	r3, [r4, #16]
1a0027ba:	6820      	ldr	r0, [r4, #0]
1a0027bc:	1ac0      	subs	r0, r0, r3
1a0027be:	6963      	ldr	r3, [r4, #20]
1a0027c0:	b2f6      	uxtb	r6, r6
1a0027c2:	4283      	cmp	r3, r0
1a0027c4:	4637      	mov	r7, r6
1a0027c6:	dc04      	bgt.n	1a0027d2 <__swbuf_r+0x42>
1a0027c8:	4621      	mov	r1, r4
1a0027ca:	4628      	mov	r0, r5
1a0027cc:	f000 f926 	bl	1a002a1c <_fflush_r>
1a0027d0:	bb28      	cbnz	r0, 1a00281e <__swbuf_r+0x8e>
1a0027d2:	68a3      	ldr	r3, [r4, #8]
1a0027d4:	3b01      	subs	r3, #1
1a0027d6:	60a3      	str	r3, [r4, #8]
1a0027d8:	6823      	ldr	r3, [r4, #0]
1a0027da:	1c5a      	adds	r2, r3, #1
1a0027dc:	6022      	str	r2, [r4, #0]
1a0027de:	701e      	strb	r6, [r3, #0]
1a0027e0:	6963      	ldr	r3, [r4, #20]
1a0027e2:	3001      	adds	r0, #1
1a0027e4:	4283      	cmp	r3, r0
1a0027e6:	d004      	beq.n	1a0027f2 <__swbuf_r+0x62>
1a0027e8:	89a3      	ldrh	r3, [r4, #12]
1a0027ea:	07db      	lsls	r3, r3, #31
1a0027ec:	d519      	bpl.n	1a002822 <__swbuf_r+0x92>
1a0027ee:	2e0a      	cmp	r6, #10
1a0027f0:	d117      	bne.n	1a002822 <__swbuf_r+0x92>
1a0027f2:	4621      	mov	r1, r4
1a0027f4:	4628      	mov	r0, r5
1a0027f6:	f000 f911 	bl	1a002a1c <_fflush_r>
1a0027fa:	b190      	cbz	r0, 1a002822 <__swbuf_r+0x92>
1a0027fc:	e00f      	b.n	1a00281e <__swbuf_r+0x8e>
1a0027fe:	4b0b      	ldr	r3, [pc, #44]	; (1a00282c <__swbuf_r+0x9c>)
1a002800:	429c      	cmp	r4, r3
1a002802:	d101      	bne.n	1a002808 <__swbuf_r+0x78>
1a002804:	68ac      	ldr	r4, [r5, #8]
1a002806:	e7d0      	b.n	1a0027aa <__swbuf_r+0x1a>
1a002808:	4b09      	ldr	r3, [pc, #36]	; (1a002830 <__swbuf_r+0xa0>)
1a00280a:	429c      	cmp	r4, r3
1a00280c:	bf08      	it	eq
1a00280e:	68ec      	ldreq	r4, [r5, #12]
1a002810:	e7cb      	b.n	1a0027aa <__swbuf_r+0x1a>
1a002812:	4621      	mov	r1, r4
1a002814:	4628      	mov	r0, r5
1a002816:	f000 f80d 	bl	1a002834 <__swsetup_r>
1a00281a:	2800      	cmp	r0, #0
1a00281c:	d0cc      	beq.n	1a0027b8 <__swbuf_r+0x28>
1a00281e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a002822:	4638      	mov	r0, r7
1a002824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002826:	bf00      	nop
1a002828:	1a003830 	.word	0x1a003830
1a00282c:	1a003850 	.word	0x1a003850
1a002830:	1a003810 	.word	0x1a003810

1a002834 <__swsetup_r>:
1a002834:	4b32      	ldr	r3, [pc, #200]	; (1a002900 <__swsetup_r+0xcc>)
1a002836:	b570      	push	{r4, r5, r6, lr}
1a002838:	681d      	ldr	r5, [r3, #0]
1a00283a:	4606      	mov	r6, r0
1a00283c:	460c      	mov	r4, r1
1a00283e:	b125      	cbz	r5, 1a00284a <__swsetup_r+0x16>
1a002840:	69ab      	ldr	r3, [r5, #24]
1a002842:	b913      	cbnz	r3, 1a00284a <__swsetup_r+0x16>
1a002844:	4628      	mov	r0, r5
1a002846:	f000 f953 	bl	1a002af0 <__sinit>
1a00284a:	4b2e      	ldr	r3, [pc, #184]	; (1a002904 <__swsetup_r+0xd0>)
1a00284c:	429c      	cmp	r4, r3
1a00284e:	d10f      	bne.n	1a002870 <__swsetup_r+0x3c>
1a002850:	686c      	ldr	r4, [r5, #4]
1a002852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002856:	b29a      	uxth	r2, r3
1a002858:	0715      	lsls	r5, r2, #28
1a00285a:	d42c      	bmi.n	1a0028b6 <__swsetup_r+0x82>
1a00285c:	06d0      	lsls	r0, r2, #27
1a00285e:	d411      	bmi.n	1a002884 <__swsetup_r+0x50>
1a002860:	2209      	movs	r2, #9
1a002862:	6032      	str	r2, [r6, #0]
1a002864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002868:	81a3      	strh	r3, [r4, #12]
1a00286a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00286e:	e03e      	b.n	1a0028ee <__swsetup_r+0xba>
1a002870:	4b25      	ldr	r3, [pc, #148]	; (1a002908 <__swsetup_r+0xd4>)
1a002872:	429c      	cmp	r4, r3
1a002874:	d101      	bne.n	1a00287a <__swsetup_r+0x46>
1a002876:	68ac      	ldr	r4, [r5, #8]
1a002878:	e7eb      	b.n	1a002852 <__swsetup_r+0x1e>
1a00287a:	4b24      	ldr	r3, [pc, #144]	; (1a00290c <__swsetup_r+0xd8>)
1a00287c:	429c      	cmp	r4, r3
1a00287e:	bf08      	it	eq
1a002880:	68ec      	ldreq	r4, [r5, #12]
1a002882:	e7e6      	b.n	1a002852 <__swsetup_r+0x1e>
1a002884:	0751      	lsls	r1, r2, #29
1a002886:	d512      	bpl.n	1a0028ae <__swsetup_r+0x7a>
1a002888:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a00288a:	b141      	cbz	r1, 1a00289e <__swsetup_r+0x6a>
1a00288c:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a002890:	4299      	cmp	r1, r3
1a002892:	d002      	beq.n	1a00289a <__swsetup_r+0x66>
1a002894:	4630      	mov	r0, r6
1a002896:	f000 fa19 	bl	1a002ccc <_free_r>
1a00289a:	2300      	movs	r3, #0
1a00289c:	6363      	str	r3, [r4, #52]	; 0x34
1a00289e:	89a3      	ldrh	r3, [r4, #12]
1a0028a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a0028a4:	81a3      	strh	r3, [r4, #12]
1a0028a6:	2300      	movs	r3, #0
1a0028a8:	6063      	str	r3, [r4, #4]
1a0028aa:	6923      	ldr	r3, [r4, #16]
1a0028ac:	6023      	str	r3, [r4, #0]
1a0028ae:	89a3      	ldrh	r3, [r4, #12]
1a0028b0:	f043 0308 	orr.w	r3, r3, #8
1a0028b4:	81a3      	strh	r3, [r4, #12]
1a0028b6:	6923      	ldr	r3, [r4, #16]
1a0028b8:	b94b      	cbnz	r3, 1a0028ce <__swsetup_r+0x9a>
1a0028ba:	89a3      	ldrh	r3, [r4, #12]
1a0028bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a0028c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0028c4:	d003      	beq.n	1a0028ce <__swsetup_r+0x9a>
1a0028c6:	4621      	mov	r1, r4
1a0028c8:	4630      	mov	r0, r6
1a0028ca:	f000 f9bf 	bl	1a002c4c <__smakebuf_r>
1a0028ce:	89a2      	ldrh	r2, [r4, #12]
1a0028d0:	f012 0301 	ands.w	r3, r2, #1
1a0028d4:	d00c      	beq.n	1a0028f0 <__swsetup_r+0xbc>
1a0028d6:	2300      	movs	r3, #0
1a0028d8:	60a3      	str	r3, [r4, #8]
1a0028da:	6963      	ldr	r3, [r4, #20]
1a0028dc:	425b      	negs	r3, r3
1a0028de:	61a3      	str	r3, [r4, #24]
1a0028e0:	6923      	ldr	r3, [r4, #16]
1a0028e2:	b953      	cbnz	r3, 1a0028fa <__swsetup_r+0xc6>
1a0028e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0028e8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a0028ec:	d1ba      	bne.n	1a002864 <__swsetup_r+0x30>
1a0028ee:	bd70      	pop	{r4, r5, r6, pc}
1a0028f0:	0792      	lsls	r2, r2, #30
1a0028f2:	bf58      	it	pl
1a0028f4:	6963      	ldrpl	r3, [r4, #20]
1a0028f6:	60a3      	str	r3, [r4, #8]
1a0028f8:	e7f2      	b.n	1a0028e0 <__swsetup_r+0xac>
1a0028fa:	2000      	movs	r0, #0
1a0028fc:	e7f7      	b.n	1a0028ee <__swsetup_r+0xba>
1a0028fe:	bf00      	nop
1a002900:	10000084 	.word	0x10000084
1a002904:	1a003830 	.word	0x1a003830
1a002908:	1a003850 	.word	0x1a003850
1a00290c:	1a003810 	.word	0x1a003810

1a002910 <__sflush_r>:
1a002910:	898a      	ldrh	r2, [r1, #12]
1a002912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002916:	4605      	mov	r5, r0
1a002918:	0710      	lsls	r0, r2, #28
1a00291a:	460c      	mov	r4, r1
1a00291c:	d458      	bmi.n	1a0029d0 <__sflush_r+0xc0>
1a00291e:	684b      	ldr	r3, [r1, #4]
1a002920:	2b00      	cmp	r3, #0
1a002922:	dc05      	bgt.n	1a002930 <__sflush_r+0x20>
1a002924:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a002926:	2b00      	cmp	r3, #0
1a002928:	dc02      	bgt.n	1a002930 <__sflush_r+0x20>
1a00292a:	2000      	movs	r0, #0
1a00292c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002930:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a002932:	2e00      	cmp	r6, #0
1a002934:	d0f9      	beq.n	1a00292a <__sflush_r+0x1a>
1a002936:	2300      	movs	r3, #0
1a002938:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a00293c:	682f      	ldr	r7, [r5, #0]
1a00293e:	6a21      	ldr	r1, [r4, #32]
1a002940:	602b      	str	r3, [r5, #0]
1a002942:	d032      	beq.n	1a0029aa <__sflush_r+0x9a>
1a002944:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a002946:	89a3      	ldrh	r3, [r4, #12]
1a002948:	075a      	lsls	r2, r3, #29
1a00294a:	d505      	bpl.n	1a002958 <__sflush_r+0x48>
1a00294c:	6863      	ldr	r3, [r4, #4]
1a00294e:	1ac0      	subs	r0, r0, r3
1a002950:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a002952:	b10b      	cbz	r3, 1a002958 <__sflush_r+0x48>
1a002954:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a002956:	1ac0      	subs	r0, r0, r3
1a002958:	2300      	movs	r3, #0
1a00295a:	4602      	mov	r2, r0
1a00295c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a00295e:	6a21      	ldr	r1, [r4, #32]
1a002960:	4628      	mov	r0, r5
1a002962:	47b0      	blx	r6
1a002964:	1c43      	adds	r3, r0, #1
1a002966:	89a3      	ldrh	r3, [r4, #12]
1a002968:	d106      	bne.n	1a002978 <__sflush_r+0x68>
1a00296a:	6829      	ldr	r1, [r5, #0]
1a00296c:	291d      	cmp	r1, #29
1a00296e:	d848      	bhi.n	1a002a02 <__sflush_r+0xf2>
1a002970:	4a29      	ldr	r2, [pc, #164]	; (1a002a18 <__sflush_r+0x108>)
1a002972:	40ca      	lsrs	r2, r1
1a002974:	07d6      	lsls	r6, r2, #31
1a002976:	d544      	bpl.n	1a002a02 <__sflush_r+0xf2>
1a002978:	2200      	movs	r2, #0
1a00297a:	6062      	str	r2, [r4, #4]
1a00297c:	04d9      	lsls	r1, r3, #19
1a00297e:	6922      	ldr	r2, [r4, #16]
1a002980:	6022      	str	r2, [r4, #0]
1a002982:	d504      	bpl.n	1a00298e <__sflush_r+0x7e>
1a002984:	1c42      	adds	r2, r0, #1
1a002986:	d101      	bne.n	1a00298c <__sflush_r+0x7c>
1a002988:	682b      	ldr	r3, [r5, #0]
1a00298a:	b903      	cbnz	r3, 1a00298e <__sflush_r+0x7e>
1a00298c:	6560      	str	r0, [r4, #84]	; 0x54
1a00298e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a002990:	602f      	str	r7, [r5, #0]
1a002992:	2900      	cmp	r1, #0
1a002994:	d0c9      	beq.n	1a00292a <__sflush_r+0x1a>
1a002996:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00299a:	4299      	cmp	r1, r3
1a00299c:	d002      	beq.n	1a0029a4 <__sflush_r+0x94>
1a00299e:	4628      	mov	r0, r5
1a0029a0:	f000 f994 	bl	1a002ccc <_free_r>
1a0029a4:	2000      	movs	r0, #0
1a0029a6:	6360      	str	r0, [r4, #52]	; 0x34
1a0029a8:	e7c0      	b.n	1a00292c <__sflush_r+0x1c>
1a0029aa:	2301      	movs	r3, #1
1a0029ac:	4628      	mov	r0, r5
1a0029ae:	47b0      	blx	r6
1a0029b0:	1c41      	adds	r1, r0, #1
1a0029b2:	d1c8      	bne.n	1a002946 <__sflush_r+0x36>
1a0029b4:	682b      	ldr	r3, [r5, #0]
1a0029b6:	2b00      	cmp	r3, #0
1a0029b8:	d0c5      	beq.n	1a002946 <__sflush_r+0x36>
1a0029ba:	2b1d      	cmp	r3, #29
1a0029bc:	d001      	beq.n	1a0029c2 <__sflush_r+0xb2>
1a0029be:	2b16      	cmp	r3, #22
1a0029c0:	d101      	bne.n	1a0029c6 <__sflush_r+0xb6>
1a0029c2:	602f      	str	r7, [r5, #0]
1a0029c4:	e7b1      	b.n	1a00292a <__sflush_r+0x1a>
1a0029c6:	89a3      	ldrh	r3, [r4, #12]
1a0029c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0029cc:	81a3      	strh	r3, [r4, #12]
1a0029ce:	e7ad      	b.n	1a00292c <__sflush_r+0x1c>
1a0029d0:	690f      	ldr	r7, [r1, #16]
1a0029d2:	2f00      	cmp	r7, #0
1a0029d4:	d0a9      	beq.n	1a00292a <__sflush_r+0x1a>
1a0029d6:	0793      	lsls	r3, r2, #30
1a0029d8:	680e      	ldr	r6, [r1, #0]
1a0029da:	bf08      	it	eq
1a0029dc:	694b      	ldreq	r3, [r1, #20]
1a0029de:	600f      	str	r7, [r1, #0]
1a0029e0:	bf18      	it	ne
1a0029e2:	2300      	movne	r3, #0
1a0029e4:	eba6 0807 	sub.w	r8, r6, r7
1a0029e8:	608b      	str	r3, [r1, #8]
1a0029ea:	f1b8 0f00 	cmp.w	r8, #0
1a0029ee:	dd9c      	ble.n	1a00292a <__sflush_r+0x1a>
1a0029f0:	4643      	mov	r3, r8
1a0029f2:	463a      	mov	r2, r7
1a0029f4:	6a21      	ldr	r1, [r4, #32]
1a0029f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a0029f8:	4628      	mov	r0, r5
1a0029fa:	47b0      	blx	r6
1a0029fc:	2800      	cmp	r0, #0
1a0029fe:	dc06      	bgt.n	1a002a0e <__sflush_r+0xfe>
1a002a00:	89a3      	ldrh	r3, [r4, #12]
1a002a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002a06:	81a3      	strh	r3, [r4, #12]
1a002a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002a0c:	e78e      	b.n	1a00292c <__sflush_r+0x1c>
1a002a0e:	4407      	add	r7, r0
1a002a10:	eba8 0800 	sub.w	r8, r8, r0
1a002a14:	e7e9      	b.n	1a0029ea <__sflush_r+0xda>
1a002a16:	bf00      	nop
1a002a18:	20400001 	.word	0x20400001

1a002a1c <_fflush_r>:
1a002a1c:	b538      	push	{r3, r4, r5, lr}
1a002a1e:	690b      	ldr	r3, [r1, #16]
1a002a20:	4605      	mov	r5, r0
1a002a22:	460c      	mov	r4, r1
1a002a24:	b1db      	cbz	r3, 1a002a5e <_fflush_r+0x42>
1a002a26:	b118      	cbz	r0, 1a002a30 <_fflush_r+0x14>
1a002a28:	6983      	ldr	r3, [r0, #24]
1a002a2a:	b90b      	cbnz	r3, 1a002a30 <_fflush_r+0x14>
1a002a2c:	f000 f860 	bl	1a002af0 <__sinit>
1a002a30:	4b0c      	ldr	r3, [pc, #48]	; (1a002a64 <_fflush_r+0x48>)
1a002a32:	429c      	cmp	r4, r3
1a002a34:	d109      	bne.n	1a002a4a <_fflush_r+0x2e>
1a002a36:	686c      	ldr	r4, [r5, #4]
1a002a38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002a3c:	b17b      	cbz	r3, 1a002a5e <_fflush_r+0x42>
1a002a3e:	4621      	mov	r1, r4
1a002a40:	4628      	mov	r0, r5
1a002a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a002a46:	f7ff bf63 	b.w	1a002910 <__sflush_r>
1a002a4a:	4b07      	ldr	r3, [pc, #28]	; (1a002a68 <_fflush_r+0x4c>)
1a002a4c:	429c      	cmp	r4, r3
1a002a4e:	d101      	bne.n	1a002a54 <_fflush_r+0x38>
1a002a50:	68ac      	ldr	r4, [r5, #8]
1a002a52:	e7f1      	b.n	1a002a38 <_fflush_r+0x1c>
1a002a54:	4b05      	ldr	r3, [pc, #20]	; (1a002a6c <_fflush_r+0x50>)
1a002a56:	429c      	cmp	r4, r3
1a002a58:	bf08      	it	eq
1a002a5a:	68ec      	ldreq	r4, [r5, #12]
1a002a5c:	e7ec      	b.n	1a002a38 <_fflush_r+0x1c>
1a002a5e:	2000      	movs	r0, #0
1a002a60:	bd38      	pop	{r3, r4, r5, pc}
1a002a62:	bf00      	nop
1a002a64:	1a003830 	.word	0x1a003830
1a002a68:	1a003850 	.word	0x1a003850
1a002a6c:	1a003810 	.word	0x1a003810

1a002a70 <std>:
1a002a70:	2300      	movs	r3, #0
1a002a72:	b510      	push	{r4, lr}
1a002a74:	4604      	mov	r4, r0
1a002a76:	e9c0 3300 	strd	r3, r3, [r0]
1a002a7a:	6083      	str	r3, [r0, #8]
1a002a7c:	8181      	strh	r1, [r0, #12]
1a002a7e:	6643      	str	r3, [r0, #100]	; 0x64
1a002a80:	81c2      	strh	r2, [r0, #14]
1a002a82:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a002a86:	6183      	str	r3, [r0, #24]
1a002a88:	4619      	mov	r1, r3
1a002a8a:	2208      	movs	r2, #8
1a002a8c:	305c      	adds	r0, #92	; 0x5c
1a002a8e:	f7ff fdfb 	bl	1a002688 <memset>
1a002a92:	4b05      	ldr	r3, [pc, #20]	; (1a002aa8 <std+0x38>)
1a002a94:	6263      	str	r3, [r4, #36]	; 0x24
1a002a96:	4b05      	ldr	r3, [pc, #20]	; (1a002aac <std+0x3c>)
1a002a98:	62a3      	str	r3, [r4, #40]	; 0x28
1a002a9a:	4b05      	ldr	r3, [pc, #20]	; (1a002ab0 <std+0x40>)
1a002a9c:	62e3      	str	r3, [r4, #44]	; 0x2c
1a002a9e:	4b05      	ldr	r3, [pc, #20]	; (1a002ab4 <std+0x44>)
1a002aa0:	6224      	str	r4, [r4, #32]
1a002aa2:	6323      	str	r3, [r4, #48]	; 0x30
1a002aa4:	bd10      	pop	{r4, pc}
1a002aa6:	bf00      	nop
1a002aa8:	1a0033ad 	.word	0x1a0033ad
1a002aac:	1a0033cf 	.word	0x1a0033cf
1a002ab0:	1a003407 	.word	0x1a003407
1a002ab4:	1a00342b 	.word	0x1a00342b

1a002ab8 <_cleanup_r>:
1a002ab8:	4901      	ldr	r1, [pc, #4]	; (1a002ac0 <_cleanup_r+0x8>)
1a002aba:	f000 b885 	b.w	1a002bc8 <_fwalk_reent>
1a002abe:	bf00      	nop
1a002ac0:	1a002a1d 	.word	0x1a002a1d

1a002ac4 <__sfmoreglue>:
1a002ac4:	b570      	push	{r4, r5, r6, lr}
1a002ac6:	1e4a      	subs	r2, r1, #1
1a002ac8:	2568      	movs	r5, #104	; 0x68
1a002aca:	4355      	muls	r5, r2
1a002acc:	460e      	mov	r6, r1
1a002ace:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a002ad2:	f000 f949 	bl	1a002d68 <_malloc_r>
1a002ad6:	4604      	mov	r4, r0
1a002ad8:	b140      	cbz	r0, 1a002aec <__sfmoreglue+0x28>
1a002ada:	2100      	movs	r1, #0
1a002adc:	e9c0 1600 	strd	r1, r6, [r0]
1a002ae0:	300c      	adds	r0, #12
1a002ae2:	60a0      	str	r0, [r4, #8]
1a002ae4:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a002ae8:	f7ff fdce 	bl	1a002688 <memset>
1a002aec:	4620      	mov	r0, r4
1a002aee:	bd70      	pop	{r4, r5, r6, pc}

1a002af0 <__sinit>:
1a002af0:	6983      	ldr	r3, [r0, #24]
1a002af2:	b510      	push	{r4, lr}
1a002af4:	4604      	mov	r4, r0
1a002af6:	bb33      	cbnz	r3, 1a002b46 <__sinit+0x56>
1a002af8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a002afc:	6503      	str	r3, [r0, #80]	; 0x50
1a002afe:	4b12      	ldr	r3, [pc, #72]	; (1a002b48 <__sinit+0x58>)
1a002b00:	4a12      	ldr	r2, [pc, #72]	; (1a002b4c <__sinit+0x5c>)
1a002b02:	681b      	ldr	r3, [r3, #0]
1a002b04:	6282      	str	r2, [r0, #40]	; 0x28
1a002b06:	4298      	cmp	r0, r3
1a002b08:	bf04      	itt	eq
1a002b0a:	2301      	moveq	r3, #1
1a002b0c:	6183      	streq	r3, [r0, #24]
1a002b0e:	f000 f81f 	bl	1a002b50 <__sfp>
1a002b12:	6060      	str	r0, [r4, #4]
1a002b14:	4620      	mov	r0, r4
1a002b16:	f000 f81b 	bl	1a002b50 <__sfp>
1a002b1a:	60a0      	str	r0, [r4, #8]
1a002b1c:	4620      	mov	r0, r4
1a002b1e:	f000 f817 	bl	1a002b50 <__sfp>
1a002b22:	2200      	movs	r2, #0
1a002b24:	60e0      	str	r0, [r4, #12]
1a002b26:	2104      	movs	r1, #4
1a002b28:	6860      	ldr	r0, [r4, #4]
1a002b2a:	f7ff ffa1 	bl	1a002a70 <std>
1a002b2e:	2201      	movs	r2, #1
1a002b30:	2109      	movs	r1, #9
1a002b32:	68a0      	ldr	r0, [r4, #8]
1a002b34:	f7ff ff9c 	bl	1a002a70 <std>
1a002b38:	2202      	movs	r2, #2
1a002b3a:	2112      	movs	r1, #18
1a002b3c:	68e0      	ldr	r0, [r4, #12]
1a002b3e:	f7ff ff97 	bl	1a002a70 <std>
1a002b42:	2301      	movs	r3, #1
1a002b44:	61a3      	str	r3, [r4, #24]
1a002b46:	bd10      	pop	{r4, pc}
1a002b48:	1a003870 	.word	0x1a003870
1a002b4c:	1a002ab9 	.word	0x1a002ab9

1a002b50 <__sfp>:
1a002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002b52:	4b1b      	ldr	r3, [pc, #108]	; (1a002bc0 <__sfp+0x70>)
1a002b54:	681e      	ldr	r6, [r3, #0]
1a002b56:	69b3      	ldr	r3, [r6, #24]
1a002b58:	4607      	mov	r7, r0
1a002b5a:	b913      	cbnz	r3, 1a002b62 <__sfp+0x12>
1a002b5c:	4630      	mov	r0, r6
1a002b5e:	f7ff ffc7 	bl	1a002af0 <__sinit>
1a002b62:	3648      	adds	r6, #72	; 0x48
1a002b64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a002b68:	3b01      	subs	r3, #1
1a002b6a:	d503      	bpl.n	1a002b74 <__sfp+0x24>
1a002b6c:	6833      	ldr	r3, [r6, #0]
1a002b6e:	b133      	cbz	r3, 1a002b7e <__sfp+0x2e>
1a002b70:	6836      	ldr	r6, [r6, #0]
1a002b72:	e7f7      	b.n	1a002b64 <__sfp+0x14>
1a002b74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a002b78:	b16d      	cbz	r5, 1a002b96 <__sfp+0x46>
1a002b7a:	3468      	adds	r4, #104	; 0x68
1a002b7c:	e7f4      	b.n	1a002b68 <__sfp+0x18>
1a002b7e:	2104      	movs	r1, #4
1a002b80:	4638      	mov	r0, r7
1a002b82:	f7ff ff9f 	bl	1a002ac4 <__sfmoreglue>
1a002b86:	6030      	str	r0, [r6, #0]
1a002b88:	2800      	cmp	r0, #0
1a002b8a:	d1f1      	bne.n	1a002b70 <__sfp+0x20>
1a002b8c:	230c      	movs	r3, #12
1a002b8e:	603b      	str	r3, [r7, #0]
1a002b90:	4604      	mov	r4, r0
1a002b92:	4620      	mov	r0, r4
1a002b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002b96:	4b0b      	ldr	r3, [pc, #44]	; (1a002bc4 <__sfp+0x74>)
1a002b98:	6665      	str	r5, [r4, #100]	; 0x64
1a002b9a:	e9c4 5500 	strd	r5, r5, [r4]
1a002b9e:	60a5      	str	r5, [r4, #8]
1a002ba0:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a002ba4:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a002ba8:	2208      	movs	r2, #8
1a002baa:	4629      	mov	r1, r5
1a002bac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a002bb0:	f7ff fd6a 	bl	1a002688 <memset>
1a002bb4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a002bb8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a002bbc:	e7e9      	b.n	1a002b92 <__sfp+0x42>
1a002bbe:	bf00      	nop
1a002bc0:	1a003870 	.word	0x1a003870
1a002bc4:	ffff0001 	.word	0xffff0001

1a002bc8 <_fwalk_reent>:
1a002bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002bcc:	4680      	mov	r8, r0
1a002bce:	4689      	mov	r9, r1
1a002bd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a002bd4:	2600      	movs	r6, #0
1a002bd6:	b914      	cbnz	r4, 1a002bde <_fwalk_reent+0x16>
1a002bd8:	4630      	mov	r0, r6
1a002bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a002bde:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a002be2:	3f01      	subs	r7, #1
1a002be4:	d501      	bpl.n	1a002bea <_fwalk_reent+0x22>
1a002be6:	6824      	ldr	r4, [r4, #0]
1a002be8:	e7f5      	b.n	1a002bd6 <_fwalk_reent+0xe>
1a002bea:	89ab      	ldrh	r3, [r5, #12]
1a002bec:	2b01      	cmp	r3, #1
1a002bee:	d907      	bls.n	1a002c00 <_fwalk_reent+0x38>
1a002bf0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a002bf4:	3301      	adds	r3, #1
1a002bf6:	d003      	beq.n	1a002c00 <_fwalk_reent+0x38>
1a002bf8:	4629      	mov	r1, r5
1a002bfa:	4640      	mov	r0, r8
1a002bfc:	47c8      	blx	r9
1a002bfe:	4306      	orrs	r6, r0
1a002c00:	3568      	adds	r5, #104	; 0x68
1a002c02:	e7ee      	b.n	1a002be2 <_fwalk_reent+0x1a>

1a002c04 <__swhatbuf_r>:
1a002c04:	b570      	push	{r4, r5, r6, lr}
1a002c06:	460e      	mov	r6, r1
1a002c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002c0c:	2900      	cmp	r1, #0
1a002c0e:	b096      	sub	sp, #88	; 0x58
1a002c10:	4614      	mov	r4, r2
1a002c12:	461d      	mov	r5, r3
1a002c14:	da07      	bge.n	1a002c26 <__swhatbuf_r+0x22>
1a002c16:	2300      	movs	r3, #0
1a002c18:	602b      	str	r3, [r5, #0]
1a002c1a:	89b3      	ldrh	r3, [r6, #12]
1a002c1c:	061a      	lsls	r2, r3, #24
1a002c1e:	d410      	bmi.n	1a002c42 <__swhatbuf_r+0x3e>
1a002c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a002c24:	e00e      	b.n	1a002c44 <__swhatbuf_r+0x40>
1a002c26:	466a      	mov	r2, sp
1a002c28:	f7fd fffd 	bl	1a000c26 <_fstat_r>
1a002c2c:	2800      	cmp	r0, #0
1a002c2e:	dbf2      	blt.n	1a002c16 <__swhatbuf_r+0x12>
1a002c30:	9a01      	ldr	r2, [sp, #4]
1a002c32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a002c36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a002c3a:	425a      	negs	r2, r3
1a002c3c:	415a      	adcs	r2, r3
1a002c3e:	602a      	str	r2, [r5, #0]
1a002c40:	e7ee      	b.n	1a002c20 <__swhatbuf_r+0x1c>
1a002c42:	2340      	movs	r3, #64	; 0x40
1a002c44:	2000      	movs	r0, #0
1a002c46:	6023      	str	r3, [r4, #0]
1a002c48:	b016      	add	sp, #88	; 0x58
1a002c4a:	bd70      	pop	{r4, r5, r6, pc}

1a002c4c <__smakebuf_r>:
1a002c4c:	898b      	ldrh	r3, [r1, #12]
1a002c4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a002c50:	079d      	lsls	r5, r3, #30
1a002c52:	4606      	mov	r6, r0
1a002c54:	460c      	mov	r4, r1
1a002c56:	d507      	bpl.n	1a002c68 <__smakebuf_r+0x1c>
1a002c58:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a002c5c:	6023      	str	r3, [r4, #0]
1a002c5e:	6123      	str	r3, [r4, #16]
1a002c60:	2301      	movs	r3, #1
1a002c62:	6163      	str	r3, [r4, #20]
1a002c64:	b002      	add	sp, #8
1a002c66:	bd70      	pop	{r4, r5, r6, pc}
1a002c68:	ab01      	add	r3, sp, #4
1a002c6a:	466a      	mov	r2, sp
1a002c6c:	f7ff ffca 	bl	1a002c04 <__swhatbuf_r>
1a002c70:	9900      	ldr	r1, [sp, #0]
1a002c72:	4605      	mov	r5, r0
1a002c74:	4630      	mov	r0, r6
1a002c76:	f000 f877 	bl	1a002d68 <_malloc_r>
1a002c7a:	b948      	cbnz	r0, 1a002c90 <__smakebuf_r+0x44>
1a002c7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002c80:	059a      	lsls	r2, r3, #22
1a002c82:	d4ef      	bmi.n	1a002c64 <__smakebuf_r+0x18>
1a002c84:	f023 0303 	bic.w	r3, r3, #3
1a002c88:	f043 0302 	orr.w	r3, r3, #2
1a002c8c:	81a3      	strh	r3, [r4, #12]
1a002c8e:	e7e3      	b.n	1a002c58 <__smakebuf_r+0xc>
1a002c90:	4b0d      	ldr	r3, [pc, #52]	; (1a002cc8 <__smakebuf_r+0x7c>)
1a002c92:	62b3      	str	r3, [r6, #40]	; 0x28
1a002c94:	89a3      	ldrh	r3, [r4, #12]
1a002c96:	6020      	str	r0, [r4, #0]
1a002c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a002c9c:	81a3      	strh	r3, [r4, #12]
1a002c9e:	9b00      	ldr	r3, [sp, #0]
1a002ca0:	6163      	str	r3, [r4, #20]
1a002ca2:	9b01      	ldr	r3, [sp, #4]
1a002ca4:	6120      	str	r0, [r4, #16]
1a002ca6:	b15b      	cbz	r3, 1a002cc0 <__smakebuf_r+0x74>
1a002ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a002cac:	4630      	mov	r0, r6
1a002cae:	f7fd ffbf 	bl	1a000c30 <_isatty_r>
1a002cb2:	b128      	cbz	r0, 1a002cc0 <__smakebuf_r+0x74>
1a002cb4:	89a3      	ldrh	r3, [r4, #12]
1a002cb6:	f023 0303 	bic.w	r3, r3, #3
1a002cba:	f043 0301 	orr.w	r3, r3, #1
1a002cbe:	81a3      	strh	r3, [r4, #12]
1a002cc0:	89a3      	ldrh	r3, [r4, #12]
1a002cc2:	431d      	orrs	r5, r3
1a002cc4:	81a5      	strh	r5, [r4, #12]
1a002cc6:	e7cd      	b.n	1a002c64 <__smakebuf_r+0x18>
1a002cc8:	1a002ab9 	.word	0x1a002ab9

1a002ccc <_free_r>:
1a002ccc:	b538      	push	{r3, r4, r5, lr}
1a002cce:	4605      	mov	r5, r0
1a002cd0:	2900      	cmp	r1, #0
1a002cd2:	d045      	beq.n	1a002d60 <_free_r+0x94>
1a002cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a002cd8:	1f0c      	subs	r4, r1, #4
1a002cda:	2b00      	cmp	r3, #0
1a002cdc:	bfb8      	it	lt
1a002cde:	18e4      	addlt	r4, r4, r3
1a002ce0:	f000 fbfe 	bl	1a0034e0 <__malloc_lock>
1a002ce4:	4a1f      	ldr	r2, [pc, #124]	; (1a002d64 <_free_r+0x98>)
1a002ce6:	6813      	ldr	r3, [r2, #0]
1a002ce8:	4610      	mov	r0, r2
1a002cea:	b933      	cbnz	r3, 1a002cfa <_free_r+0x2e>
1a002cec:	6063      	str	r3, [r4, #4]
1a002cee:	6014      	str	r4, [r2, #0]
1a002cf0:	4628      	mov	r0, r5
1a002cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a002cf6:	f000 bbf4 	b.w	1a0034e2 <__malloc_unlock>
1a002cfa:	42a3      	cmp	r3, r4
1a002cfc:	d90c      	bls.n	1a002d18 <_free_r+0x4c>
1a002cfe:	6821      	ldr	r1, [r4, #0]
1a002d00:	1862      	adds	r2, r4, r1
1a002d02:	4293      	cmp	r3, r2
1a002d04:	bf04      	itt	eq
1a002d06:	681a      	ldreq	r2, [r3, #0]
1a002d08:	685b      	ldreq	r3, [r3, #4]
1a002d0a:	6063      	str	r3, [r4, #4]
1a002d0c:	bf04      	itt	eq
1a002d0e:	1852      	addeq	r2, r2, r1
1a002d10:	6022      	streq	r2, [r4, #0]
1a002d12:	6004      	str	r4, [r0, #0]
1a002d14:	e7ec      	b.n	1a002cf0 <_free_r+0x24>
1a002d16:	4613      	mov	r3, r2
1a002d18:	685a      	ldr	r2, [r3, #4]
1a002d1a:	b10a      	cbz	r2, 1a002d20 <_free_r+0x54>
1a002d1c:	42a2      	cmp	r2, r4
1a002d1e:	d9fa      	bls.n	1a002d16 <_free_r+0x4a>
1a002d20:	6819      	ldr	r1, [r3, #0]
1a002d22:	1858      	adds	r0, r3, r1
1a002d24:	42a0      	cmp	r0, r4
1a002d26:	d10b      	bne.n	1a002d40 <_free_r+0x74>
1a002d28:	6820      	ldr	r0, [r4, #0]
1a002d2a:	4401      	add	r1, r0
1a002d2c:	1858      	adds	r0, r3, r1
1a002d2e:	4282      	cmp	r2, r0
1a002d30:	6019      	str	r1, [r3, #0]
1a002d32:	d1dd      	bne.n	1a002cf0 <_free_r+0x24>
1a002d34:	6810      	ldr	r0, [r2, #0]
1a002d36:	6852      	ldr	r2, [r2, #4]
1a002d38:	605a      	str	r2, [r3, #4]
1a002d3a:	4401      	add	r1, r0
1a002d3c:	6019      	str	r1, [r3, #0]
1a002d3e:	e7d7      	b.n	1a002cf0 <_free_r+0x24>
1a002d40:	d902      	bls.n	1a002d48 <_free_r+0x7c>
1a002d42:	230c      	movs	r3, #12
1a002d44:	602b      	str	r3, [r5, #0]
1a002d46:	e7d3      	b.n	1a002cf0 <_free_r+0x24>
1a002d48:	6820      	ldr	r0, [r4, #0]
1a002d4a:	1821      	adds	r1, r4, r0
1a002d4c:	428a      	cmp	r2, r1
1a002d4e:	bf04      	itt	eq
1a002d50:	6811      	ldreq	r1, [r2, #0]
1a002d52:	6852      	ldreq	r2, [r2, #4]
1a002d54:	6062      	str	r2, [r4, #4]
1a002d56:	bf04      	itt	eq
1a002d58:	1809      	addeq	r1, r1, r0
1a002d5a:	6021      	streq	r1, [r4, #0]
1a002d5c:	605c      	str	r4, [r3, #4]
1a002d5e:	e7c7      	b.n	1a002cf0 <_free_r+0x24>
1a002d60:	bd38      	pop	{r3, r4, r5, pc}
1a002d62:	bf00      	nop
1a002d64:	10000108 	.word	0x10000108

1a002d68 <_malloc_r>:
1a002d68:	b570      	push	{r4, r5, r6, lr}
1a002d6a:	1ccd      	adds	r5, r1, #3
1a002d6c:	f025 0503 	bic.w	r5, r5, #3
1a002d70:	3508      	adds	r5, #8
1a002d72:	2d0c      	cmp	r5, #12
1a002d74:	bf38      	it	cc
1a002d76:	250c      	movcc	r5, #12
1a002d78:	2d00      	cmp	r5, #0
1a002d7a:	4606      	mov	r6, r0
1a002d7c:	db01      	blt.n	1a002d82 <_malloc_r+0x1a>
1a002d7e:	42a9      	cmp	r1, r5
1a002d80:	d903      	bls.n	1a002d8a <_malloc_r+0x22>
1a002d82:	230c      	movs	r3, #12
1a002d84:	6033      	str	r3, [r6, #0]
1a002d86:	2000      	movs	r0, #0
1a002d88:	bd70      	pop	{r4, r5, r6, pc}
1a002d8a:	f000 fba9 	bl	1a0034e0 <__malloc_lock>
1a002d8e:	4a21      	ldr	r2, [pc, #132]	; (1a002e14 <_malloc_r+0xac>)
1a002d90:	6814      	ldr	r4, [r2, #0]
1a002d92:	4621      	mov	r1, r4
1a002d94:	b991      	cbnz	r1, 1a002dbc <_malloc_r+0x54>
1a002d96:	4c20      	ldr	r4, [pc, #128]	; (1a002e18 <_malloc_r+0xb0>)
1a002d98:	6823      	ldr	r3, [r4, #0]
1a002d9a:	b91b      	cbnz	r3, 1a002da4 <_malloc_r+0x3c>
1a002d9c:	4630      	mov	r0, r6
1a002d9e:	f7fd ff91 	bl	1a000cc4 <_sbrk_r>
1a002da2:	6020      	str	r0, [r4, #0]
1a002da4:	4629      	mov	r1, r5
1a002da6:	4630      	mov	r0, r6
1a002da8:	f7fd ff8c 	bl	1a000cc4 <_sbrk_r>
1a002dac:	1c43      	adds	r3, r0, #1
1a002dae:	d124      	bne.n	1a002dfa <_malloc_r+0x92>
1a002db0:	230c      	movs	r3, #12
1a002db2:	6033      	str	r3, [r6, #0]
1a002db4:	4630      	mov	r0, r6
1a002db6:	f000 fb94 	bl	1a0034e2 <__malloc_unlock>
1a002dba:	e7e4      	b.n	1a002d86 <_malloc_r+0x1e>
1a002dbc:	680b      	ldr	r3, [r1, #0]
1a002dbe:	1b5b      	subs	r3, r3, r5
1a002dc0:	d418      	bmi.n	1a002df4 <_malloc_r+0x8c>
1a002dc2:	2b0b      	cmp	r3, #11
1a002dc4:	d90f      	bls.n	1a002de6 <_malloc_r+0x7e>
1a002dc6:	600b      	str	r3, [r1, #0]
1a002dc8:	50cd      	str	r5, [r1, r3]
1a002dca:	18cc      	adds	r4, r1, r3
1a002dcc:	4630      	mov	r0, r6
1a002dce:	f000 fb88 	bl	1a0034e2 <__malloc_unlock>
1a002dd2:	f104 000b 	add.w	r0, r4, #11
1a002dd6:	1d23      	adds	r3, r4, #4
1a002dd8:	f020 0007 	bic.w	r0, r0, #7
1a002ddc:	1ac3      	subs	r3, r0, r3
1a002dde:	d0d3      	beq.n	1a002d88 <_malloc_r+0x20>
1a002de0:	425a      	negs	r2, r3
1a002de2:	50e2      	str	r2, [r4, r3]
1a002de4:	e7d0      	b.n	1a002d88 <_malloc_r+0x20>
1a002de6:	428c      	cmp	r4, r1
1a002de8:	684b      	ldr	r3, [r1, #4]
1a002dea:	bf16      	itet	ne
1a002dec:	6063      	strne	r3, [r4, #4]
1a002dee:	6013      	streq	r3, [r2, #0]
1a002df0:	460c      	movne	r4, r1
1a002df2:	e7eb      	b.n	1a002dcc <_malloc_r+0x64>
1a002df4:	460c      	mov	r4, r1
1a002df6:	6849      	ldr	r1, [r1, #4]
1a002df8:	e7cc      	b.n	1a002d94 <_malloc_r+0x2c>
1a002dfa:	1cc4      	adds	r4, r0, #3
1a002dfc:	f024 0403 	bic.w	r4, r4, #3
1a002e00:	42a0      	cmp	r0, r4
1a002e02:	d005      	beq.n	1a002e10 <_malloc_r+0xa8>
1a002e04:	1a21      	subs	r1, r4, r0
1a002e06:	4630      	mov	r0, r6
1a002e08:	f7fd ff5c 	bl	1a000cc4 <_sbrk_r>
1a002e0c:	3001      	adds	r0, #1
1a002e0e:	d0cf      	beq.n	1a002db0 <_malloc_r+0x48>
1a002e10:	6025      	str	r5, [r4, #0]
1a002e12:	e7db      	b.n	1a002dcc <_malloc_r+0x64>
1a002e14:	10000108 	.word	0x10000108
1a002e18:	1000010c 	.word	0x1000010c

1a002e1c <__sfputc_r>:
1a002e1c:	6893      	ldr	r3, [r2, #8]
1a002e1e:	3b01      	subs	r3, #1
1a002e20:	2b00      	cmp	r3, #0
1a002e22:	b410      	push	{r4}
1a002e24:	6093      	str	r3, [r2, #8]
1a002e26:	da08      	bge.n	1a002e3a <__sfputc_r+0x1e>
1a002e28:	6994      	ldr	r4, [r2, #24]
1a002e2a:	42a3      	cmp	r3, r4
1a002e2c:	db01      	blt.n	1a002e32 <__sfputc_r+0x16>
1a002e2e:	290a      	cmp	r1, #10
1a002e30:	d103      	bne.n	1a002e3a <__sfputc_r+0x1e>
1a002e32:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002e36:	f7ff bcab 	b.w	1a002790 <__swbuf_r>
1a002e3a:	6813      	ldr	r3, [r2, #0]
1a002e3c:	1c58      	adds	r0, r3, #1
1a002e3e:	6010      	str	r0, [r2, #0]
1a002e40:	7019      	strb	r1, [r3, #0]
1a002e42:	4608      	mov	r0, r1
1a002e44:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002e48:	4770      	bx	lr

1a002e4a <__sfputs_r>:
1a002e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002e4c:	4606      	mov	r6, r0
1a002e4e:	460f      	mov	r7, r1
1a002e50:	4614      	mov	r4, r2
1a002e52:	18d5      	adds	r5, r2, r3
1a002e54:	42ac      	cmp	r4, r5
1a002e56:	d101      	bne.n	1a002e5c <__sfputs_r+0x12>
1a002e58:	2000      	movs	r0, #0
1a002e5a:	e007      	b.n	1a002e6c <__sfputs_r+0x22>
1a002e5c:	463a      	mov	r2, r7
1a002e5e:	f814 1b01 	ldrb.w	r1, [r4], #1
1a002e62:	4630      	mov	r0, r6
1a002e64:	f7ff ffda 	bl	1a002e1c <__sfputc_r>
1a002e68:	1c43      	adds	r3, r0, #1
1a002e6a:	d1f3      	bne.n	1a002e54 <__sfputs_r+0xa>
1a002e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002e6e:	Address 0x000000001a002e6e is out of bounds.


1a002e70 <_vfiprintf_r>:
1a002e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002e74:	460c      	mov	r4, r1
1a002e76:	b09d      	sub	sp, #116	; 0x74
1a002e78:	4617      	mov	r7, r2
1a002e7a:	461d      	mov	r5, r3
1a002e7c:	4606      	mov	r6, r0
1a002e7e:	b118      	cbz	r0, 1a002e88 <_vfiprintf_r+0x18>
1a002e80:	6983      	ldr	r3, [r0, #24]
1a002e82:	b90b      	cbnz	r3, 1a002e88 <_vfiprintf_r+0x18>
1a002e84:	f7ff fe34 	bl	1a002af0 <__sinit>
1a002e88:	4b7c      	ldr	r3, [pc, #496]	; (1a00307c <_vfiprintf_r+0x20c>)
1a002e8a:	429c      	cmp	r4, r3
1a002e8c:	d158      	bne.n	1a002f40 <_vfiprintf_r+0xd0>
1a002e8e:	6874      	ldr	r4, [r6, #4]
1a002e90:	89a3      	ldrh	r3, [r4, #12]
1a002e92:	0718      	lsls	r0, r3, #28
1a002e94:	d55e      	bpl.n	1a002f54 <_vfiprintf_r+0xe4>
1a002e96:	6923      	ldr	r3, [r4, #16]
1a002e98:	2b00      	cmp	r3, #0
1a002e9a:	d05b      	beq.n	1a002f54 <_vfiprintf_r+0xe4>
1a002e9c:	2300      	movs	r3, #0
1a002e9e:	9309      	str	r3, [sp, #36]	; 0x24
1a002ea0:	2320      	movs	r3, #32
1a002ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a002ea6:	2330      	movs	r3, #48	; 0x30
1a002ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a002eac:	9503      	str	r5, [sp, #12]
1a002eae:	f04f 0b01 	mov.w	fp, #1
1a002eb2:	46b8      	mov	r8, r7
1a002eb4:	4645      	mov	r5, r8
1a002eb6:	f815 3b01 	ldrb.w	r3, [r5], #1
1a002eba:	b10b      	cbz	r3, 1a002ec0 <_vfiprintf_r+0x50>
1a002ebc:	2b25      	cmp	r3, #37	; 0x25
1a002ebe:	d154      	bne.n	1a002f6a <_vfiprintf_r+0xfa>
1a002ec0:	ebb8 0a07 	subs.w	sl, r8, r7
1a002ec4:	d00b      	beq.n	1a002ede <_vfiprintf_r+0x6e>
1a002ec6:	4653      	mov	r3, sl
1a002ec8:	463a      	mov	r2, r7
1a002eca:	4621      	mov	r1, r4
1a002ecc:	4630      	mov	r0, r6
1a002ece:	f7ff ffbc 	bl	1a002e4a <__sfputs_r>
1a002ed2:	3001      	adds	r0, #1
1a002ed4:	f000 80c2 	beq.w	1a00305c <_vfiprintf_r+0x1ec>
1a002ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002eda:	4453      	add	r3, sl
1a002edc:	9309      	str	r3, [sp, #36]	; 0x24
1a002ede:	f898 3000 	ldrb.w	r3, [r8]
1a002ee2:	2b00      	cmp	r3, #0
1a002ee4:	f000 80ba 	beq.w	1a00305c <_vfiprintf_r+0x1ec>
1a002ee8:	2300      	movs	r3, #0
1a002eea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002eee:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a002ef2:	9304      	str	r3, [sp, #16]
1a002ef4:	9307      	str	r3, [sp, #28]
1a002ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a002efa:	931a      	str	r3, [sp, #104]	; 0x68
1a002efc:	46a8      	mov	r8, r5
1a002efe:	2205      	movs	r2, #5
1a002f00:	f818 1b01 	ldrb.w	r1, [r8], #1
1a002f04:	485e      	ldr	r0, [pc, #376]	; (1a003080 <_vfiprintf_r+0x210>)
1a002f06:	f000 fa9b 	bl	1a003440 <memchr>
1a002f0a:	9b04      	ldr	r3, [sp, #16]
1a002f0c:	bb78      	cbnz	r0, 1a002f6e <_vfiprintf_r+0xfe>
1a002f0e:	06d9      	lsls	r1, r3, #27
1a002f10:	bf44      	itt	mi
1a002f12:	2220      	movmi	r2, #32
1a002f14:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a002f18:	071a      	lsls	r2, r3, #28
1a002f1a:	bf44      	itt	mi
1a002f1c:	222b      	movmi	r2, #43	; 0x2b
1a002f1e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a002f22:	782a      	ldrb	r2, [r5, #0]
1a002f24:	2a2a      	cmp	r2, #42	; 0x2a
1a002f26:	d02a      	beq.n	1a002f7e <_vfiprintf_r+0x10e>
1a002f28:	9a07      	ldr	r2, [sp, #28]
1a002f2a:	46a8      	mov	r8, r5
1a002f2c:	2000      	movs	r0, #0
1a002f2e:	250a      	movs	r5, #10
1a002f30:	4641      	mov	r1, r8
1a002f32:	f811 3b01 	ldrb.w	r3, [r1], #1
1a002f36:	3b30      	subs	r3, #48	; 0x30
1a002f38:	2b09      	cmp	r3, #9
1a002f3a:	d969      	bls.n	1a003010 <_vfiprintf_r+0x1a0>
1a002f3c:	b360      	cbz	r0, 1a002f98 <_vfiprintf_r+0x128>
1a002f3e:	e024      	b.n	1a002f8a <_vfiprintf_r+0x11a>
1a002f40:	4b50      	ldr	r3, [pc, #320]	; (1a003084 <_vfiprintf_r+0x214>)
1a002f42:	429c      	cmp	r4, r3
1a002f44:	d101      	bne.n	1a002f4a <_vfiprintf_r+0xda>
1a002f46:	68b4      	ldr	r4, [r6, #8]
1a002f48:	e7a2      	b.n	1a002e90 <_vfiprintf_r+0x20>
1a002f4a:	4b4f      	ldr	r3, [pc, #316]	; (1a003088 <_vfiprintf_r+0x218>)
1a002f4c:	429c      	cmp	r4, r3
1a002f4e:	bf08      	it	eq
1a002f50:	68f4      	ldreq	r4, [r6, #12]
1a002f52:	e79d      	b.n	1a002e90 <_vfiprintf_r+0x20>
1a002f54:	4621      	mov	r1, r4
1a002f56:	4630      	mov	r0, r6
1a002f58:	f7ff fc6c 	bl	1a002834 <__swsetup_r>
1a002f5c:	2800      	cmp	r0, #0
1a002f5e:	d09d      	beq.n	1a002e9c <_vfiprintf_r+0x2c>
1a002f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002f64:	b01d      	add	sp, #116	; 0x74
1a002f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002f6a:	46a8      	mov	r8, r5
1a002f6c:	e7a2      	b.n	1a002eb4 <_vfiprintf_r+0x44>
1a002f6e:	4a44      	ldr	r2, [pc, #272]	; (1a003080 <_vfiprintf_r+0x210>)
1a002f70:	1a80      	subs	r0, r0, r2
1a002f72:	fa0b f000 	lsl.w	r0, fp, r0
1a002f76:	4318      	orrs	r0, r3
1a002f78:	9004      	str	r0, [sp, #16]
1a002f7a:	4645      	mov	r5, r8
1a002f7c:	e7be      	b.n	1a002efc <_vfiprintf_r+0x8c>
1a002f7e:	9a03      	ldr	r2, [sp, #12]
1a002f80:	1d11      	adds	r1, r2, #4
1a002f82:	6812      	ldr	r2, [r2, #0]
1a002f84:	9103      	str	r1, [sp, #12]
1a002f86:	2a00      	cmp	r2, #0
1a002f88:	db01      	blt.n	1a002f8e <_vfiprintf_r+0x11e>
1a002f8a:	9207      	str	r2, [sp, #28]
1a002f8c:	e004      	b.n	1a002f98 <_vfiprintf_r+0x128>
1a002f8e:	4252      	negs	r2, r2
1a002f90:	f043 0302 	orr.w	r3, r3, #2
1a002f94:	9207      	str	r2, [sp, #28]
1a002f96:	9304      	str	r3, [sp, #16]
1a002f98:	f898 3000 	ldrb.w	r3, [r8]
1a002f9c:	2b2e      	cmp	r3, #46	; 0x2e
1a002f9e:	d10e      	bne.n	1a002fbe <_vfiprintf_r+0x14e>
1a002fa0:	f898 3001 	ldrb.w	r3, [r8, #1]
1a002fa4:	2b2a      	cmp	r3, #42	; 0x2a
1a002fa6:	d138      	bne.n	1a00301a <_vfiprintf_r+0x1aa>
1a002fa8:	9b03      	ldr	r3, [sp, #12]
1a002faa:	1d1a      	adds	r2, r3, #4
1a002fac:	681b      	ldr	r3, [r3, #0]
1a002fae:	9203      	str	r2, [sp, #12]
1a002fb0:	2b00      	cmp	r3, #0
1a002fb2:	bfb8      	it	lt
1a002fb4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a002fb8:	f108 0802 	add.w	r8, r8, #2
1a002fbc:	9305      	str	r3, [sp, #20]
1a002fbe:	4d33      	ldr	r5, [pc, #204]	; (1a00308c <_vfiprintf_r+0x21c>)
1a002fc0:	f898 1000 	ldrb.w	r1, [r8]
1a002fc4:	2203      	movs	r2, #3
1a002fc6:	4628      	mov	r0, r5
1a002fc8:	f000 fa3a 	bl	1a003440 <memchr>
1a002fcc:	b140      	cbz	r0, 1a002fe0 <_vfiprintf_r+0x170>
1a002fce:	2340      	movs	r3, #64	; 0x40
1a002fd0:	1b40      	subs	r0, r0, r5
1a002fd2:	fa03 f000 	lsl.w	r0, r3, r0
1a002fd6:	9b04      	ldr	r3, [sp, #16]
1a002fd8:	4303      	orrs	r3, r0
1a002fda:	f108 0801 	add.w	r8, r8, #1
1a002fde:	9304      	str	r3, [sp, #16]
1a002fe0:	f898 1000 	ldrb.w	r1, [r8]
1a002fe4:	482a      	ldr	r0, [pc, #168]	; (1a003090 <_vfiprintf_r+0x220>)
1a002fe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a002fea:	2206      	movs	r2, #6
1a002fec:	f108 0701 	add.w	r7, r8, #1
1a002ff0:	f000 fa26 	bl	1a003440 <memchr>
1a002ff4:	2800      	cmp	r0, #0
1a002ff6:	d037      	beq.n	1a003068 <_vfiprintf_r+0x1f8>
1a002ff8:	4b26      	ldr	r3, [pc, #152]	; (1a003094 <_vfiprintf_r+0x224>)
1a002ffa:	bb1b      	cbnz	r3, 1a003044 <_vfiprintf_r+0x1d4>
1a002ffc:	9b03      	ldr	r3, [sp, #12]
1a002ffe:	3307      	adds	r3, #7
1a003000:	f023 0307 	bic.w	r3, r3, #7
1a003004:	3308      	adds	r3, #8
1a003006:	9303      	str	r3, [sp, #12]
1a003008:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a00300a:	444b      	add	r3, r9
1a00300c:	9309      	str	r3, [sp, #36]	; 0x24
1a00300e:	e750      	b.n	1a002eb2 <_vfiprintf_r+0x42>
1a003010:	fb05 3202 	mla	r2, r5, r2, r3
1a003014:	2001      	movs	r0, #1
1a003016:	4688      	mov	r8, r1
1a003018:	e78a      	b.n	1a002f30 <_vfiprintf_r+0xc0>
1a00301a:	2300      	movs	r3, #0
1a00301c:	f108 0801 	add.w	r8, r8, #1
1a003020:	9305      	str	r3, [sp, #20]
1a003022:	4619      	mov	r1, r3
1a003024:	250a      	movs	r5, #10
1a003026:	4640      	mov	r0, r8
1a003028:	f810 2b01 	ldrb.w	r2, [r0], #1
1a00302c:	3a30      	subs	r2, #48	; 0x30
1a00302e:	2a09      	cmp	r2, #9
1a003030:	d903      	bls.n	1a00303a <_vfiprintf_r+0x1ca>
1a003032:	2b00      	cmp	r3, #0
1a003034:	d0c3      	beq.n	1a002fbe <_vfiprintf_r+0x14e>
1a003036:	9105      	str	r1, [sp, #20]
1a003038:	e7c1      	b.n	1a002fbe <_vfiprintf_r+0x14e>
1a00303a:	fb05 2101 	mla	r1, r5, r1, r2
1a00303e:	2301      	movs	r3, #1
1a003040:	4680      	mov	r8, r0
1a003042:	e7f0      	b.n	1a003026 <_vfiprintf_r+0x1b6>
1a003044:	ab03      	add	r3, sp, #12
1a003046:	9300      	str	r3, [sp, #0]
1a003048:	4622      	mov	r2, r4
1a00304a:	4b13      	ldr	r3, [pc, #76]	; (1a003098 <_vfiprintf_r+0x228>)
1a00304c:	a904      	add	r1, sp, #16
1a00304e:	4630      	mov	r0, r6
1a003050:	f3af 8000 	nop.w
1a003054:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a003058:	4681      	mov	r9, r0
1a00305a:	d1d5      	bne.n	1a003008 <_vfiprintf_r+0x198>
1a00305c:	89a3      	ldrh	r3, [r4, #12]
1a00305e:	065b      	lsls	r3, r3, #25
1a003060:	f53f af7e 	bmi.w	1a002f60 <_vfiprintf_r+0xf0>
1a003064:	9809      	ldr	r0, [sp, #36]	; 0x24
1a003066:	e77d      	b.n	1a002f64 <_vfiprintf_r+0xf4>
1a003068:	ab03      	add	r3, sp, #12
1a00306a:	9300      	str	r3, [sp, #0]
1a00306c:	4622      	mov	r2, r4
1a00306e:	4b0a      	ldr	r3, [pc, #40]	; (1a003098 <_vfiprintf_r+0x228>)
1a003070:	a904      	add	r1, sp, #16
1a003072:	4630      	mov	r0, r6
1a003074:	f000 f888 	bl	1a003188 <_printf_i>
1a003078:	e7ec      	b.n	1a003054 <_vfiprintf_r+0x1e4>
1a00307a:	bf00      	nop
1a00307c:	1a003830 	.word	0x1a003830
1a003080:	1a003874 	.word	0x1a003874
1a003084:	1a003850 	.word	0x1a003850
1a003088:	1a003810 	.word	0x1a003810
1a00308c:	1a00387a 	.word	0x1a00387a
1a003090:	1a00387e 	.word	0x1a00387e
1a003094:	00000000 	.word	0x00000000
1a003098:	1a002e4b 	.word	0x1a002e4b

1a00309c <_printf_common>:
1a00309c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0030a0:	4691      	mov	r9, r2
1a0030a2:	461f      	mov	r7, r3
1a0030a4:	688a      	ldr	r2, [r1, #8]
1a0030a6:	690b      	ldr	r3, [r1, #16]
1a0030a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0030ac:	4293      	cmp	r3, r2
1a0030ae:	bfb8      	it	lt
1a0030b0:	4613      	movlt	r3, r2
1a0030b2:	f8c9 3000 	str.w	r3, [r9]
1a0030b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a0030ba:	4606      	mov	r6, r0
1a0030bc:	460c      	mov	r4, r1
1a0030be:	b112      	cbz	r2, 1a0030c6 <_printf_common+0x2a>
1a0030c0:	3301      	adds	r3, #1
1a0030c2:	f8c9 3000 	str.w	r3, [r9]
1a0030c6:	6823      	ldr	r3, [r4, #0]
1a0030c8:	0699      	lsls	r1, r3, #26
1a0030ca:	bf42      	ittt	mi
1a0030cc:	f8d9 3000 	ldrmi.w	r3, [r9]
1a0030d0:	3302      	addmi	r3, #2
1a0030d2:	f8c9 3000 	strmi.w	r3, [r9]
1a0030d6:	6825      	ldr	r5, [r4, #0]
1a0030d8:	f015 0506 	ands.w	r5, r5, #6
1a0030dc:	d107      	bne.n	1a0030ee <_printf_common+0x52>
1a0030de:	f104 0a19 	add.w	sl, r4, #25
1a0030e2:	68e3      	ldr	r3, [r4, #12]
1a0030e4:	f8d9 2000 	ldr.w	r2, [r9]
1a0030e8:	1a9b      	subs	r3, r3, r2
1a0030ea:	42ab      	cmp	r3, r5
1a0030ec:	dc28      	bgt.n	1a003140 <_printf_common+0xa4>
1a0030ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0030f2:	6822      	ldr	r2, [r4, #0]
1a0030f4:	3300      	adds	r3, #0
1a0030f6:	bf18      	it	ne
1a0030f8:	2301      	movne	r3, #1
1a0030fa:	0692      	lsls	r2, r2, #26
1a0030fc:	d42d      	bmi.n	1a00315a <_printf_common+0xbe>
1a0030fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a003102:	4639      	mov	r1, r7
1a003104:	4630      	mov	r0, r6
1a003106:	47c0      	blx	r8
1a003108:	3001      	adds	r0, #1
1a00310a:	d020      	beq.n	1a00314e <_printf_common+0xb2>
1a00310c:	6823      	ldr	r3, [r4, #0]
1a00310e:	68e5      	ldr	r5, [r4, #12]
1a003110:	f8d9 2000 	ldr.w	r2, [r9]
1a003114:	f003 0306 	and.w	r3, r3, #6
1a003118:	2b04      	cmp	r3, #4
1a00311a:	bf08      	it	eq
1a00311c:	1aad      	subeq	r5, r5, r2
1a00311e:	68a3      	ldr	r3, [r4, #8]
1a003120:	6922      	ldr	r2, [r4, #16]
1a003122:	bf0c      	ite	eq
1a003124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a003128:	2500      	movne	r5, #0
1a00312a:	4293      	cmp	r3, r2
1a00312c:	bfc4      	itt	gt
1a00312e:	1a9b      	subgt	r3, r3, r2
1a003130:	18ed      	addgt	r5, r5, r3
1a003132:	f04f 0900 	mov.w	r9, #0
1a003136:	341a      	adds	r4, #26
1a003138:	454d      	cmp	r5, r9
1a00313a:	d11a      	bne.n	1a003172 <_printf_common+0xd6>
1a00313c:	2000      	movs	r0, #0
1a00313e:	e008      	b.n	1a003152 <_printf_common+0xb6>
1a003140:	2301      	movs	r3, #1
1a003142:	4652      	mov	r2, sl
1a003144:	4639      	mov	r1, r7
1a003146:	4630      	mov	r0, r6
1a003148:	47c0      	blx	r8
1a00314a:	3001      	adds	r0, #1
1a00314c:	d103      	bne.n	1a003156 <_printf_common+0xba>
1a00314e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003156:	3501      	adds	r5, #1
1a003158:	e7c3      	b.n	1a0030e2 <_printf_common+0x46>
1a00315a:	18e1      	adds	r1, r4, r3
1a00315c:	1c5a      	adds	r2, r3, #1
1a00315e:	2030      	movs	r0, #48	; 0x30
1a003160:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a003164:	4422      	add	r2, r4
1a003166:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00316a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a00316e:	3302      	adds	r3, #2
1a003170:	e7c5      	b.n	1a0030fe <_printf_common+0x62>
1a003172:	2301      	movs	r3, #1
1a003174:	4622      	mov	r2, r4
1a003176:	4639      	mov	r1, r7
1a003178:	4630      	mov	r0, r6
1a00317a:	47c0      	blx	r8
1a00317c:	3001      	adds	r0, #1
1a00317e:	d0e6      	beq.n	1a00314e <_printf_common+0xb2>
1a003180:	f109 0901 	add.w	r9, r9, #1
1a003184:	e7d8      	b.n	1a003138 <_printf_common+0x9c>
1a003186:	Address 0x000000001a003186 is out of bounds.


1a003188 <_printf_i>:
1a003188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a00318c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a003190:	460c      	mov	r4, r1
1a003192:	7e09      	ldrb	r1, [r1, #24]
1a003194:	b085      	sub	sp, #20
1a003196:	296e      	cmp	r1, #110	; 0x6e
1a003198:	4617      	mov	r7, r2
1a00319a:	4606      	mov	r6, r0
1a00319c:	4698      	mov	r8, r3
1a00319e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a0031a0:	f000 80b3 	beq.w	1a00330a <_printf_i+0x182>
1a0031a4:	d822      	bhi.n	1a0031ec <_printf_i+0x64>
1a0031a6:	2963      	cmp	r1, #99	; 0x63
1a0031a8:	d036      	beq.n	1a003218 <_printf_i+0x90>
1a0031aa:	d80a      	bhi.n	1a0031c2 <_printf_i+0x3a>
1a0031ac:	2900      	cmp	r1, #0
1a0031ae:	f000 80b9 	beq.w	1a003324 <_printf_i+0x19c>
1a0031b2:	2958      	cmp	r1, #88	; 0x58
1a0031b4:	f000 8083 	beq.w	1a0032be <_printf_i+0x136>
1a0031b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0031bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a0031c0:	e032      	b.n	1a003228 <_printf_i+0xa0>
1a0031c2:	2964      	cmp	r1, #100	; 0x64
1a0031c4:	d001      	beq.n	1a0031ca <_printf_i+0x42>
1a0031c6:	2969      	cmp	r1, #105	; 0x69
1a0031c8:	d1f6      	bne.n	1a0031b8 <_printf_i+0x30>
1a0031ca:	6820      	ldr	r0, [r4, #0]
1a0031cc:	6813      	ldr	r3, [r2, #0]
1a0031ce:	0605      	lsls	r5, r0, #24
1a0031d0:	f103 0104 	add.w	r1, r3, #4
1a0031d4:	d52a      	bpl.n	1a00322c <_printf_i+0xa4>
1a0031d6:	681b      	ldr	r3, [r3, #0]
1a0031d8:	6011      	str	r1, [r2, #0]
1a0031da:	2b00      	cmp	r3, #0
1a0031dc:	da03      	bge.n	1a0031e6 <_printf_i+0x5e>
1a0031de:	222d      	movs	r2, #45	; 0x2d
1a0031e0:	425b      	negs	r3, r3
1a0031e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a0031e6:	486f      	ldr	r0, [pc, #444]	; (1a0033a4 <_printf_i+0x21c>)
1a0031e8:	220a      	movs	r2, #10
1a0031ea:	e039      	b.n	1a003260 <_printf_i+0xd8>
1a0031ec:	2973      	cmp	r1, #115	; 0x73
1a0031ee:	f000 809d 	beq.w	1a00332c <_printf_i+0x1a4>
1a0031f2:	d808      	bhi.n	1a003206 <_printf_i+0x7e>
1a0031f4:	296f      	cmp	r1, #111	; 0x6f
1a0031f6:	d020      	beq.n	1a00323a <_printf_i+0xb2>
1a0031f8:	2970      	cmp	r1, #112	; 0x70
1a0031fa:	d1dd      	bne.n	1a0031b8 <_printf_i+0x30>
1a0031fc:	6823      	ldr	r3, [r4, #0]
1a0031fe:	f043 0320 	orr.w	r3, r3, #32
1a003202:	6023      	str	r3, [r4, #0]
1a003204:	e003      	b.n	1a00320e <_printf_i+0x86>
1a003206:	2975      	cmp	r1, #117	; 0x75
1a003208:	d017      	beq.n	1a00323a <_printf_i+0xb2>
1a00320a:	2978      	cmp	r1, #120	; 0x78
1a00320c:	d1d4      	bne.n	1a0031b8 <_printf_i+0x30>
1a00320e:	2378      	movs	r3, #120	; 0x78
1a003210:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a003214:	4864      	ldr	r0, [pc, #400]	; (1a0033a8 <_printf_i+0x220>)
1a003216:	e055      	b.n	1a0032c4 <_printf_i+0x13c>
1a003218:	6813      	ldr	r3, [r2, #0]
1a00321a:	1d19      	adds	r1, r3, #4
1a00321c:	681b      	ldr	r3, [r3, #0]
1a00321e:	6011      	str	r1, [r2, #0]
1a003220:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a003224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a003228:	2301      	movs	r3, #1
1a00322a:	e08c      	b.n	1a003346 <_printf_i+0x1be>
1a00322c:	681b      	ldr	r3, [r3, #0]
1a00322e:	6011      	str	r1, [r2, #0]
1a003230:	f010 0f40 	tst.w	r0, #64	; 0x40
1a003234:	bf18      	it	ne
1a003236:	b21b      	sxthne	r3, r3
1a003238:	e7cf      	b.n	1a0031da <_printf_i+0x52>
1a00323a:	6813      	ldr	r3, [r2, #0]
1a00323c:	6825      	ldr	r5, [r4, #0]
1a00323e:	1d18      	adds	r0, r3, #4
1a003240:	6010      	str	r0, [r2, #0]
1a003242:	0628      	lsls	r0, r5, #24
1a003244:	d501      	bpl.n	1a00324a <_printf_i+0xc2>
1a003246:	681b      	ldr	r3, [r3, #0]
1a003248:	e002      	b.n	1a003250 <_printf_i+0xc8>
1a00324a:	0668      	lsls	r0, r5, #25
1a00324c:	d5fb      	bpl.n	1a003246 <_printf_i+0xbe>
1a00324e:	881b      	ldrh	r3, [r3, #0]
1a003250:	4854      	ldr	r0, [pc, #336]	; (1a0033a4 <_printf_i+0x21c>)
1a003252:	296f      	cmp	r1, #111	; 0x6f
1a003254:	bf14      	ite	ne
1a003256:	220a      	movne	r2, #10
1a003258:	2208      	moveq	r2, #8
1a00325a:	2100      	movs	r1, #0
1a00325c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a003260:	6865      	ldr	r5, [r4, #4]
1a003262:	60a5      	str	r5, [r4, #8]
1a003264:	2d00      	cmp	r5, #0
1a003266:	f2c0 8095 	blt.w	1a003394 <_printf_i+0x20c>
1a00326a:	6821      	ldr	r1, [r4, #0]
1a00326c:	f021 0104 	bic.w	r1, r1, #4
1a003270:	6021      	str	r1, [r4, #0]
1a003272:	2b00      	cmp	r3, #0
1a003274:	d13d      	bne.n	1a0032f2 <_printf_i+0x16a>
1a003276:	2d00      	cmp	r5, #0
1a003278:	f040 808e 	bne.w	1a003398 <_printf_i+0x210>
1a00327c:	4665      	mov	r5, ip
1a00327e:	2a08      	cmp	r2, #8
1a003280:	d10b      	bne.n	1a00329a <_printf_i+0x112>
1a003282:	6823      	ldr	r3, [r4, #0]
1a003284:	07db      	lsls	r3, r3, #31
1a003286:	d508      	bpl.n	1a00329a <_printf_i+0x112>
1a003288:	6923      	ldr	r3, [r4, #16]
1a00328a:	6862      	ldr	r2, [r4, #4]
1a00328c:	429a      	cmp	r2, r3
1a00328e:	bfde      	ittt	le
1a003290:	2330      	movle	r3, #48	; 0x30
1a003292:	f805 3c01 	strble.w	r3, [r5, #-1]
1a003296:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a00329a:	ebac 0305 	sub.w	r3, ip, r5
1a00329e:	6123      	str	r3, [r4, #16]
1a0032a0:	f8cd 8000 	str.w	r8, [sp]
1a0032a4:	463b      	mov	r3, r7
1a0032a6:	aa03      	add	r2, sp, #12
1a0032a8:	4621      	mov	r1, r4
1a0032aa:	4630      	mov	r0, r6
1a0032ac:	f7ff fef6 	bl	1a00309c <_printf_common>
1a0032b0:	3001      	adds	r0, #1
1a0032b2:	d14d      	bne.n	1a003350 <_printf_i+0x1c8>
1a0032b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0032b8:	b005      	add	sp, #20
1a0032ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0032be:	4839      	ldr	r0, [pc, #228]	; (1a0033a4 <_printf_i+0x21c>)
1a0032c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0032c4:	6813      	ldr	r3, [r2, #0]
1a0032c6:	6821      	ldr	r1, [r4, #0]
1a0032c8:	1d1d      	adds	r5, r3, #4
1a0032ca:	681b      	ldr	r3, [r3, #0]
1a0032cc:	6015      	str	r5, [r2, #0]
1a0032ce:	060a      	lsls	r2, r1, #24
1a0032d0:	d50b      	bpl.n	1a0032ea <_printf_i+0x162>
1a0032d2:	07ca      	lsls	r2, r1, #31
1a0032d4:	bf44      	itt	mi
1a0032d6:	f041 0120 	orrmi.w	r1, r1, #32
1a0032da:	6021      	strmi	r1, [r4, #0]
1a0032dc:	b91b      	cbnz	r3, 1a0032e6 <_printf_i+0x15e>
1a0032de:	6822      	ldr	r2, [r4, #0]
1a0032e0:	f022 0220 	bic.w	r2, r2, #32
1a0032e4:	6022      	str	r2, [r4, #0]
1a0032e6:	2210      	movs	r2, #16
1a0032e8:	e7b7      	b.n	1a00325a <_printf_i+0xd2>
1a0032ea:	064d      	lsls	r5, r1, #25
1a0032ec:	bf48      	it	mi
1a0032ee:	b29b      	uxthmi	r3, r3
1a0032f0:	e7ef      	b.n	1a0032d2 <_printf_i+0x14a>
1a0032f2:	4665      	mov	r5, ip
1a0032f4:	fbb3 f1f2 	udiv	r1, r3, r2
1a0032f8:	fb02 3311 	mls	r3, r2, r1, r3
1a0032fc:	5cc3      	ldrb	r3, [r0, r3]
1a0032fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a003302:	460b      	mov	r3, r1
1a003304:	2900      	cmp	r1, #0
1a003306:	d1f5      	bne.n	1a0032f4 <_printf_i+0x16c>
1a003308:	e7b9      	b.n	1a00327e <_printf_i+0xf6>
1a00330a:	6813      	ldr	r3, [r2, #0]
1a00330c:	6825      	ldr	r5, [r4, #0]
1a00330e:	6961      	ldr	r1, [r4, #20]
1a003310:	1d18      	adds	r0, r3, #4
1a003312:	6010      	str	r0, [r2, #0]
1a003314:	0628      	lsls	r0, r5, #24
1a003316:	681b      	ldr	r3, [r3, #0]
1a003318:	d501      	bpl.n	1a00331e <_printf_i+0x196>
1a00331a:	6019      	str	r1, [r3, #0]
1a00331c:	e002      	b.n	1a003324 <_printf_i+0x19c>
1a00331e:	066a      	lsls	r2, r5, #25
1a003320:	d5fb      	bpl.n	1a00331a <_printf_i+0x192>
1a003322:	8019      	strh	r1, [r3, #0]
1a003324:	2300      	movs	r3, #0
1a003326:	6123      	str	r3, [r4, #16]
1a003328:	4665      	mov	r5, ip
1a00332a:	e7b9      	b.n	1a0032a0 <_printf_i+0x118>
1a00332c:	6813      	ldr	r3, [r2, #0]
1a00332e:	1d19      	adds	r1, r3, #4
1a003330:	6011      	str	r1, [r2, #0]
1a003332:	681d      	ldr	r5, [r3, #0]
1a003334:	6862      	ldr	r2, [r4, #4]
1a003336:	2100      	movs	r1, #0
1a003338:	4628      	mov	r0, r5
1a00333a:	f000 f881 	bl	1a003440 <memchr>
1a00333e:	b108      	cbz	r0, 1a003344 <_printf_i+0x1bc>
1a003340:	1b40      	subs	r0, r0, r5
1a003342:	6060      	str	r0, [r4, #4]
1a003344:	6863      	ldr	r3, [r4, #4]
1a003346:	6123      	str	r3, [r4, #16]
1a003348:	2300      	movs	r3, #0
1a00334a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00334e:	e7a7      	b.n	1a0032a0 <_printf_i+0x118>
1a003350:	6923      	ldr	r3, [r4, #16]
1a003352:	462a      	mov	r2, r5
1a003354:	4639      	mov	r1, r7
1a003356:	4630      	mov	r0, r6
1a003358:	47c0      	blx	r8
1a00335a:	3001      	adds	r0, #1
1a00335c:	d0aa      	beq.n	1a0032b4 <_printf_i+0x12c>
1a00335e:	6823      	ldr	r3, [r4, #0]
1a003360:	079b      	lsls	r3, r3, #30
1a003362:	d413      	bmi.n	1a00338c <_printf_i+0x204>
1a003364:	68e0      	ldr	r0, [r4, #12]
1a003366:	9b03      	ldr	r3, [sp, #12]
1a003368:	4298      	cmp	r0, r3
1a00336a:	bfb8      	it	lt
1a00336c:	4618      	movlt	r0, r3
1a00336e:	e7a3      	b.n	1a0032b8 <_printf_i+0x130>
1a003370:	2301      	movs	r3, #1
1a003372:	464a      	mov	r2, r9
1a003374:	4639      	mov	r1, r7
1a003376:	4630      	mov	r0, r6
1a003378:	47c0      	blx	r8
1a00337a:	3001      	adds	r0, #1
1a00337c:	d09a      	beq.n	1a0032b4 <_printf_i+0x12c>
1a00337e:	3501      	adds	r5, #1
1a003380:	68e3      	ldr	r3, [r4, #12]
1a003382:	9a03      	ldr	r2, [sp, #12]
1a003384:	1a9b      	subs	r3, r3, r2
1a003386:	42ab      	cmp	r3, r5
1a003388:	dcf2      	bgt.n	1a003370 <_printf_i+0x1e8>
1a00338a:	e7eb      	b.n	1a003364 <_printf_i+0x1dc>
1a00338c:	2500      	movs	r5, #0
1a00338e:	f104 0919 	add.w	r9, r4, #25
1a003392:	e7f5      	b.n	1a003380 <_printf_i+0x1f8>
1a003394:	2b00      	cmp	r3, #0
1a003396:	d1ac      	bne.n	1a0032f2 <_printf_i+0x16a>
1a003398:	7803      	ldrb	r3, [r0, #0]
1a00339a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00339e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0033a2:	e76c      	b.n	1a00327e <_printf_i+0xf6>
1a0033a4:	1a003885 	.word	0x1a003885
1a0033a8:	1a003896 	.word	0x1a003896

1a0033ac <__sread>:
1a0033ac:	b510      	push	{r4, lr}
1a0033ae:	460c      	mov	r4, r1
1a0033b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0033b4:	f7fd fc4a 	bl	1a000c4c <_read_r>
1a0033b8:	2800      	cmp	r0, #0
1a0033ba:	bfab      	itete	ge
1a0033bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a0033be:	89a3      	ldrhlt	r3, [r4, #12]
1a0033c0:	181b      	addge	r3, r3, r0
1a0033c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a0033c6:	bfac      	ite	ge
1a0033c8:	6563      	strge	r3, [r4, #84]	; 0x54
1a0033ca:	81a3      	strhlt	r3, [r4, #12]
1a0033cc:	bd10      	pop	{r4, pc}

1a0033ce <__swrite>:
1a0033ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0033d2:	461f      	mov	r7, r3
1a0033d4:	898b      	ldrh	r3, [r1, #12]
1a0033d6:	05db      	lsls	r3, r3, #23
1a0033d8:	4605      	mov	r5, r0
1a0033da:	460c      	mov	r4, r1
1a0033dc:	4616      	mov	r6, r2
1a0033de:	d505      	bpl.n	1a0033ec <__swrite+0x1e>
1a0033e0:	2302      	movs	r3, #2
1a0033e2:	2200      	movs	r2, #0
1a0033e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0033e8:	f7fd fc2b 	bl	1a000c42 <_lseek_r>
1a0033ec:	89a3      	ldrh	r3, [r4, #12]
1a0033ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0033f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0033f6:	81a3      	strh	r3, [r4, #12]
1a0033f8:	4632      	mov	r2, r6
1a0033fa:	463b      	mov	r3, r7
1a0033fc:	4628      	mov	r0, r5
1a0033fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a003402:	f7fd bc4a 	b.w	1a000c9a <_write_r>

1a003406 <__sseek>:
1a003406:	b510      	push	{r4, lr}
1a003408:	460c      	mov	r4, r1
1a00340a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00340e:	f7fd fc18 	bl	1a000c42 <_lseek_r>
1a003412:	1c43      	adds	r3, r0, #1
1a003414:	89a3      	ldrh	r3, [r4, #12]
1a003416:	bf15      	itete	ne
1a003418:	6560      	strne	r0, [r4, #84]	; 0x54
1a00341a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a00341e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a003422:	81a3      	strheq	r3, [r4, #12]
1a003424:	bf18      	it	ne
1a003426:	81a3      	strhne	r3, [r4, #12]
1a003428:	bd10      	pop	{r4, pc}

1a00342a <__sclose>:
1a00342a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00342e:	f7fd bbf5 	b.w	1a000c1c <_close_r>
1a003432:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a003436:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00343a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00343e:	Address 0x000000001a00343e is out of bounds.


1a003440 <memchr>:
1a003440:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a003444:	2a10      	cmp	r2, #16
1a003446:	db2b      	blt.n	1a0034a0 <memchr+0x60>
1a003448:	f010 0f07 	tst.w	r0, #7
1a00344c:	d008      	beq.n	1a003460 <memchr+0x20>
1a00344e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a003452:	3a01      	subs	r2, #1
1a003454:	428b      	cmp	r3, r1
1a003456:	d02d      	beq.n	1a0034b4 <memchr+0x74>
1a003458:	f010 0f07 	tst.w	r0, #7
1a00345c:	b342      	cbz	r2, 1a0034b0 <memchr+0x70>
1a00345e:	d1f6      	bne.n	1a00344e <memchr+0xe>
1a003460:	b4f0      	push	{r4, r5, r6, r7}
1a003462:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a003466:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00346a:	f022 0407 	bic.w	r4, r2, #7
1a00346e:	f07f 0700 	mvns.w	r7, #0
1a003472:	2300      	movs	r3, #0
1a003474:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a003478:	3c08      	subs	r4, #8
1a00347a:	ea85 0501 	eor.w	r5, r5, r1
1a00347e:	ea86 0601 	eor.w	r6, r6, r1
1a003482:	fa85 f547 	uadd8	r5, r5, r7
1a003486:	faa3 f587 	sel	r5, r3, r7
1a00348a:	fa86 f647 	uadd8	r6, r6, r7
1a00348e:	faa5 f687 	sel	r6, r5, r7
1a003492:	b98e      	cbnz	r6, 1a0034b8 <memchr+0x78>
1a003494:	d1ee      	bne.n	1a003474 <memchr+0x34>
1a003496:	bcf0      	pop	{r4, r5, r6, r7}
1a003498:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00349c:	f002 0207 	and.w	r2, r2, #7
1a0034a0:	b132      	cbz	r2, 1a0034b0 <memchr+0x70>
1a0034a2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0034a6:	3a01      	subs	r2, #1
1a0034a8:	ea83 0301 	eor.w	r3, r3, r1
1a0034ac:	b113      	cbz	r3, 1a0034b4 <memchr+0x74>
1a0034ae:	d1f8      	bne.n	1a0034a2 <memchr+0x62>
1a0034b0:	2000      	movs	r0, #0
1a0034b2:	4770      	bx	lr
1a0034b4:	3801      	subs	r0, #1
1a0034b6:	4770      	bx	lr
1a0034b8:	2d00      	cmp	r5, #0
1a0034ba:	bf06      	itte	eq
1a0034bc:	4635      	moveq	r5, r6
1a0034be:	3803      	subeq	r0, #3
1a0034c0:	3807      	subne	r0, #7
1a0034c2:	f015 0f01 	tst.w	r5, #1
1a0034c6:	d107      	bne.n	1a0034d8 <memchr+0x98>
1a0034c8:	3001      	adds	r0, #1
1a0034ca:	f415 7f80 	tst.w	r5, #256	; 0x100
1a0034ce:	bf02      	ittt	eq
1a0034d0:	3001      	addeq	r0, #1
1a0034d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a0034d6:	3001      	addeq	r0, #1
1a0034d8:	bcf0      	pop	{r4, r5, r6, r7}
1a0034da:	3801      	subs	r0, #1
1a0034dc:	4770      	bx	lr
1a0034de:	bf00      	nop

1a0034e0 <__malloc_lock>:
1a0034e0:	4770      	bx	lr

1a0034e2 <__malloc_unlock>:
1a0034e2:	4770      	bx	lr
1a0034e4:	6e656942 	.word	0x6e656942
1a0034e8:	696e6576 	.word	0x696e6576
1a0034ec:	61206f64 	.word	0x61206f64
1a0034f0:	6973206c 	.word	0x6973206c
1a0034f4:	6d657473 	.word	0x6d657473
1a0034f8:	65642061 	.word	0x65642061
1a0034fc:	75727020 	.word	0x75727020
1a003500:	20616265 	.word	0x20616265
1a003504:	6c206564 	.word	0x6c206564
1a003508:	61632061 	.word	0x61632061
1a00350c:	6172616d 	.word	0x6172616d
1a003510:	37564f20 	.word	0x37564f20
1a003514:	0d303736 	.word	0x0d303736
1a003518:	00000000 	.word	0x00000000
1a00351c:	6f727245 	.word	0x6f727245
1a003520:	65642072 	.word	0x65642072
1a003524:	6e6f6320 	.word	0x6e6f6320
1a003528:	6f697865 	.word	0x6f697865
1a00352c:	00000d6e 	.word	0x00000d6e
1a003530:	69766552 	.word	0x69766552
1a003534:	65206573 	.word	0x65206573
1a003538:	4950206c 	.word	0x4950206c
1a00353c:	54554f4e 	.word	0x54554f4e
1a003540:	0000000d 	.word	0x0000000d
1a003544:	3637564f 	.word	0x3637564f
1a003548:	63203037 	.word	0x63203037
1a00354c:	69666e6f 	.word	0x69666e6f
1a003550:	61727567 	.word	0x61727567
1a003554:	00006164 	.word	0x00006164
1a003558:	002c6425 	.word	0x002c6425

1a00355c <ExtRateIn>:
1a00355c:	00000000                                ....

1a003560 <GpioButtons>:
1a003560:	08000400 09010900                       ........

1a003568 <GpioLeds>:
1a003568:	01050005 0e000205 0c010b01              ............

1a003574 <GpioPorts>:
1a003574:	03030003 0f050403 05031005 07030603     ................
1a003584:	ffff0802                                ....

1a003588 <OscRateIn>:
1a003588:	00b71b00                                ....

1a00358c <InitClkStates>:
1a00358c:	01010f01                                ....

1a003590 <pinmuxing>:
1a003590:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a0035a0:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0035b0:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0035c0:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0035d0:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0035e0:	00d50301 00d50401 00160107 00560207     ..............V.
1a0035f0:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a003600:	00570206                                ..W.

1a003604 <UART_BClock>:
1a003604:	01a201c2 01620182                       ......b.

1a00360c <UART_PClock>:
1a00360c:	00820081 00a200a1 08040201 0f0f0f03     ................
1a00361c:	000000ff                                ....

1a003620 <periph_to_base>:
1a003620:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a003630:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a003640:	000100e0 01000100 01200003 00060120     .......... . ...
1a003650:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a003660:	01820013 00120182 01a201a2 01c20011     ................
1a003670:	001001c2 01e201e2 0202000f 000e0202     ................
1a003680:	02220222 0223000d 001c0223              "."...#.#...

1a00368c <InitClkStates>:
1a00368c:	00010100 00010909 0001090a 01010701     ................
1a00369c:	00010902 00010906 0101090c 0001090d     ................
1a0036ac:	0001090e 0001090f 00010910 00010911     ................
1a0036bc:	00010912 00010913 00011114 00011119     ................
1a0036cc:	0001111a 0001111b                       ........

1a0036d4 <gpioPinsInit>:
1a0036d4:	02000104 00050701 05010d03 04080100     ................
1a0036e4:	02020002 02000304 00000403 04070002     ................
1a0036f4:	030c0300 09050402 05040103 04030208     ................
1a003704:	04020305 06040504 0802000c 03000b06     ................
1a003714:	00090607 07060503 060f0504 03030004     ................
1a003724:	02000404 00050404 06040502 04060200     ................
1a003734:	0c050408 05040a04 0003010e 14010a00     ................
1a003744:	010f0000 0d000012 00001101 0010010c     ................
1a003754:	07070300 000f0300 01000001 00000000     ................
1a003764:	000a0600 08060603 06100504 04030005     ................
1a003774:	03000106 04090400 04010d05 010b0000     ................
1a003784:	0200000f 00000001 00010104 02010800     ................
1a003794:	01090000 09010006 05040002 04010200     ................
1a0037a4:	02020105 02020504 0e00000a 01000b02     ................
1a0037b4:	000c020b 00040c01 04000200 01020001     ................
1a0037c4:	02000204 00030402 03070302 070b0300     ................
1a0037d4:	0c030004 03000507 0006070d 01020e03     ................
1a0037e4:	04010504 06020006 02000504 00040405     ................
1a0037f4:	08040402 040c0504 0d050409 05040a04     ................
1a003804:	0005010e ffff0801                       ........

1a00380c <ultrasonicSensorsIrqMap>:
1a00380c:	ff020100                                ....

1a003810 <__sf_fake_stderr>:
	...

1a003830 <__sf_fake_stdin>:
	...

1a003850 <__sf_fake_stdout>:
	...

1a003870 <_global_impure_ptr>:
1a003870:	10000088 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a003880:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a003890:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a0038a0:	64636261 ff006665                       abcdef..
